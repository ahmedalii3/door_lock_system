
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003984  00003a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080016a  0080016a  00003b22  2**0
                  ALLOC
  3 .stab         00003c78  00000000  00000000  00003b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018db  00000000  00000000  0000779c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00009077  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000091f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000093c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d53c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000d99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 13 	call	0x264a	; 0x264a <main>
      8a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <UART_init>:
//	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
//	UBRRH = ubrr_value>>8;
//	UBRRL = ubrr_value;
//}
void UART_init(const UART_ConfigType * Config_Ptr)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_init+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_init+0x8>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <UART_init+0xa>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     cb2:	1a 82       	std	Y+2, r1	; 0x02
     cb4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     cb6:	eb e2       	ldi	r30, 0x2B	; 43
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	switch(Config_Ptr->bit_data){
     cbe:	eb 81       	ldd	r30, Y+3	; 0x03
     cc0:	fc 81       	ldd	r31, Y+4	; 0x04
     cc2:	80 81       	ld	r24, Z
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3e 83       	std	Y+6, r19	; 0x06
     cca:	2d 83       	std	Y+5, r18	; 0x05
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	91 05       	cpc	r25, r1
     cd4:	49 f1       	breq	.+82     	; 0xd28 <UART_init+0x88>
     cd6:	2d 81       	ldd	r18, Y+5	; 0x05
     cd8:	3e 81       	ldd	r19, Y+6	; 0x06
     cda:	23 30       	cpi	r18, 0x03	; 3
     cdc:	31 05       	cpc	r19, r1
     cde:	54 f4       	brge	.+20     	; 0xcf4 <UART_init+0x54>
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	89 f0       	breq	.+34     	; 0xd0a <UART_init+0x6a>
     ce8:	2d 81       	ldd	r18, Y+5	; 0x05
     cea:	3e 81       	ldd	r19, Y+6	; 0x06
     cec:	21 30       	cpi	r18, 0x01	; 1
     cee:	31 05       	cpc	r19, r1
     cf0:	99 f0       	breq	.+38     	; 0xd18 <UART_init+0x78>
     cf2:	32 c0       	rjmp	.+100    	; 0xd58 <UART_init+0xb8>
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f0       	breq	.+58     	; 0xd38 <UART_init+0x98>
     cfe:	2d 81       	ldd	r18, Y+5	; 0x05
     d00:	3e 81       	ldd	r19, Y+6	; 0x06
     d02:	27 30       	cpi	r18, 0x07	; 7
     d04:	31 05       	cpc	r19, r1
     d06:	01 f1       	breq	.+64     	; 0xd48 <UART_init+0xa8>
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <UART_init+0xb8>
	case FIVE:
		UCSRB = ( 0 << UCSZ2);
     d0a:	ea e2       	ldi	r30, 0x2A	; 42
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
		UCSRC = ( 0 << UCSZ0) | (0<<UCSZ1);
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 82       	st	Z, r1
     d16:	20 c0       	rjmp	.+64     	; 0xd58 <UART_init+0xb8>
		break;
	case SIX:
		UCSRB = ( 0 << UCSZ2);
     d18:	ea e2       	ldi	r30, 0x2A	; 42
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	10 82       	st	Z, r1
		UCSRC = ( 1 << UCSZ0) | (0<<UCSZ1);
     d1e:	e0 e4       	ldi	r30, 0x40	; 64
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	80 83       	st	Z, r24
     d26:	18 c0       	rjmp	.+48     	; 0xd58 <UART_init+0xb8>
		break;
	case SEVEN:
		UCSRB = ( 0 << UCSZ2);
     d28:	ea e2       	ldi	r30, 0x2A	; 42
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1
		UCSRC = ( 0 << UCSZ0) | ( 1<<UCSZ1);
     d2e:	e0 e4       	ldi	r30, 0x40	; 64
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	80 83       	st	Z, r24
     d36:	10 c0       	rjmp	.+32     	; 0xd58 <UART_init+0xb8>
		break;
	case EIGT:

		UCSRB = ( 0 << UCSZ2);
     d38:	ea e2       	ldi	r30, 0x2A	; 42
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	10 82       	st	Z, r1
		UCSRC = ( 1 << UCSZ0) | ( 1 <<UCSZ1);
     d3e:	e0 e4       	ldi	r30, 0x40	; 64
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	80 83       	st	Z, r24
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <UART_init+0xb8>
		break;
	case NINE:
		UCSRB = ( 1 << UCSZ2);
     d48:	ea e2       	ldi	r30, 0x2A	; 42
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	80 83       	st	Z, r24
		UCSRC = ( 1 << UCSZ0) | ( 1 <<UCSZ1);
     d50:	e0 e4       	ldi	r30, 0x40	; 64
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	86 e0       	ldi	r24, 0x06	; 6
     d56:	80 83       	st	Z, r24
		break;
	}

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     d58:	aa e2       	ldi	r26, 0x2A	; 42
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ea e2       	ldi	r30, 0x2A	; 42
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 61       	ori	r24, 0x18	; 24
     d64:	8c 93       	st	X, r24
	 * UPM1:0  = Configure parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
     d66:	a0 e4       	ldi	r26, 0x40	; 64
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e0 e4       	ldi	r30, 0x40	; 64
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	8c 93       	st	X, r24

	UCSRC |= ((Config_Ptr->parity) << UPM0);
     d74:	a0 e4       	ldi	r26, 0x40	; 64
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e0 e4       	ldi	r30, 0x40	; 64
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	28 2f       	mov	r18, r24
     d80:	eb 81       	ldd	r30, Y+3	; 0x03
     d82:	fc 81       	ldd	r31, Y+4	; 0x04
     d84:	81 81       	ldd	r24, Z+1	; 0x01
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	82 95       	swap	r24
     d8c:	92 95       	swap	r25
     d8e:	90 7f       	andi	r25, 0xF0	; 240
     d90:	98 27       	eor	r25, r24
     d92:	80 7f       	andi	r24, 0xF0	; 240
     d94:	98 27       	eor	r25, r24
     d96:	82 2b       	or	r24, r18
     d98:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->stop_bit << USBS);
     d9a:	a0 e4       	ldi	r26, 0x40	; 64
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e0 e4       	ldi	r30, 0x40	; 64
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	28 2f       	mov	r18, r24
     da6:	eb 81       	ldd	r30, Y+3	; 0x03
     da8:	fc 81       	ldd	r31, Y+4	; 0x04
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	82 2b       	or	r24, r18
     dbe:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	83 81       	ldd	r24, Z+3	; 0x03
     dc6:	94 81       	ldd	r25, Z+4	; 0x04
     dc8:	a5 81       	ldd	r26, Z+5	; 0x05
     dca:	b6 81       	ldd	r27, Z+6	; 0x06
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	aa 1f       	adc	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	aa 1f       	adc	r26, r26
     dda:	bb 1f       	adc	r27, r27
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	aa 1f       	adc	r26, r26
     de2:	bb 1f       	adc	r27, r27
     de4:	9c 01       	movw	r18, r24
     de6:	ad 01       	movw	r20, r26
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	92 e1       	ldi	r25, 0x12	; 18
     dec:	aa e7       	ldi	r26, 0x7A	; 122
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
     df8:	da 01       	movw	r26, r20
     dfa:	c9 01       	movw	r24, r18
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     e02:	e0 e4       	ldi	r30, 0x40	; 64
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	89 2f       	mov	r24, r25
     e0c:	99 27       	eor	r25, r25
     e0e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     e10:	e9 e2       	ldi	r30, 0x29	; 41
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 83       	st	Z, r24
//	}

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

}
     e18:	26 96       	adiw	r28, 0x06	; 6
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	0f 92       	push	r0
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     e36:	eb e2       	ldi	r30, 0x2B	; 43
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	80 72       	andi	r24, 0x20	; 32
     e42:	90 70       	andi	r25, 0x00	; 0
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	b9 f3       	breq	.-18     	; 0xe36 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     e48:	ec e2       	ldi	r30, 0x2C	; 44
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     e60:	eb e2       	ldi	r30, 0x2B	; 43
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 23       	and	r24, r24
     e68:	dc f7       	brge	.-10     	; 0xe60 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     e6a:	ec e2       	ldi	r30, 0x2C	; 44
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <UART_sendString+0x6>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9b 83       	std	Y+3, r25	; 0x03
     e84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e86:	19 82       	std	Y+1, r1	; 0x01
     e88:	0e c0       	rjmp	.+28     	; 0xea6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	fc 01       	movw	r30, r24
     e96:	e2 0f       	add	r30, r18
     e98:	f3 1f       	adc	r31, r19
     e9a:	80 81       	ld	r24, Z
     e9c:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
		i++;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	9b 81       	ldd	r25, Y+3	; 0x03
     eb0:	fc 01       	movw	r30, r24
     eb2:	e2 0f       	add	r30, r18
     eb4:	f3 1f       	adc	r31, r19
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	39 f7       	brne	.-50     	; 0xe8a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <UART_receiveString+0xa>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9b 83       	std	Y+3, r25	; 0x03
     eda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     edc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	8c 01       	movw	r16, r24
     eea:	02 0f       	add	r16, r18
     eec:	13 1f       	adc	r17, r19
     eee:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 83       	st	Z, r24
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	9b 81       	ldd	r25, Y+3	; 0x03
     f08:	8c 01       	movw	r16, r24
     f0a:	02 0f       	add	r16, r18
     f0c:	13 1f       	adc	r17, r19
     f0e:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
     f12:	f8 01       	movw	r30, r16
     f14:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	fc 01       	movw	r30, r24
     f22:	e2 0f       	add	r30, r18
     f24:	f3 1f       	adc	r31, r19
     f26:	80 81       	ld	r24, Z
     f28:	83 32       	cpi	r24, 0x23	; 35
     f2a:	31 f7       	brne	.-52     	; 0xef8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	10 82       	st	Z, r1
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <TWI_init>:
#include "twi.h"
#include "../common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <TWI_init+0xa>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint16)(( (F_CPU / (Config_Ptr->bit_rate))-16 )/(8));
     f60:	00 e2       	ldi	r16, 0x20	; 32
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	24 81       	ldd	r18, Z+4	; 0x04
     f6a:	35 81       	ldd	r19, Z+5	; 0x05
     f6c:	46 81       	ldd	r20, Z+6	; 0x06
     f6e:	57 81       	ldd	r21, Z+7	; 0x07
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	92 e1       	ldi	r25, 0x12	; 18
     f74:	aa e7       	ldi	r26, 0x7A	; 122
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
     f80:	da 01       	movw	r26, r20
     f82:	c9 01       	movw	r24, r18
     f84:	40 97       	sbiw	r24, 0x10	; 16
     f86:	a1 09       	sbc	r26, r1
     f88:	b1 09       	sbc	r27, r1
     f8a:	68 94       	set
     f8c:	12 f8       	bld	r1, 2
     f8e:	b6 95       	lsr	r27
     f90:	a7 95       	ror	r26
     f92:	97 95       	ror	r25
     f94:	87 95       	ror	r24
     f96:	16 94       	lsr	r1
     f98:	d1 f7       	brne	.-12     	; 0xf8e <TWI_init+0x40>
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 83       	st	Z, r24
	TWSR = 0x00;
     f9e:	e1 e2       	ldi	r30, 0x21	; 33
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address) << 1); // my address = 0x01 :)
     fa4:	22 e2       	ldi	r18, 0x22	; 34
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	a2 81       	ldd	r26, Z+2	; 0x02
     fb2:	b3 81       	ldd	r27, Z+3	; 0x03
     fb4:	88 0f       	add	r24, r24
     fb6:	f9 01       	movw	r30, r18
     fb8:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	80 83       	st	Z, r24
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <TWI_start>:

void TWI_start(void)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fd8:	e6 e5       	ldi	r30, 0x56	; 86
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	84 ea       	ldi	r24, 0xA4	; 164
     fde:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 23       	and	r24, r24
     fe8:	dc f7       	brge	.-10     	; 0xfe0 <TWI_start+0x10>
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TWI_stop>:

void TWI_stop(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	84 e9       	ldi	r24, 0x94	; 148
     ffe:	80 83       	st	Z, r24
}
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1012:	e3 e2       	ldi	r30, 0x23	; 35
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    101a:	e6 e5       	ldi	r30, 0x56	; 86
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	84 e8       	ldi	r24, 0x84	; 132
    1020:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1022:	e6 e5       	ldi	r30, 0x56	; 86
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 23       	and	r24, r24
    102a:	dc f7       	brge	.-10     	; 0x1022 <TWI_writeByte+0x1c>
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    103c:	e6 e5       	ldi	r30, 0x56	; 86
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	84 ec       	ldi	r24, 0xC4	; 196
    1042:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1044:	e6 e5       	ldi	r30, 0x56	; 86
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	dc f7       	brge	.-10     	; 0x1044 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    104e:	e3 e2       	ldi	r30, 0x23	; 35
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1062:	e6 e5       	ldi	r30, 0x56	; 86
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	84 e8       	ldi	r24, 0x84	; 132
    1068:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 23       	and	r24, r24
    1072:	dc f7       	brge	.-10     	; 0x106a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1074:	e3 e2       	ldi	r30, 0x23	; 35
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    108a:	e1 e2       	ldi	r30, 0x21	; 33
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 7f       	andi	r24, 0xF8	; 248
    1092:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    10c8:	80 91 6a 01 	lds	r24, 0x016A
    10cc:	90 91 6b 01 	lds	r25, 0x016B
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	29 f0       	breq	.+10     	; 0x10de <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    10d4:	e0 91 6a 01 	lds	r30, 0x016A
    10d8:	f0 91 6b 01 	lds	r31, 0x016B
    10dc:	09 95       	icall
		}
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    112e:	80 91 6a 01 	lds	r24, 0x016A
    1132:	90 91 6b 01 	lds	r25, 0x016B
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	29 f0       	breq	.+10     	; 0x1144 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    113a:	e0 91 6a 01 	lds	r30, 0x016A
    113e:	f0 91 6b 01 	lds	r31, 0x016B
    1142:	09 95       	icall
		}
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <Timer1_init+0x6>
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    1178:	ac e4       	ldi	r26, 0x4C	; 76
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == NORMAL){
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	85 81       	ldd	r24, Z+5	; 0x05
    1190:	88 23       	and	r24, r24
    1192:	59 f4       	brne	.+22     	; 0x11aa <Timer1_init+0x40>
		TIMSK = (1<<TOIE1);
    1194:	e9 e5       	ldi	r30, 0x59	; 89
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	80 83       	st	Z, r24
		TCCR1B= ((Config_Ptr->prescaler) << 0);
    119c:	ae e4       	ldi	r26, 0x4E	; 78
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	8c 93       	st	X, r24
    11a8:	1d c0       	rjmp	.+58     	; 0x11e4 <Timer1_init+0x7a>
	}else if(Config_Ptr->mode == COMPARE){
    11aa:	e9 81       	ldd	r30, Y+1	; 0x01
    11ac:	fa 81       	ldd	r31, Y+2	; 0x02
    11ae:	85 81       	ldd	r24, Z+5	; 0x05
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	c1 f4       	brne	.+48     	; 0x11e4 <Timer1_init+0x7a>
		OCR1A = Config_Ptr->compare_value;
    11b4:	aa e4       	ldi	r26, 0x4A	; 74
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	9c 93       	st	X, r25
    11c4:	8e 93       	st	-X, r24
		TIMSK = (1<<OCIE1A);
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 e1       	ldi	r24, 0x10	; 16
    11cc:	80 83       	st	Z, r24
		TCCR1A = (1<<FOC1A);
    11ce:	ef e4       	ldi	r30, 0x4F	; 79
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	88 e0       	ldi	r24, 0x08	; 8
    11d4:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12) | ((Config_Ptr->prescaler) << 0);
    11d6:	ae e4       	ldi	r26, 0x4E	; 78
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e9 81       	ldd	r30, Y+1	; 0x01
    11dc:	fa 81       	ldd	r31, Y+2	; 0x02
    11de:	84 81       	ldd	r24, Z+4	; 0x04
    11e0:	88 60       	ori	r24, 0x08	; 8
    11e2:	8c 93       	st	X, r24
	}

}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <Timer1_deInit>:
void Timer1_deInit(void){
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS12);
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8b 7f       	andi	r24, 0xFB	; 251
    1202:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS11);
    1204:	ae e4       	ldi	r26, 0x4E	; 78
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ee e4       	ldi	r30, 0x4E	; 78
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS10);
    1212:	ae e4       	ldi	r26, 0x4E	; 78
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ee e4       	ldi	r30, 0x4E	; 78
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8e 7f       	andi	r24, 0xFE	; 254
    121e:	8c 93       	st	X, r24
}
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <Timer1_setCallBack+0x6>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	90 93 6b 01 	sts	0x016B, r25
    123c:	80 93 6a 01 	sts	0x016A, r24
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2e 97       	sbiw	r28, 0x0e	; 14
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	66 e0       	ldi	r22, 0x06	; 6
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	67 e0       	ldi	r22, 0x07	; 7
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a0 ea       	ldi	r26, 0xA0	; 160
    1278:	b1 e4       	ldi	r27, 0x41	; 65
    127a:	8b 87       	std	Y+11, r24	; 0x0b
    127c:	9c 87       	std	Y+12, r25	; 0x0c
    127e:	ad 87       	std	Y+13, r26	; 0x0d
    1280:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1282:	6b 85       	ldd	r22, Y+11	; 0x0b
    1284:	7c 85       	ldd	r23, Y+12	; 0x0c
    1286:	8d 85       	ldd	r24, Y+13	; 0x0d
    1288:	9e 85       	ldd	r25, Y+14	; 0x0e
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a ef       	ldi	r20, 0xFA	; 250
    1290:	54 e4       	ldi	r21, 0x44	; 68
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8f 83       	std	Y+7, r24	; 0x07
    129c:	98 87       	std	Y+8, r25	; 0x08
    129e:	a9 87       	std	Y+9, r26	; 0x09
    12a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b6:	88 23       	and	r24, r24
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <LCD_init+0x7a>
		__ticks = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	3f c0       	rjmp	.+126    	; 0x1342 <LCD_init+0xf8>
	else if (__tmp > 65535)
    12c4:	6f 81       	ldd	r22, Y+7	; 0x07
    12c6:	78 85       	ldd	r23, Y+8	; 0x08
    12c8:	89 85       	ldd	r24, Y+9	; 0x09
    12ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	4c f5       	brge	.+82     	; 0x132e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12de:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <LCD_init+0xda>
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <LCD_init+0xc8>
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	69 f7       	brne	.-38     	; 0x1306 <LCD_init+0xbc>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132e:	6f 81       	ldd	r22, Y+7	; 0x07
    1330:	78 85       	ldd	r23, Y+8	; 0x08
    1332:	89 85       	ldd	r24, Y+9	; 0x09
    1334:	9a 85       	ldd	r25, Y+10	; 0x0a
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <LCD_init+0x104>
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	6f ef       	ldi	r22, 0xFF	; 255
    135a:	0e 94 c1 10 	call	0x2182	; 0x2182 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    135e:	88 e3       	ldi	r24, 0x38	; 56
    1360:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1364:	8c e0       	ldi	r24, 0x0C	; 12
    1366:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_sendCommand>
}
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	e9 97       	sbiw	r28, 0x39	; 57
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	66 e0       	ldi	r22, 0x06	; 6
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e8       	ldi	r26, 0x80	; 128
    13a8:	bf e3       	ldi	r27, 0x3F	; 63
    13aa:	8d ab       	std	Y+53, r24	; 0x35
    13ac:	9e ab       	std	Y+54, r25	; 0x36
    13ae:	af ab       	std	Y+55, r26	; 0x37
    13b0:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b2:	6d a9       	ldd	r22, Y+53	; 0x35
    13b4:	7e a9       	ldd	r23, Y+54	; 0x36
    13b6:	8f a9       	ldd	r24, Y+55	; 0x37
    13b8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	4a ef       	ldi	r20, 0xFA	; 250
    13c0:	54 e4       	ldi	r21, 0x44	; 68
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	89 ab       	std	Y+49, r24	; 0x31
    13cc:	9a ab       	std	Y+50, r25	; 0x32
    13ce:	ab ab       	std	Y+51, r26	; 0x33
    13d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13d2:	69 a9       	ldd	r22, Y+49	; 0x31
    13d4:	7a a9       	ldd	r23, Y+50	; 0x32
    13d6:	8b a9       	ldd	r24, Y+51	; 0x33
    13d8:	9c a9       	ldd	r25, Y+52	; 0x34
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <LCD_sendCommand+0x72>
		__ticks = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	98 ab       	std	Y+48, r25	; 0x30
    13f0:	8f a7       	std	Y+47, r24	; 0x2f
    13f2:	3f c0       	rjmp	.+126    	; 0x1472 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    13f4:	69 a9       	ldd	r22, Y+49	; 0x31
    13f6:	7a a9       	ldd	r23, Y+50	; 0x32
    13f8:	8b a9       	ldd	r24, Y+51	; 0x33
    13fa:	9c a9       	ldd	r25, Y+52	; 0x34
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	4f e7       	ldi	r20, 0x7F	; 127
    1402:	57 e4       	ldi	r21, 0x47	; 71
    1404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1408:	18 16       	cp	r1, r24
    140a:	4c f5       	brge	.+82     	; 0x145e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140c:	6d a9       	ldd	r22, Y+53	; 0x35
    140e:	7e a9       	ldd	r23, Y+54	; 0x36
    1410:	8f a9       	ldd	r24, Y+55	; 0x37
    1412:	98 ad       	ldd	r25, Y+56	; 0x38
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	98 ab       	std	Y+48, r25	; 0x30
    1432:	8f a7       	std	Y+47, r24	; 0x2f
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <LCD_sendCommand+0xd2>
    1436:	88 ec       	ldi	r24, 0xC8	; 200
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9e a7       	std	Y+46, r25	; 0x2e
    143c:	8d a7       	std	Y+45, r24	; 0x2d
    143e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1440:	9e a5       	ldd	r25, Y+46	; 0x2e
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_sendCommand+0xc0>
    1446:	9e a7       	std	Y+46, r25	; 0x2e
    1448:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	8f a5       	ldd	r24, Y+47	; 0x2f
    144c:	98 a9       	ldd	r25, Y+48	; 0x30
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	98 ab       	std	Y+48, r25	; 0x30
    1452:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1454:	8f a5       	ldd	r24, Y+47	; 0x2f
    1456:	98 a9       	ldd	r25, Y+48	; 0x30
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	69 f7       	brne	.-38     	; 0x1436 <LCD_sendCommand+0xb4>
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145e:	69 a9       	ldd	r22, Y+49	; 0x31
    1460:	7a a9       	ldd	r23, Y+50	; 0x32
    1462:	8b a9       	ldd	r24, Y+51	; 0x33
    1464:	9c a9       	ldd	r25, Y+52	; 0x34
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	98 ab       	std	Y+48, r25	; 0x30
    1470:	8f a7       	std	Y+47, r24	; 0x2f
    1472:	8f a5       	ldd	r24, Y+47	; 0x2f
    1474:	98 a9       	ldd	r25, Y+48	; 0x30
    1476:	9c a7       	std	Y+44, r25	; 0x2c
    1478:	8b a7       	std	Y+43, r24	; 0x2b
    147a:	8b a5       	ldd	r24, Y+43	; 0x2b
    147c:	9c a5       	ldd	r25, Y+44	; 0x2c
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_sendCommand+0xfc>
    1482:	9c a7       	std	Y+44, r25	; 0x2c
    1484:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	67 e0       	ldi	r22, 0x07	; 7
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e8       	ldi	r26, 0x80	; 128
    1496:	bf e3       	ldi	r27, 0x3F	; 63
    1498:	8f a3       	std	Y+39, r24	; 0x27
    149a:	98 a7       	std	Y+40, r25	; 0x28
    149c:	a9 a7       	std	Y+41, r26	; 0x29
    149e:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	6f a1       	ldd	r22, Y+39	; 0x27
    14a2:	78 a5       	ldd	r23, Y+40	; 0x28
    14a4:	89 a5       	ldd	r24, Y+41	; 0x29
    14a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	4a ef       	ldi	r20, 0xFA	; 250
    14ae:	54 e4       	ldi	r21, 0x44	; 68
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8b a3       	std	Y+35, r24	; 0x23
    14ba:	9c a3       	std	Y+36, r25	; 0x24
    14bc:	ad a3       	std	Y+37, r26	; 0x25
    14be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14c0:	6b a1       	ldd	r22, Y+35	; 0x23
    14c2:	7c a1       	ldd	r23, Y+36	; 0x24
    14c4:	8d a1       	ldd	r24, Y+37	; 0x25
    14c6:	9e a1       	ldd	r25, Y+38	; 0x26
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <LCD_sendCommand+0x160>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9a a3       	std	Y+34, r25	; 0x22
    14de:	89 a3       	std	Y+33, r24	; 0x21
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	4c f5       	brge	.+82     	; 0x154c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fa:	6f a1       	ldd	r22, Y+39	; 0x27
    14fc:	78 a5       	ldd	r23, Y+40	; 0x28
    14fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1500:	9a a5       	ldd	r25, Y+42	; 0x2a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9a a3       	std	Y+34, r25	; 0x22
    1520:	89 a3       	std	Y+33, r24	; 0x21
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <LCD_sendCommand+0x1c0>
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	98 a3       	std	Y+32, r25	; 0x20
    152a:	8f 8f       	std	Y+31, r24	; 0x1f
    152c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    152e:	98 a1       	ldd	r25, Y+32	; 0x20
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_sendCommand+0x1ae>
    1534:	98 a3       	std	Y+32, r25	; 0x20
    1536:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	89 a1       	ldd	r24, Y+33	; 0x21
    153a:	9a a1       	ldd	r25, Y+34	; 0x22
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9a a3       	std	Y+34, r25	; 0x22
    1540:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	89 a1       	ldd	r24, Y+33	; 0x21
    1544:	9a a1       	ldd	r25, Y+34	; 0x22
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <LCD_sendCommand+0x1a2>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6b a1       	ldd	r22, Y+35	; 0x23
    154e:	7c a1       	ldd	r23, Y+36	; 0x24
    1550:	8d a1       	ldd	r24, Y+37	; 0x25
    1552:	9e a1       	ldd	r25, Y+38	; 0x26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9a a3       	std	Y+34, r25	; 0x22
    155e:	89 a3       	std	Y+33, r24	; 0x21
    1560:	89 a1       	ldd	r24, Y+33	; 0x21
    1562:	9a a1       	ldd	r25, Y+34	; 0x22
    1564:	9e 8f       	std	Y+30, r25	; 0x1e
    1566:	8d 8f       	std	Y+29, r24	; 0x1d
    1568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_sendCommand+0x1ea>
    1570:	9e 8f       	std	Y+30, r25	; 0x1e
    1572:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	69 ad       	ldd	r22, Y+57	; 0x39
    1578:	0e 94 05 11 	call	0x220a	; 0x220a <GPIO_writePort>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e8       	ldi	r26, 0x80	; 128
    1582:	bf e3       	ldi	r27, 0x3F	; 63
    1584:	89 8f       	std	Y+25, r24	; 0x19
    1586:	9a 8f       	std	Y+26, r25	; 0x1a
    1588:	ab 8f       	std	Y+27, r26	; 0x1b
    158a:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	69 8d       	ldd	r22, Y+25	; 0x19
    158e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	9e 8b       	std	Y+22, r25	; 0x16
    15a8:	af 8b       	std	Y+23, r26	; 0x17
    15aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <LCD_sendCommand+0x24c>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    15ce:	6d 89       	ldd	r22, Y+21	; 0x15
    15d0:	7e 89       	ldd	r23, Y+22	; 0x16
    15d2:	8f 89       	ldd	r24, Y+23	; 0x17
    15d4:	98 8d       	ldd	r25, Y+24	; 0x18
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	69 8d       	ldd	r22, Y+25	; 0x19
    15e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9c 8b       	std	Y+20, r25	; 0x14
    160c:	8b 8b       	std	Y+19, r24	; 0x13
    160e:	0f c0       	rjmp	.+30     	; 0x162e <LCD_sendCommand+0x2ac>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9a 8b       	std	Y+18, r25	; 0x12
    1616:	89 8b       	std	Y+17, r24	; 0x11
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	9a 89       	ldd	r25, Y+18	; 0x12
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_sendCommand+0x29a>
    1620:	9a 8b       	std	Y+18, r25	; 0x12
    1622:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9c 8b       	std	Y+20, r25	; 0x14
    162c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8b 89       	ldd	r24, Y+19	; 0x13
    1630:	9c 89       	ldd	r25, Y+20	; 0x14
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <LCD_sendCommand+0x28e>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9c 8b       	std	Y+20, r25	; 0x14
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	8b 89       	ldd	r24, Y+19	; 0x13
    164e:	9c 89       	ldd	r25, Y+20	; 0x14
    1650:	98 8b       	std	Y+16, r25	; 0x10
    1652:	8f 87       	std	Y+15, r24	; 0x0f
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	98 89       	ldd	r25, Y+16	; 0x10
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_sendCommand+0x2d6>
    165c:	98 8b       	std	Y+16, r25	; 0x10
    165e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	67 e0       	ldi	r22, 0x07	; 7
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e8       	ldi	r26, 0x80	; 128
    1670:	bf e3       	ldi	r27, 0x3F	; 63
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	ad 87       	std	Y+13, r26	; 0x0d
    1678:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a ef       	ldi	r20, 0xFA	; 250
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8f 83       	std	Y+7, r24	; 0x07
    1694:	98 87       	std	Y+8, r25	; 0x08
    1696:	a9 87       	std	Y+9, r26	; 0x09
    1698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <LCD_sendCommand+0x33a>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <LCD_sendCommand+0x39a>
    16fe:	88 ec       	ldi	r24, 0xC8	; 200
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_sendCommand+0x388>
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <LCD_sendCommand+0x37c>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6f 81       	ldd	r22, Y+7	; 0x07
    1728:	78 85       	ldd	r23, Y+8	; 0x08
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_sendCommand+0x3c4>
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    174e:	e9 96       	adiw	r28, 0x39	; 57
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	e9 97       	sbiw	r28, 0x39	; 57
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	66 e0       	ldi	r22, 0x06	; 6
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 e8       	ldi	r26, 0x80	; 128
    1786:	bf e3       	ldi	r27, 0x3F	; 63
    1788:	8d ab       	std	Y+53, r24	; 0x35
    178a:	9e ab       	std	Y+54, r25	; 0x36
    178c:	af ab       	std	Y+55, r26	; 0x37
    178e:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6d a9       	ldd	r22, Y+53	; 0x35
    1792:	7e a9       	ldd	r23, Y+54	; 0x36
    1794:	8f a9       	ldd	r24, Y+55	; 0x37
    1796:	98 ad       	ldd	r25, Y+56	; 0x38
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a ef       	ldi	r20, 0xFA	; 250
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	89 ab       	std	Y+49, r24	; 0x31
    17aa:	9a ab       	std	Y+50, r25	; 0x32
    17ac:	ab ab       	std	Y+51, r26	; 0x33
    17ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17b0:	69 a9       	ldd	r22, Y+49	; 0x31
    17b2:	7a a9       	ldd	r23, Y+50	; 0x32
    17b4:	8b a9       	ldd	r24, Y+51	; 0x33
    17b6:	9c a9       	ldd	r25, Y+52	; 0x34
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    17d2:	69 a9       	ldd	r22, Y+49	; 0x31
    17d4:	7a a9       	ldd	r23, Y+50	; 0x32
    17d6:	8b a9       	ldd	r24, Y+51	; 0x33
    17d8:	9c a9       	ldd	r25, Y+52	; 0x34
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6d a9       	ldd	r22, Y+53	; 0x35
    17ec:	7e a9       	ldd	r23, Y+54	; 0x36
    17ee:	8f a9       	ldd	r24, Y+55	; 0x37
    17f0:	98 ad       	ldd	r25, Y+56	; 0x38
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	98 ab       	std	Y+48, r25	; 0x30
    1810:	8f a7       	std	Y+47, r24	; 0x2f
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <LCD_displayCharacter+0xd2>
    1814:	88 ec       	ldi	r24, 0xC8	; 200
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9e a7       	std	Y+46, r25	; 0x2e
    181a:	8d a7       	std	Y+45, r24	; 0x2d
    181c:	8d a5       	ldd	r24, Y+45	; 0x2d
    181e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_displayCharacter+0xc0>
    1824:	9e a7       	std	Y+46, r25	; 0x2e
    1826:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8f a5       	ldd	r24, Y+47	; 0x2f
    182a:	98 a9       	ldd	r25, Y+48	; 0x30
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	98 ab       	std	Y+48, r25	; 0x30
    1830:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8f a5       	ldd	r24, Y+47	; 0x2f
    1834:	98 a9       	ldd	r25, Y+48	; 0x30
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <LCD_displayCharacter+0xb4>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	69 a9       	ldd	r22, Y+49	; 0x31
    183e:	7a a9       	ldd	r23, Y+50	; 0x32
    1840:	8b a9       	ldd	r24, Y+51	; 0x33
    1842:	9c a9       	ldd	r25, Y+52	; 0x34
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	98 ab       	std	Y+48, r25	; 0x30
    184e:	8f a7       	std	Y+47, r24	; 0x2f
    1850:	8f a5       	ldd	r24, Y+47	; 0x2f
    1852:	98 a9       	ldd	r25, Y+48	; 0x30
    1854:	9c a7       	std	Y+44, r25	; 0x2c
    1856:	8b a7       	std	Y+43, r24	; 0x2b
    1858:	8b a5       	ldd	r24, Y+43	; 0x2b
    185a:	9c a5       	ldd	r25, Y+44	; 0x2c
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_displayCharacter+0xfc>
    1860:	9c a7       	std	Y+44, r25	; 0x2c
    1862:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	67 e0       	ldi	r22, 0x07	; 7
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e8       	ldi	r26, 0x80	; 128
    1874:	bf e3       	ldi	r27, 0x3F	; 63
    1876:	8f a3       	std	Y+39, r24	; 0x27
    1878:	98 a7       	std	Y+40, r25	; 0x28
    187a:	a9 a7       	std	Y+41, r26	; 0x29
    187c:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187e:	6f a1       	ldd	r22, Y+39	; 0x27
    1880:	78 a5       	ldd	r23, Y+40	; 0x28
    1882:	89 a5       	ldd	r24, Y+41	; 0x29
    1884:	9a a5       	ldd	r25, Y+42	; 0x2a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a ef       	ldi	r20, 0xFA	; 250
    188c:	54 e4       	ldi	r21, 0x44	; 68
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8b a3       	std	Y+35, r24	; 0x23
    1898:	9c a3       	std	Y+36, r25	; 0x24
    189a:	ad a3       	std	Y+37, r26	; 0x25
    189c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    189e:	6b a1       	ldd	r22, Y+35	; 0x23
    18a0:	7c a1       	ldd	r23, Y+36	; 0x24
    18a2:	8d a1       	ldd	r24, Y+37	; 0x25
    18a4:	9e a1       	ldd	r25, Y+38	; 0x26
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
    18be:	3f c0       	rjmp	.+126    	; 0x193e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	4c f5       	brge	.+82     	; 0x192a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d8:	6f a1       	ldd	r22, Y+39	; 0x27
    18da:	78 a5       	ldd	r23, Y+40	; 0x28
    18dc:	89 a5       	ldd	r24, Y+41	; 0x29
    18de:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9a a3       	std	Y+34, r25	; 0x22
    18fe:	89 a3       	std	Y+33, r24	; 0x21
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <LCD_displayCharacter+0x1c0>
    1902:	88 ec       	ldi	r24, 0xC8	; 200
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	98 a3       	std	Y+32, r25	; 0x20
    1908:	8f 8f       	std	Y+31, r24	; 0x1f
    190a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190c:	98 a1       	ldd	r25, Y+32	; 0x20
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_displayCharacter+0x1ae>
    1912:	98 a3       	std	Y+32, r25	; 0x20
    1914:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1916:	89 a1       	ldd	r24, Y+33	; 0x21
    1918:	9a a1       	ldd	r25, Y+34	; 0x22
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9a a3       	std	Y+34, r25	; 0x22
    191e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1920:	89 a1       	ldd	r24, Y+33	; 0x21
    1922:	9a a1       	ldd	r25, Y+34	; 0x22
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	69 f7       	brne	.-38     	; 0x1902 <LCD_displayCharacter+0x1a2>
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192a:	6b a1       	ldd	r22, Y+35	; 0x23
    192c:	7c a1       	ldd	r23, Y+36	; 0x24
    192e:	8d a1       	ldd	r24, Y+37	; 0x25
    1930:	9e a1       	ldd	r25, Y+38	; 0x26
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9a a3       	std	Y+34, r25	; 0x22
    193c:	89 a3       	std	Y+33, r24	; 0x21
    193e:	89 a1       	ldd	r24, Y+33	; 0x21
    1940:	9a a1       	ldd	r25, Y+34	; 0x22
    1942:	9e 8f       	std	Y+30, r25	; 0x1e
    1944:	8d 8f       	std	Y+29, r24	; 0x1d
    1946:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1948:	9e 8d       	ldd	r25, Y+30	; 0x1e
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_displayCharacter+0x1ea>
    194e:	9e 8f       	std	Y+30, r25	; 0x1e
    1950:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	69 ad       	ldd	r22, Y+57	; 0x39
    1956:	0e 94 05 11 	call	0x220a	; 0x220a <GPIO_writePort>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e8       	ldi	r26, 0x80	; 128
    1960:	bf e3       	ldi	r27, 0x3F	; 63
    1962:	89 8f       	std	Y+25, r24	; 0x19
    1964:	9a 8f       	std	Y+26, r25	; 0x1a
    1966:	ab 8f       	std	Y+27, r26	; 0x1b
    1968:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	69 8d       	ldd	r22, Y+25	; 0x19
    196c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    196e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a ef       	ldi	r20, 0xFA	; 250
    1978:	54 e4       	ldi	r21, 0x44	; 68
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8d 8b       	std	Y+21, r24	; 0x15
    1984:	9e 8b       	std	Y+22, r25	; 0x16
    1986:	af 8b       	std	Y+23, r26	; 0x17
    1988:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198a:	6d 89       	ldd	r22, Y+21	; 0x15
    198c:	7e 89       	ldd	r23, Y+22	; 0x16
    198e:	8f 89       	ldd	r24, Y+23	; 0x17
    1990:	98 8d       	ldd	r25, Y+24	; 0x18
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	2c f4       	brge	.+10     	; 0x19ac <LCD_displayCharacter+0x24c>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    19ac:	6d 89       	ldd	r22, Y+21	; 0x15
    19ae:	7e 89       	ldd	r23, Y+22	; 0x16
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	98 8d       	ldd	r25, Y+24	; 0x18
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	4c f5       	brge	.+82     	; 0x1a16 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	69 8d       	ldd	r22, Y+25	; 0x19
    19c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <LCD_displayCharacter+0x2ac>
    19ee:	88 ec       	ldi	r24, 0xC8	; 200
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9a 8b       	std	Y+18, r25	; 0x12
    19f4:	89 8b       	std	Y+17, r24	; 0x11
    19f6:	89 89       	ldd	r24, Y+17	; 0x11
    19f8:	9a 89       	ldd	r25, Y+18	; 0x12
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_displayCharacter+0x29a>
    19fe:	9a 8b       	std	Y+18, r25	; 0x12
    1a00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	9c 8b       	std	Y+20, r25	; 0x14
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f7       	brne	.-38     	; 0x19ee <LCD_displayCharacter+0x28e>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a16:	6d 89       	ldd	r22, Y+21	; 0x15
    1a18:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9c 8b       	std	Y+20, r25	; 0x14
    1a28:	8b 8b       	std	Y+19, r24	; 0x13
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	98 8b       	std	Y+16, r25	; 0x10
    1a30:	8f 87       	std	Y+15, r24	; 0x0f
    1a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a34:	98 89       	ldd	r25, Y+16	; 0x10
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_displayCharacter+0x2d6>
    1a3a:	98 8b       	std	Y+16, r25	; 0x10
    1a3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	67 e0       	ldi	r22, 0x07	; 7
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e8       	ldi	r26, 0x80	; 128
    1a4e:	bf e3       	ldi	r27, 0x3F	; 63
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LCD_displayCharacter+0x39a>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_displayCharacter+0x388>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <LCD_displayCharacter+0x37c>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_displayCharacter+0x3c4>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b2c:	e9 96       	adiw	r28, 0x39	; 57
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <LCD_displayString+0x6>
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9b 83       	std	Y+3, r25	; 0x03
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e2 0f       	add	r30, r18
    1b60:	f3 1f       	adc	r31, r19
    1b62:	80 81       	ld	r24, Z
    1b64:	0e 94 b0 0b 	call	0x1760	; 0x1760 <LCD_displayCharacter>
		i++;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e2 0f       	add	r30, r18
    1b7c:	f3 1f       	adc	r31, r19
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 23       	and	r24, r24
    1b82:	39 f7       	brne	.-50     	; 0x1b52 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <LCD_moveCursor+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <LCD_moveCursor+0x8>
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
    1ba0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3d 83       	std	Y+5, r19	; 0x05
    1baa:	2c 83       	std	Y+4, r18	; 0x04
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	c1 f0       	breq	.+48     	; 0x1be6 <LCD_moveCursor+0x56>
    1bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_moveCursor+0x3a>
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <LCD_moveCursor+0x50>
    1bc8:	19 c0       	rjmp	.+50     	; 0x1bfc <LCD_moveCursor+0x6c>
    1bca:	2c 81       	ldd	r18, Y+4	; 0x04
    1bcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	69 f0       	breq	.+26     	; 0x1bee <LCD_moveCursor+0x5e>
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	91 05       	cpc	r25, r1
    1bdc:	61 f0       	breq	.+24     	; 0x1bf6 <LCD_moveCursor+0x66>
    1bde:	0e c0       	rjmp	.+28     	; 0x1bfc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	80 5c       	subi	r24, 0xC0	; 192
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	80 5f       	subi	r24, 0xF0	; 240
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 5b       	subi	r24, 0xB0	; 176
    1bfa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	80 68       	ori	r24, 0x80	; 128
    1c00:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_sendCommand>
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <LCD_displayStringRowColumn+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <LCD_displayStringRowColumn+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	6a 83       	std	Y+2, r22	; 0x02
    1c24:	5c 83       	std	Y+4, r21	; 0x04
    1c26:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c2c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_displayString>
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	62 97       	sbiw	r28, 0x12	; 18
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	9a 8b       	std	Y+18, r25	; 0x12
    1c5c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c5e:	89 89       	ldd	r24, Y+17	; 0x11
    1c60:	9a 89       	ldd	r25, Y+18	; 0x12
    1c62:	9e 01       	movw	r18, r28
    1c64:	2f 5f       	subi	r18, 0xFF	; 255
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	b9 01       	movw	r22, r18
    1c6a:	4a e0       	ldi	r20, 0x0A	; 10
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <itoa>
   LCD_displayString(buff); /* Display the string */
    1c72:	ce 01       	movw	r24, r28
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <LCD_displayString>
}
    1c7a:	62 96       	adiw	r28, 0x12	; 18
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_sendCommand>
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <GPIO_setupPinDirection+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <GPIO_setupPinDirection+0x8>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
    1cb2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 30       	cpi	r24, 0x08	; 8
    1cb8:	08 f0       	brcs	.+2      	; 0x1cbc <GPIO_setupPinDirection+0x1c>
    1cba:	d5 c0       	rjmp	.+426    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	84 30       	cpi	r24, 0x04	; 4
    1cc0:	08 f0       	brcs	.+2      	; 0x1cc4 <GPIO_setupPinDirection+0x24>
    1cc2:	d1 c0       	rjmp	.+418    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3d 83       	std	Y+5, r19	; 0x05
    1ccc:	2c 83       	std	Y+4, r18	; 0x04
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <GPIO_setupPinDirection+0x3a>
    1cd8:	43 c0       	rjmp	.+134    	; 0x1d60 <GPIO_setupPinDirection+0xc0>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <GPIO_setupPinDirection+0x4e>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	71 f0       	breq	.+28     	; 0x1d08 <GPIO_setupPinDirection+0x68>
    1cec:	bc c0       	rjmp	.+376    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <GPIO_setupPinDirection+0x5a>
    1cf8:	5f c0       	rjmp	.+190    	; 0x1db8 <GPIO_setupPinDirection+0x118>
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <GPIO_setupPinDirection+0x66>
    1d04:	85 c0       	rjmp	.+266    	; 0x1e10 <GPIO_setupPinDirection+0x170>
    1d06:	af c0       	rjmp	.+350    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	a1 f4       	brne	.+40     	; 0x1d36 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d0e:	aa e3       	ldi	r26, 0x3A	; 58
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	ea e3       	ldi	r30, 0x3A	; 58
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	48 2f       	mov	r20, r24
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <GPIO_setupPinDirection+0x8c>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <GPIO_setupPinDirection+0x88>
    1d30:	84 2b       	or	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	98 c0       	rjmp	.+304    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d36:	aa e3       	ldi	r26, 0x3A	; 58
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ea e3       	ldi	r30, 0x3A	; 58
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	48 2f       	mov	r20, r24
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <GPIO_setupPinDirection+0xb4>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <GPIO_setupPinDirection+0xb0>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	83 c0       	rjmp	.+262    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	a1 f4       	brne	.+40     	; 0x1d8e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d66:	a7 e3       	ldi	r26, 0x37	; 55
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e7 e3       	ldi	r30, 0x37	; 55
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <GPIO_setupPinDirection+0xe4>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <GPIO_setupPinDirection+0xe0>
    1d88:	84 2b       	or	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	6c c0       	rjmp	.+216    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d8e:	a7 e3       	ldi	r26, 0x37	; 55
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e3       	ldi	r30, 0x37	; 55
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <GPIO_setupPinDirection+0x10c>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <GPIO_setupPinDirection+0x108>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	57 c0       	rjmp	.+174    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	a1 f4       	brne	.+40     	; 0x1de6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dbe:	a4 e3       	ldi	r26, 0x34	; 52
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e4 e3       	ldi	r30, 0x34	; 52
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <GPIO_setupPinDirection+0x13c>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <GPIO_setupPinDirection+0x138>
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	40 c0       	rjmp	.+128    	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1de6:	a4 e3       	ldi	r26, 0x34	; 52
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e4 e3       	ldi	r30, 0x34	; 52
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 2e       	mov	r0, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <GPIO_setupPinDirection+0x164>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <GPIO_setupPinDirection+0x160>
    1e08:	80 95       	com	r24
    1e0a:	84 23       	and	r24, r20
    1e0c:	8c 93       	st	X, r24
    1e0e:	2b c0       	rjmp	.+86     	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	a1 f4       	brne	.+40     	; 0x1e3e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e16:	a1 e3       	ldi	r26, 0x31	; 49
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e1 e3       	ldi	r30, 0x31	; 49
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <GPIO_setupPinDirection+0x194>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <GPIO_setupPinDirection+0x190>
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e3e:	a1 e3       	ldi	r26, 0x31	; 49
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e1 e3       	ldi	r30, 0x31	; 49
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <GPIO_setupPinDirection+0x1bc>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <GPIO_setupPinDirection+0x1b8>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <GPIO_writePin+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <GPIO_writePin+0x8>
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	6a 83       	std	Y+2, r22	; 0x02
    1e88:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	88 30       	cpi	r24, 0x08	; 8
    1e8e:	08 f0       	brcs	.+2      	; 0x1e92 <GPIO_writePin+0x1c>
    1e90:	d5 c0       	rjmp	.+426    	; 0x203c <GPIO_writePin+0x1c6>
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	84 30       	cpi	r24, 0x04	; 4
    1e96:	08 f0       	brcs	.+2      	; 0x1e9a <GPIO_writePin+0x24>
    1e98:	d1 c0       	rjmp	.+418    	; 0x203c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 83       	std	Y+5, r19	; 0x05
    1ea2:	2c 83       	std	Y+4, r18	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <GPIO_writePin+0x3a>
    1eae:	43 c0       	rjmp	.+134    	; 0x1f36 <GPIO_writePin+0xc0>
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <GPIO_writePin+0x4e>
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <GPIO_writePin+0x68>
    1ec2:	bc c0       	rjmp	.+376    	; 0x203c <GPIO_writePin+0x1c6>
    1ec4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	31 05       	cpc	r19, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <GPIO_writePin+0x5a>
    1ece:	5f c0       	rjmp	.+190    	; 0x1f8e <GPIO_writePin+0x118>
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <GPIO_writePin+0x66>
    1eda:	85 c0       	rjmp	.+266    	; 0x1fe6 <GPIO_writePin+0x170>
    1edc:	af c0       	rjmp	.+350    	; 0x203c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	a1 f4       	brne	.+40     	; 0x1f0c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ee4:	ab e3       	ldi	r26, 0x3B	; 59
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	eb e3       	ldi	r30, 0x3B	; 59
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <GPIO_writePin+0x8c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <GPIO_writePin+0x88>
    1f06:	84 2b       	or	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	98 c0       	rjmp	.+304    	; 0x203c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f0c:	ab e3       	ldi	r26, 0x3B	; 59
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	eb e3       	ldi	r30, 0x3B	; 59
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <GPIO_writePin+0xb4>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <GPIO_writePin+0xb0>
    1f2e:	80 95       	com	r24
    1f30:	84 23       	and	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	83 c0       	rjmp	.+262    	; 0x203c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	a1 f4       	brne	.+40     	; 0x1f64 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f3c:	a8 e3       	ldi	r26, 0x38	; 56
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e8 e3       	ldi	r30, 0x38	; 56
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_writePin+0xe4>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_writePin+0xe0>
    1f5e:	84 2b       	or	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	6c c0       	rjmp	.+216    	; 0x203c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f64:	a8 e3       	ldi	r26, 0x38	; 56
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e8 e3       	ldi	r30, 0x38	; 56
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <GPIO_writePin+0x10c>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <GPIO_writePin+0x108>
    1f86:	80 95       	com	r24
    1f88:	84 23       	and	r24, r20
    1f8a:	8c 93       	st	X, r24
    1f8c:	57 c0       	rjmp	.+174    	; 0x203c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	a1 f4       	brne	.+40     	; 0x1fbc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f94:	a5 e3       	ldi	r26, 0x35	; 53
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e3       	ldi	r30, 0x35	; 53
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	48 2f       	mov	r20, r24
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <GPIO_writePin+0x13c>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <GPIO_writePin+0x138>
    1fb6:	84 2b       	or	r24, r20
    1fb8:	8c 93       	st	X, r24
    1fba:	40 c0       	rjmp	.+128    	; 0x203c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fbc:	a5 e3       	ldi	r26, 0x35	; 53
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e5 e3       	ldi	r30, 0x35	; 53
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_writePin+0x164>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_writePin+0x160>
    1fde:	80 95       	com	r24
    1fe0:	84 23       	and	r24, r20
    1fe2:	8c 93       	st	X, r24
    1fe4:	2b c0       	rjmp	.+86     	; 0x203c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	a1 f4       	brne	.+40     	; 0x2014 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fec:	a2 e3       	ldi	r26, 0x32	; 50
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e2 e3       	ldi	r30, 0x32	; 50
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <GPIO_writePin+0x194>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <GPIO_writePin+0x190>
    200e:	84 2b       	or	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	14 c0       	rjmp	.+40     	; 0x203c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2014:	a2 e3       	ldi	r26, 0x32	; 50
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_writePin+0x1bc>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_writePin+0x1b8>
    2036:	80 95       	com	r24
    2038:	84 23       	and	r24, r20
    203a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <GPIO_readPin+0x6>
    2052:	00 d0       	rcall	.+0      	; 0x2054 <GPIO_readPin+0x8>
    2054:	0f 92       	push	r0
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	8a 83       	std	Y+2, r24	; 0x02
    205c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    205e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	08 f0       	brcs	.+2      	; 0x2068 <GPIO_readPin+0x1c>
    2066:	84 c0       	rjmp	.+264    	; 0x2170 <GPIO_readPin+0x124>
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	08 f0       	brcs	.+2      	; 0x2070 <GPIO_readPin+0x24>
    206e:	80 c0       	rjmp	.+256    	; 0x2170 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3d 83       	std	Y+5, r19	; 0x05
    2078:	2c 83       	std	Y+4, r18	; 0x04
    207a:	4c 81       	ldd	r20, Y+4	; 0x04
    207c:	5d 81       	ldd	r21, Y+5	; 0x05
    207e:	41 30       	cpi	r20, 0x01	; 1
    2080:	51 05       	cpc	r21, r1
    2082:	79 f1       	breq	.+94     	; 0x20e2 <GPIO_readPin+0x96>
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	82 30       	cpi	r24, 0x02	; 2
    208a:	91 05       	cpc	r25, r1
    208c:	34 f4       	brge	.+12     	; 0x209a <GPIO_readPin+0x4e>
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	21 15       	cp	r18, r1
    2094:	31 05       	cpc	r19, r1
    2096:	69 f0       	breq	.+26     	; 0x20b2 <GPIO_readPin+0x66>
    2098:	6b c0       	rjmp	.+214    	; 0x2170 <GPIO_readPin+0x124>
    209a:	4c 81       	ldd	r20, Y+4	; 0x04
    209c:	5d 81       	ldd	r21, Y+5	; 0x05
    209e:	42 30       	cpi	r20, 0x02	; 2
    20a0:	51 05       	cpc	r21, r1
    20a2:	b9 f1       	breq	.+110    	; 0x2112 <GPIO_readPin+0xc6>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	91 05       	cpc	r25, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <GPIO_readPin+0x64>
    20ae:	49 c0       	rjmp	.+146    	; 0x2142 <GPIO_readPin+0xf6>
    20b0:	5f c0       	rjmp	.+190    	; 0x2170 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20b2:	e9 e3       	ldi	r30, 0x39	; 57
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <GPIO_readPin+0x7e>
    20c6:	55 95       	asr	r21
    20c8:	47 95       	ror	r20
    20ca:	8a 95       	dec	r24
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <GPIO_readPin+0x7a>
    20ce:	ca 01       	movw	r24, r20
    20d0:	81 70       	andi	r24, 0x01	; 1
    20d2:	90 70       	andi	r25, 0x00	; 0
    20d4:	88 23       	and	r24, r24
    20d6:	19 f0       	breq	.+6      	; 0x20de <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	49 c0       	rjmp	.+146    	; 0x2170 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20de:	19 82       	std	Y+1, r1	; 0x01
    20e0:	47 c0       	rjmp	.+142    	; 0x2170 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20e2:	e6 e3       	ldi	r30, 0x36	; 54
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a9 01       	movw	r20, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <GPIO_readPin+0xae>
    20f6:	55 95       	asr	r21
    20f8:	47 95       	ror	r20
    20fa:	8a 95       	dec	r24
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <GPIO_readPin+0xaa>
    20fe:	ca 01       	movw	r24, r20
    2100:	81 70       	andi	r24, 0x01	; 1
    2102:	90 70       	andi	r25, 0x00	; 0
    2104:	88 23       	and	r24, r24
    2106:	19 f0       	breq	.+6      	; 0x210e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	31 c0       	rjmp	.+98     	; 0x2170 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    210e:	19 82       	std	Y+1, r1	; 0x01
    2110:	2f c0       	rjmp	.+94     	; 0x2170 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2112:	e3 e3       	ldi	r30, 0x33	; 51
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a9 01       	movw	r20, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_readPin+0xde>
    2126:	55 95       	asr	r21
    2128:	47 95       	ror	r20
    212a:	8a 95       	dec	r24
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_readPin+0xda>
    212e:	ca 01       	movw	r24, r20
    2130:	81 70       	andi	r24, 0x01	; 1
    2132:	90 70       	andi	r25, 0x00	; 0
    2134:	88 23       	and	r24, r24
    2136:	19 f0       	breq	.+6      	; 0x213e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	17 c0       	rjmp	.+46     	; 0x2170 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2142:	e0 e3       	ldi	r30, 0x30	; 48
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a9 01       	movw	r20, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GPIO_readPin+0x10e>
    2156:	55 95       	asr	r21
    2158:	47 95       	ror	r20
    215a:	8a 95       	dec	r24
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <GPIO_readPin+0x10a>
    215e:	ca 01       	movw	r24, r20
    2160:	81 70       	andi	r24, 0x01	; 1
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	88 23       	and	r24, r24
    2166:	19 f0       	breq	.+6      	; 0x216e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    216e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <GPIO_setupPortDirection+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <GPIO_setupPortDirection+0x8>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	84 30       	cpi	r24, 0x04	; 4
    2196:	90 f5       	brcc	.+100    	; 0x21fc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	3c 83       	std	Y+4, r19	; 0x04
    21a0:	2b 83       	std	Y+3, r18	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	d1 f0       	breq	.+52     	; 0x21e0 <GPIO_setupPortDirection+0x5e>
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	22 30       	cpi	r18, 0x02	; 2
    21b2:	31 05       	cpc	r19, r1
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <GPIO_setupPortDirection+0x3e>
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <GPIO_setupPortDirection+0x54>
    21be:	1e c0       	rjmp	.+60     	; 0x21fc <GPIO_setupPortDirection+0x7a>
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	3c 81       	ldd	r19, Y+4	; 0x04
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	81 f0       	breq	.+32     	; 0x21ea <GPIO_setupPortDirection+0x68>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	81 f0       	breq	.+32     	; 0x21f4 <GPIO_setupPortDirection+0x72>
    21d4:	13 c0       	rjmp	.+38     	; 0x21fc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21d6:	ea e3       	ldi	r30, 0x3A	; 58
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	80 83       	st	Z, r24
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21e0:	e7 e3       	ldi	r30, 0x37	; 55
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	80 83       	st	Z, r24
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21ea:	e4 e3       	ldi	r30, 0x34	; 52
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	80 83       	st	Z, r24
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21f4:	e1 e3       	ldi	r30, 0x31	; 49
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <GPIO_writePort+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <GPIO_writePort+0x8>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	90 f5       	brcc	.+100    	; 0x2284 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3c 83       	std	Y+4, r19	; 0x04
    2228:	2b 83       	std	Y+3, r18	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	91 05       	cpc	r25, r1
    2232:	d1 f0       	breq	.+52     	; 0x2268 <GPIO_writePort+0x5e>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	22 30       	cpi	r18, 0x02	; 2
    223a:	31 05       	cpc	r19, r1
    223c:	2c f4       	brge	.+10     	; 0x2248 <GPIO_writePort+0x3e>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	61 f0       	breq	.+24     	; 0x225e <GPIO_writePort+0x54>
    2246:	1e c0       	rjmp	.+60     	; 0x2284 <GPIO_writePort+0x7a>
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	81 f0       	breq	.+32     	; 0x2272 <GPIO_writePort+0x68>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	83 30       	cpi	r24, 0x03	; 3
    2258:	91 05       	cpc	r25, r1
    225a:	81 f0       	breq	.+32     	; 0x227c <GPIO_writePort+0x72>
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    225e:	eb e3       	ldi	r30, 0x3B	; 59
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	80 83       	st	Z, r24
    2266:	0e c0       	rjmp	.+28     	; 0x2284 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2268:	e8 e3       	ldi	r30, 0x38	; 56
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	80 83       	st	Z, r24
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2272:	e5 e3       	ldi	r30, 0x35	; 53
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	80 83       	st	Z, r24
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    227c:	e2 e3       	ldi	r30, 0x32	; 50
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	80 83       	st	Z, r24
			break;
		}
	}
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <GPIO_readPort+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <GPIO_readPort+0x8>
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22a0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	84 30       	cpi	r24, 0x04	; 4
    22a6:	90 f5       	brcc	.+100    	; 0x230c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	3c 83       	std	Y+4, r19	; 0x04
    22b0:	2b 83       	std	Y+3, r18	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	91 05       	cpc	r25, r1
    22ba:	d1 f0       	breq	.+52     	; 0x22f0 <GPIO_readPort+0x5e>
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <GPIO_readPort+0x3e>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	61 f0       	breq	.+24     	; 0x22e6 <GPIO_readPort+0x54>
    22ce:	1e c0       	rjmp	.+60     	; 0x230c <GPIO_readPort+0x7a>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	81 f0       	breq	.+32     	; 0x22fa <GPIO_readPort+0x68>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	83 30       	cpi	r24, 0x03	; 3
    22e0:	91 05       	cpc	r25, r1
    22e2:	81 f0       	breq	.+32     	; 0x2304 <GPIO_readPort+0x72>
    22e4:	13 c0       	rjmp	.+38     	; 0x230c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22e6:	e9 e3       	ldi	r30, 0x39	; 57
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	0e c0       	rjmp	.+28     	; 0x230c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22f0:	e6 e3       	ldi	r30, 0x36	; 54
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	09 c0       	rjmp	.+18     	; 0x230c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22fa:	e3 e3       	ldi	r30, 0x33	; 51
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	04 c0       	rjmp	.+8      	; 0x230c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2304:	e0 e3       	ldi	r30, 0x30	; 48
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    230c:	89 81       	ldd	r24, Y+1	; 0x01
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <EEPROM_writeByte>:
 */
#include "eeprom.h"
#include "../twi/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <EEPROM_writeByte+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <EEPROM_writeByte+0x8>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    232e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2332:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    2336:	88 30       	cpi	r24, 0x08	; 8
    2338:	11 f0       	breq	.+4      	; 0x233e <EEPROM_writeByte+0x22>
        return ERROR;
    233a:	1c 82       	std	Y+4, r1	; 0x04
    233c:	28 c0       	rjmp	.+80     	; 0x238e <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	80 70       	andi	r24, 0x00	; 0
    2344:	97 70       	andi	r25, 0x07	; 7
    2346:	88 0f       	add	r24, r24
    2348:	89 2f       	mov	r24, r25
    234a:	88 1f       	adc	r24, r24
    234c:	99 0b       	sbc	r25, r25
    234e:	91 95       	neg	r25
    2350:	80 6a       	ori	r24, 0xA0	; 160
    2352:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2356:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    235a:	88 31       	cpi	r24, 0x18	; 24
    235c:	11 f0       	breq	.+4      	; 0x2362 <EEPROM_writeByte+0x46>
        return ERROR;
    235e:	1c 82       	std	Y+4, r1	; 0x04
    2360:	16 c0       	rjmp	.+44     	; 0x238e <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2368:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    236c:	88 32       	cpi	r24, 0x28	; 40
    236e:	11 f0       	breq	.+4      	; 0x2374 <EEPROM_writeByte+0x58>
        return ERROR;
    2370:	1c 82       	std	Y+4, r1	; 0x04
    2372:	0d c0       	rjmp	.+26     	; 0x238e <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    237a:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    237e:	88 32       	cpi	r24, 0x28	; 40
    2380:	11 f0       	breq	.+4      	; 0x2386 <EEPROM_writeByte+0x6a>
        return ERROR;
    2382:	1c 82       	std	Y+4, r1	; 0x04
    2384:	04 c0       	rjmp	.+8      	; 0x238e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2386:	0e 94 f8 07 	call	0xff0	; 0xff0 <TWI_stop>

    return SUCCESS;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	8c 83       	std	Y+4, r24	; 0x04
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <EEPROM_readByte+0x6>
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <EEPROM_readByte+0x8>
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	7c 83       	std	Y+4, r23	; 0x04
    23b2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    23b4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    23b8:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    23bc:	88 30       	cpi	r24, 0x08	; 8
    23be:	11 f0       	breq	.+4      	; 0x23c4 <EEPROM_readByte+0x26>
        return ERROR;
    23c0:	1d 82       	std	Y+5, r1	; 0x05
    23c2:	44 c0       	rjmp	.+136    	; 0x244c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	80 70       	andi	r24, 0x00	; 0
    23ca:	97 70       	andi	r25, 0x07	; 7
    23cc:	88 0f       	add	r24, r24
    23ce:	89 2f       	mov	r24, r25
    23d0:	88 1f       	adc	r24, r24
    23d2:	99 0b       	sbc	r25, r25
    23d4:	91 95       	neg	r25
    23d6:	80 6a       	ori	r24, 0xA0	; 160
    23d8:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    23dc:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    23e0:	88 31       	cpi	r24, 0x18	; 24
    23e2:	11 f0       	breq	.+4      	; 0x23e8 <EEPROM_readByte+0x4a>
        return ERROR;
    23e4:	1d 82       	std	Y+5, r1	; 0x05
    23e6:	32 c0       	rjmp	.+100    	; 0x244c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    23ee:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    23f2:	88 32       	cpi	r24, 0x28	; 40
    23f4:	11 f0       	breq	.+4      	; 0x23fa <EEPROM_readByte+0x5c>
        return ERROR;
    23f6:	1d 82       	std	Y+5, r1	; 0x05
    23f8:	29 c0       	rjmp	.+82     	; 0x244c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    23fa:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    23fe:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    2402:	80 31       	cpi	r24, 0x10	; 16
    2404:	11 f0       	breq	.+4      	; 0x240a <EEPROM_readByte+0x6c>
        return ERROR;
    2406:	1d 82       	std	Y+5, r1	; 0x05
    2408:	21 c0       	rjmp	.+66     	; 0x244c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	80 70       	andi	r24, 0x00	; 0
    2410:	97 70       	andi	r25, 0x07	; 7
    2412:	88 0f       	add	r24, r24
    2414:	89 2f       	mov	r24, r25
    2416:	88 1f       	adc	r24, r24
    2418:	99 0b       	sbc	r25, r25
    241a:	91 95       	neg	r25
    241c:	81 6a       	ori	r24, 0xA1	; 161
    241e:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2422:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    2426:	80 34       	cpi	r24, 0x40	; 64
    2428:	11 f0       	breq	.+4      	; 0x242e <EEPROM_readByte+0x90>
        return ERROR;
    242a:	1d 82       	std	Y+5, r1	; 0x05
    242c:	0f c0       	rjmp	.+30     	; 0x244c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    242e:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_readByteWithNACK>
    2432:	eb 81       	ldd	r30, Y+3	; 0x03
    2434:	fc 81       	ldd	r31, Y+4	; 0x04
    2436:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2438:	0e 94 40 08 	call	0x1080	; 0x1080 <TWI_getStatus>
    243c:	88 35       	cpi	r24, 0x58	; 88
    243e:	11 f0       	breq	.+4      	; 0x2444 <EEPROM_readByte+0xa6>
        return ERROR;
    2440:	1d 82       	std	Y+5, r1	; 0x05
    2442:	04 c0       	rjmp	.+8      	; 0x244c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2444:	0e 94 f8 07 	call	0xff0	; 0xff0 <TWI_stop>

    return SUCCESS;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <DcMotor_Init>:


#include"../gpio/gpio.h"
#include "../PWM_timer0/pwm.h"
#include "dc_motor.h"
void DcMotor_Init(void){
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>

	GPIO_writePin(PORTB_ID,PIN0_ID,0);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,0);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
}
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <DcMotor_Rotate+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <DcMotor_Rotate+0x8>
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	8a 83       	std	Y+2, r24	; 0x02
    24a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle;
	dutyCycle = (speed*0.01)*255;
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	aa 27       	eor	r26, r26
    24ae:	97 fd       	sbrc	r25, 7
    24b0:	a0 95       	com	r26
    24b2:	ba 2f       	mov	r27, r26
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	2a e0       	ldi	r18, 0x0A	; 10
    24c6:	37 ed       	ldi	r19, 0xD7	; 215
    24c8:	43 e2       	ldi	r20, 0x23	; 35
    24ca:	5c e3       	ldi	r21, 0x3C	; 60
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	53 e4       	ldi	r21, 0x43	; 67
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(dutyCycle);
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <PWM_Timer0_Start>
	switch(state){
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3d 83       	std	Y+5, r19	; 0x05
    2504:	2c 83       	std	Y+4, r18	; 0x04
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	91 05       	cpc	r25, r1
    250e:	a1 f0       	breq	.+40     	; 0x2538 <DcMotor_Rotate+0xa4>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	d1 f0       	breq	.+52     	; 0x254e <DcMotor_Rotate+0xba>
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	01 f5       	brne	.+64     	; 0x2562 <DcMotor_Rotate+0xce>
		case CW:
			GPIO_writePin(PORTB_ID,PIN1_ID,1);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN0_ID,0);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    2536:	15 c0       	rjmp	.+42     	; 0x2562 <DcMotor_Rotate+0xce>
			break;
		case ACW:
			GPIO_writePin(PORTB_ID,PIN1_ID,0);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	61 e0       	ldi	r22, 0x01	; 1
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN0_ID,1);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
    254c:	0a c0       	rjmp	.+20     	; 0x2562 <DcMotor_Rotate+0xce>
			break;
		case stop:
			GPIO_writePin(PORTB_ID,PIN1_ID,0);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN0_ID,0);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
			break;
	}


}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <Buzzer_init>:
 *  Created on: Jul 29, 2024
 *      Author: DELL
 */
#include "../gpio/gpio.h"
#include"buzzer.h"
void Buzzer_init(){
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID,PIN0_ID ,PIN_OUTPUT);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID,PIN0_ID,0);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <Buzzer_on>:
void Buzzer_on(void){
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTA_ID,PIN0_ID,1);
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <Buzzer_off>:
void Buzzer_off(void){
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTA_ID,PIN0_ID,0);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <GPIO_writePin>
}
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <PWM_Timer0_Start>:


#include "../gpio/gpio.h"
#include"avr/io.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	0f 92       	push	r0
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 =0;
    25d0:	e2 e5       	ldi	r30, 0x52	; 82
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	10 82       	st	Z, r1
	OCR0 = duty_cycle;
    25d6:	ec e5       	ldi	r30, 0x5C	; 92
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	80 83       	st	Z, r24
//	DDRB  = DDRB | (1<<PB3);
	GPIO_setupPinDirection(PORTB_ID,PB3,1);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	63 e0       	ldi	r22, 0x03	; 3
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_setupPinDirection>
	TCCR0 |= (1<<WGM00) | (1<<WGM01) |  (1<<COM01) | (1<<CS01);
    25e8:	a3 e5       	ldi	r26, 0x53	; 83
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e3 e5       	ldi	r30, 0x53	; 83
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	8a 66       	ori	r24, 0x6A	; 106
    25f4:	8c 93       	st	X, r24

}
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <door_handle>:
uint8 count = 1;
typedef enum{
	yes,
	no
}stay;
void door_handle(){
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	if(count == 5){
    2606:	80 91 68 01 	lds	r24, 0x0168
    260a:	85 30       	cpi	r24, 0x05	; 5
    260c:	29 f4       	brne	.+10     	; 0x2618 <door_handle+0x1a>
		DcMotor_Rotate(stop,100);
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	64 e6       	ldi	r22, 0x64	; 100
    2612:	0e 94 4a 12 	call	0x2494	; 0x2494 <DcMotor_Rotate>
    2616:	11 c0       	rjmp	.+34     	; 0x263a <door_handle+0x3c>
	}else if(count == 6){
    2618:	80 91 68 01 	lds	r24, 0x0168
    261c:	86 30       	cpi	r24, 0x06	; 6
    261e:	29 f4       	brne	.+10     	; 0x262a <door_handle+0x2c>
		DcMotor_Rotate(ACW,100);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	64 e6       	ldi	r22, 0x64	; 100
    2624:	0e 94 4a 12 	call	0x2494	; 0x2494 <DcMotor_Rotate>
    2628:	08 c0       	rjmp	.+16     	; 0x263a <door_handle+0x3c>
	}else if(count == 11){
    262a:	80 91 68 01 	lds	r24, 0x0168
    262e:	8b 30       	cpi	r24, 0x0B	; 11
    2630:	21 f4       	brne	.+8      	; 0x263a <door_handle+0x3c>
		DcMotor_Rotate(stop,100);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	64 e6       	ldi	r22, 0x64	; 100
    2636:	0e 94 4a 12 	call	0x2494	; 0x2494 <DcMotor_Rotate>
	}
	count++;
    263a:	80 91 68 01 	lds	r24, 0x0168
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	80 93 68 01 	sts	0x0168, r24


}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <main>:
int main(void)
{
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	ca 5c       	subi	r28, 0xCA	; 202
    2658:	d0 40       	sbci	r29, 0x00	; 0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
		SREG |= (1<<7);
    2664:	af e5       	ldi	r26, 0x5F	; 95
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ef e5       	ldi	r30, 0x5F	; 95
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	80 68       	ori	r24, 0x80	; 128
    2670:	8c 93       	st	X, r24
		uint8 key_one[5];
		uint8 key_two[5];
		uint8 key_check[5];
		uint8 key;
		uint8 PlusOrMinus;
		uint8 cou = 0;
    2672:	fe 01       	movw	r30, r28
    2674:	ed 55       	subi	r30, 0x5D	; 93
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	10 82       	st	Z, r1
		Key_Match match = MATCH;
    267a:	fe 01       	movw	r30, r28
    267c:	ee 55       	subi	r30, 0x5E	; 94
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	10 82       	st	Z, r1
		stay StayInPlusMinus = yes;
    2682:	fe 01       	movw	r30, r28
    2684:	ef 55       	subi	r30, 0x5F	; 95
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	10 82       	st	Z, r1

		UART_ConfigType conf;
		conf.baud_rate = 9600;
    268a:	fe 01       	movw	r30, r28
    268c:	ea 54       	subi	r30, 0x4A	; 74
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 e8       	ldi	r24, 0x80	; 128
    2692:	95 e2       	ldi	r25, 0x25	; 37
    2694:	a0 e0       	ldi	r26, 0x00	; 0
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	83 83       	std	Z+3, r24	; 0x03
    269a:	94 83       	std	Z+4, r25	; 0x04
    269c:	a5 83       	std	Z+5, r26	; 0x05
    269e:	b6 83       	std	Z+6, r27	; 0x06
		conf.bit_data  = EIGT;
    26a0:	fe 01       	movw	r30, r28
    26a2:	ea 54       	subi	r30, 0x4A	; 74
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	80 83       	st	Z, r24
		conf.parity    = EVEN;
    26aa:	fe 01       	movw	r30, r28
    26ac:	ea 54       	subi	r30, 0x4A	; 74
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	81 83       	std	Z+1, r24	; 0x01
		conf.stop_bit  = ONE_BIT;
    26b4:	fe 01       	movw	r30, r28
    26b6:	ea 54       	subi	r30, 0x4A	; 74
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	12 82       	std	Z+2, r1	; 0x02

		TWI_ConfigType t_conf;
		t_conf.address= 10;
    26bc:	fe 01       	movw	r30, r28
    26be:	e3 54       	subi	r30, 0x43	; 67
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	8a e0       	ldi	r24, 0x0A	; 10
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	80 83       	st	Z, r24
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	a2 83       	std	Z+2, r26	; 0x02
    26d0:	b3 83       	std	Z+3, r27	; 0x03
		t_conf.bit_rate = 400000;
    26d2:	fe 01       	movw	r30, r28
    26d4:	e3 54       	subi	r30, 0x43	; 67
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	9a e1       	ldi	r25, 0x1A	; 26
    26dc:	a6 e0       	ldi	r26, 0x06	; 6
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	84 83       	std	Z+4, r24	; 0x04
    26e2:	95 83       	std	Z+5, r25	; 0x05
    26e4:	a6 83       	std	Z+6, r26	; 0x06
    26e6:	b7 83       	std	Z+7, r27	; 0x07

		Timer1_ConfigType time_conf;
		time_conf.initial_value = 0;
    26e8:	fe 01       	movw	r30, r28
    26ea:	eb 53       	subi	r30, 0x3B	; 59
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	11 82       	std	Z+1, r1	; 0x01
    26f0:	10 82       	st	Z, r1
		time_conf.mode = COMPARE;
    26f2:	fe 01       	movw	r30, r28
    26f4:	eb 53       	subi	r30, 0x3B	; 59
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	85 83       	std	Z+5, r24	; 0x05
		time_conf.prescaler = ONE_ZERO_TWO_FOUR;
    26fc:	fe 01       	movw	r30, r28
    26fe:	eb 53       	subi	r30, 0x3B	; 59
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	85 e0       	ldi	r24, 0x05	; 5
    2704:	84 83       	std	Z+4, r24	; 0x04
		//compare each 3 seconds
		time_conf.compare_value = 23437;
    2706:	fe 01       	movw	r30, r28
    2708:	eb 53       	subi	r30, 0x3B	; 59
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	8d e8       	ldi	r24, 0x8D	; 141
    270e:	9b e5       	ldi	r25, 0x5B	; 91
    2710:	93 83       	std	Z+3, r25	; 0x03
    2712:	82 83       	std	Z+2, r24	; 0x02



		UART_init(&conf);
    2714:	ce 01       	movw	r24, r28
    2716:	8a 54       	subi	r24, 0x4A	; 74
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	0e 94 50 06 	call	0xca0	; 0xca0 <UART_init>
		Buzzer_init();
    271e:	0e 94 b9 12 	call	0x2572	; 0x2572 <Buzzer_init>
		DcMotor_Init();
    2722:	0e 94 2f 12 	call	0x245e	; 0x245e <DcMotor_Init>
		TWI_init(&t_conf);
    2726:	ce 01       	movw	r24, r28
    2728:	83 54       	subi	r24, 0x43	; 67
    272a:	9f 4f       	sbci	r25, 0xFF	; 255
    272c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <TWI_init>



    while(1)
    {
    	StayInPlusMinus = yes;
    2730:	fe 01       	movw	r30, r28
    2732:	ef 55       	subi	r30, 0x5F	; 95
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	10 82       	st	Z, r1
    	Buzzer_off();
    2738:	0e 94 d6 12 	call	0x25ac	; 0x25ac <Buzzer_off>
    	match = MATCH;
    273c:	fe 01       	movw	r30, r28
    273e:	ee 55       	subi	r30, 0x5E	; 94
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	10 82       	st	Z, r1

    	for(int i = 0; i < 5; i++){
    2744:	fe 01       	movw	r30, r28
    2746:	e1 56       	subi	r30, 0x61	; 97
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	11 82       	std	Z+1, r1	; 0x01
    274c:	10 82       	st	Z, r1
    274e:	22 c0       	rjmp	.+68     	; 0x2794 <main+0x14a>
    		key = UART_recieveByte();
    2750:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
    2754:	fe 01       	movw	r30, r28
    2756:	eb 55       	subi	r30, 0x5B	; 91
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 83       	st	Z, r24
    		key_one[i] = key;
    275c:	fe 01       	movw	r30, r28
    275e:	e1 56       	subi	r30, 0x61	; 97
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	20 81       	ld	r18, Z
    2764:	31 81       	ldd	r19, Z+1	; 0x01
    2766:	ce 01       	movw	r24, r28
    2768:	89 55       	subi	r24, 0x59	; 89
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	dc 01       	movw	r26, r24
    276e:	a2 0f       	add	r26, r18
    2770:	b3 1f       	adc	r27, r19
    2772:	fe 01       	movw	r30, r28
    2774:	eb 55       	subi	r30, 0x5B	; 91
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	8c 93       	st	X, r24
    {
    	StayInPlusMinus = yes;
    	Buzzer_off();
    	match = MATCH;

    	for(int i = 0; i < 5; i++){
    277c:	de 01       	movw	r26, r28
    277e:	a1 56       	subi	r26, 0x61	; 97
    2780:	bf 4f       	sbci	r27, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	e1 56       	subi	r30, 0x61	; 97
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	11 96       	adiw	r26, 0x01	; 1
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
    2794:	fe 01       	movw	r30, r28
    2796:	e1 56       	subi	r30, 0x61	; 97
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	85 30       	cpi	r24, 0x05	; 5
    27a0:	91 05       	cpc	r25, r1
    27a2:	b4 f2       	brlt	.-84     	; 0x2750 <main+0x106>
    		key = UART_recieveByte();
    		key_one[i] = key;


    	}
    	for(int i = 0; i < 5; i++){
    27a4:	fe 01       	movw	r30, r28
    27a6:	e3 56       	subi	r30, 0x63	; 99
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	11 82       	std	Z+1, r1	; 0x01
    27ac:	10 82       	st	Z, r1
    27ae:	22 c0       	rjmp	.+68     	; 0x27f4 <main+0x1aa>
			key = UART_recieveByte();
    27b0:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
    27b4:	fe 01       	movw	r30, r28
    27b6:	eb 55       	subi	r30, 0x5B	; 91
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 83       	st	Z, r24
			key_two[i] = key;
    27bc:	fe 01       	movw	r30, r28
    27be:	e3 56       	subi	r30, 0x63	; 99
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	20 81       	ld	r18, Z
    27c4:	31 81       	ldd	r19, Z+1	; 0x01
    27c6:	ce 01       	movw	r24, r28
    27c8:	84 55       	subi	r24, 0x54	; 84
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	dc 01       	movw	r26, r24
    27ce:	a2 0f       	add	r26, r18
    27d0:	b3 1f       	adc	r27, r19
    27d2:	fe 01       	movw	r30, r28
    27d4:	eb 55       	subi	r30, 0x5B	; 91
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	8c 93       	st	X, r24
    		key = UART_recieveByte();
    		key_one[i] = key;


    	}
    	for(int i = 0; i < 5; i++){
    27dc:	de 01       	movw	r26, r28
    27de:	a3 56       	subi	r26, 0x63	; 99
    27e0:	bf 4f       	sbci	r27, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 56       	subi	r30, 0x63	; 99
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	9c 93       	st	X, r25
    27f2:	8e 93       	st	-X, r24
    27f4:	fe 01       	movw	r30, r28
    27f6:	e3 56       	subi	r30, 0x63	; 99
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	85 30       	cpi	r24, 0x05	; 5
    2800:	91 05       	cpc	r25, r1
    2802:	b4 f2       	brlt	.-84     	; 0x27b0 <main+0x166>
			key = UART_recieveByte();
			key_two[i] = key;

		}
    	for(int i = 0; i < 5; i++){
    2804:	fe 01       	movw	r30, r28
    2806:	e5 56       	subi	r30, 0x65	; 101
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	11 82       	std	Z+1, r1	; 0x01
    280c:	10 82       	st	Z, r1
    280e:	2b c0       	rjmp	.+86     	; 0x2866 <main+0x21c>
			if(key_one[i] != key_two[i]){
    2810:	fe 01       	movw	r30, r28
    2812:	e5 56       	subi	r30, 0x65	; 101
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	20 81       	ld	r18, Z
    2818:	31 81       	ldd	r19, Z+1	; 0x01
    281a:	ce 01       	movw	r24, r28
    281c:	89 55       	subi	r24, 0x59	; 89
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	fc 01       	movw	r30, r24
    2822:	e2 0f       	add	r30, r18
    2824:	f3 1f       	adc	r31, r19
    2826:	40 81       	ld	r20, Z
    2828:	fe 01       	movw	r30, r28
    282a:	e5 56       	subi	r30, 0x65	; 101
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	20 81       	ld	r18, Z
    2830:	31 81       	ldd	r19, Z+1	; 0x01
    2832:	ce 01       	movw	r24, r28
    2834:	84 55       	subi	r24, 0x54	; 84
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	fc 01       	movw	r30, r24
    283a:	e2 0f       	add	r30, r18
    283c:	f3 1f       	adc	r31, r19
    283e:	80 81       	ld	r24, Z
    2840:	48 17       	cp	r20, r24
    2842:	29 f0       	breq	.+10     	; 0x284e <main+0x204>
				match = NOT_MATCH;
    2844:	fe 01       	movw	r30, r28
    2846:	ee 55       	subi	r30, 0x5E	; 94
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 83       	st	Z, r24
    	for(int i = 0; i < 5; i++){
			key = UART_recieveByte();
			key_two[i] = key;

		}
    	for(int i = 0; i < 5; i++){
    284e:	de 01       	movw	r26, r28
    2850:	a5 56       	subi	r26, 0x65	; 101
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e5 56       	subi	r30, 0x65	; 101
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	11 96       	adiw	r26, 0x01	; 1
    2862:	9c 93       	st	X, r25
    2864:	8e 93       	st	-X, r24
    2866:	fe 01       	movw	r30, r28
    2868:	e5 56       	subi	r30, 0x65	; 101
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	85 30       	cpi	r24, 0x05	; 5
    2872:	91 05       	cpc	r25, r1
    2874:	6c f2       	brlt	.-102    	; 0x2810 <main+0x1c6>
			if(key_one[i] != key_two[i]){
				match = NOT_MATCH;
			}
		}
    	if(match == NOT_MATCH){
    2876:	fe 01       	movw	r30, r28
    2878:	ee 55       	subi	r30, 0x5E	; 94
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	09 f0       	breq	.+2      	; 0x2884 <main+0x23a>
    2882:	b8 c0       	rjmp	.+368    	; 0x29f4 <main+0x3aa>
			UART_sendByte(NOT_MATCH);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    288a:	fe 01       	movw	r30, r28
    288c:	e7 57       	subi	r30, 0x77	; 119
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	ac e8       	ldi	r26, 0x8C	; 140
    2896:	b2 e4       	ldi	r27, 0x42	; 66
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	8e 01       	movw	r16, r28
    28a2:	0b 57       	subi	r16, 0x7B	; 123
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	e7 57       	subi	r30, 0x77	; 119
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ce:	fe 01       	movw	r30, r28
    28d0:	eb 57       	subi	r30, 0x7B	; 123
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	44 f4       	brge	.+16     	; 0x28fc <main+0x2b2>
		__ticks = 1;
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 57       	subi	r30, 0x7D	; 125
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	64 c0       	rjmp	.+200    	; 0x29c4 <main+0x37a>
	else if (__tmp > 65535)
    28fc:	fe 01       	movw	r30, r28
    28fe:	eb 57       	subi	r30, 0x7B	; 123
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	0c f0       	brlt	.+2      	; 0x291c <main+0x2d2>
    291a:	43 c0       	rjmp	.+134    	; 0x29a2 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	fe 01       	movw	r30, r28
    291e:	e7 57       	subi	r30, 0x77	; 119
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e2       	ldi	r20, 0x20	; 32
    2930:	51 e4       	ldi	r21, 0x41	; 65
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	8e 01       	movw	r16, r28
    293c:	0d 57       	subi	r16, 0x7D	; 125
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	1f c0       	rjmp	.+62     	; 0x2992 <main+0x348>
    2954:	fe 01       	movw	r30, r28
    2956:	ef 57       	subi	r30, 0x7F	; 127
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
    2962:	fe 01       	movw	r30, r28
    2964:	ef 57       	subi	r30, 0x7F	; 127
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <main+0x322>
    2970:	fe 01       	movw	r30, r28
    2972:	ef 57       	subi	r30, 0x7F	; 127
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	de 01       	movw	r26, r28
    297c:	ad 57       	subi	r26, 0x7D	; 125
    297e:	bf 4f       	sbci	r27, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	ed 57       	subi	r30, 0x7D	; 125
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	11 96       	adiw	r26, 0x01	; 1
    298e:	9c 93       	st	X, r25
    2990:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	fe 01       	movw	r30, r28
    2994:	ed 57       	subi	r30, 0x7D	; 125
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	d1 f6       	brne	.-76     	; 0x2954 <main+0x30a>
    29a0:	c7 ce       	rjmp	.-626    	; 0x2730 <main+0xe6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	8e 01       	movw	r16, r28
    29a4:	0d 57       	subi	r16, 0x7D	; 125
    29a6:	1f 4f       	sbci	r17, 0xFF	; 255
    29a8:	fe 01       	movw	r30, r28
    29aa:	eb 57       	subi	r30, 0x7B	; 123
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	f8 01       	movw	r30, r16
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    29c4:	de 01       	movw	r26, r28
    29c6:	a1 58       	subi	r26, 0x81	; 129
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	ed 57       	subi	r30, 0x7D	; 125
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
    29da:	fe 01       	movw	r30, r28
    29dc:	e1 58       	subi	r30, 0x81	; 129
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <main+0x39a>
    29e8:	fe 01       	movw	r30, r28
    29ea:	e1 58       	subi	r30, 0x81	; 129
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	9e ce       	rjmp	.-708    	; 0x2730 <main+0xe6>
			_delay_ms(70);
			continue;
    	}else{

    		for(int i = 0; i < 5; i++){
    29f4:	fe 01       	movw	r30, r28
    29f6:	e7 56       	subi	r30, 0x67	; 103
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	11 82       	std	Z+1, r1	; 0x01
    29fc:	10 82       	st	Z, r1
    29fe:	d7 c0       	rjmp	.+430    	; 0x2bae <main+0x564>
    			EEPROM_writeByte(0x0311+i, key_one[i]);
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 56       	subi	r30, 0x67	; 103
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	8f 5e       	subi	r24, 0xEF	; 239
    2a0c:	9c 4f       	sbci	r25, 0xFC	; 252
    2a0e:	ac 01       	movw	r20, r24
    2a10:	fe 01       	movw	r30, r28
    2a12:	e7 56       	subi	r30, 0x67	; 103
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	20 81       	ld	r18, Z
    2a18:	31 81       	ldd	r19, Z+1	; 0x01
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	89 55       	subi	r24, 0x59	; 89
    2a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	20 81       	ld	r18, Z
    2a28:	ca 01       	movw	r24, r20
    2a2a:	62 2f       	mov	r22, r18
    2a2c:	0e 94 8e 11 	call	0x231c	; 0x231c <EEPROM_writeByte>
    2a30:	fe 01       	movw	r30, r28
    2a32:	e5 58       	subi	r30, 0x85	; 133
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	ac e8       	ldi	r26, 0x8C	; 140
    2a3c:	b2 e4       	ldi	r27, 0x42	; 66
    2a3e:	80 83       	st	Z, r24
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	a2 83       	std	Z+2, r26	; 0x02
    2a44:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	8e 01       	movw	r16, r28
    2a48:	09 58       	subi	r16, 0x89	; 137
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e5 58       	subi	r30, 0x85	; 133
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	80 83       	st	Z, r24
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	a2 83       	std	Z+2, r26	; 0x02
    2a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a74:	fe 01       	movw	r30, r28
    2a76:	e9 58       	subi	r30, 0x89	; 137
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	44 f4       	brge	.+16     	; 0x2aa2 <main+0x458>
		__ticks = 1;
    2a92:	fe 01       	movw	r30, r28
    2a94:	eb 58       	subi	r30, 0x8B	; 139
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
    2aa0:	64 c0       	rjmp	.+200    	; 0x2b6a <main+0x520>
	else if (__tmp > 65535)
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e9 58       	subi	r30, 0x89	; 137
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	0c f0       	brlt	.+2      	; 0x2ac2 <main+0x478>
    2ac0:	43 c0       	rjmp	.+134    	; 0x2b48 <main+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e5 58       	subi	r30, 0x85	; 133
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	8e 01       	movw	r16, r28
    2ae2:	0b 58       	subi	r16, 0x8B	; 139
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	f8 01       	movw	r30, r16
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	1f c0       	rjmp	.+62     	; 0x2b38 <main+0x4ee>
    2afa:	fe 01       	movw	r30, r28
    2afc:	ed 58       	subi	r30, 0x8D	; 141
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 58       	subi	r30, 0x8D	; 141
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <main+0x4c8>
    2b16:	fe 01       	movw	r30, r28
    2b18:	ed 58       	subi	r30, 0x8D	; 141
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	de 01       	movw	r26, r28
    2b22:	ab 58       	subi	r26, 0x8B	; 139
    2b24:	bf 4f       	sbci	r27, 0xFF	; 255
    2b26:	fe 01       	movw	r30, r28
    2b28:	eb 58       	subi	r30, 0x8B	; 139
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	11 96       	adiw	r26, 0x01	; 1
    2b34:	9c 93       	st	X, r25
    2b36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	eb 58       	subi	r30, 0x8B	; 139
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	d1 f6       	brne	.-76     	; 0x2afa <main+0x4b0>
    2b46:	27 c0       	rjmp	.+78     	; 0x2b96 <main+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	8e 01       	movw	r16, r28
    2b4a:	0b 58       	subi	r16, 0x8B	; 139
    2b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 58       	subi	r30, 0x89	; 137
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	f8 01       	movw	r30, r16
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
    2b6a:	de 01       	movw	r26, r28
    2b6c:	af 58       	subi	r26, 0x8F	; 143
    2b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b70:	fe 01       	movw	r30, r28
    2b72:	eb 58       	subi	r30, 0x8B	; 139
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	8d 93       	st	X+, r24
    2b7c:	9c 93       	st	X, r25
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 58       	subi	r30, 0x8F	; 143
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x53e>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ef 58       	subi	r30, 0x8F	; 143
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
			UART_sendByte(NOT_MATCH);
			_delay_ms(70);
			continue;
    	}else{

    		for(int i = 0; i < 5; i++){
    2b96:	de 01       	movw	r26, r28
    2b98:	a7 56       	subi	r26, 0x67	; 103
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 56       	subi	r30, 0x67	; 103
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	11 96       	adiw	r26, 0x01	; 1
    2baa:	9c 93       	st	X, r25
    2bac:	8e 93       	st	-X, r24
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e7 56       	subi	r30, 0x67	; 103
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	85 30       	cpi	r24, 0x05	; 5
    2bba:	91 05       	cpc	r25, r1
    2bbc:	0c f4       	brge	.+2      	; 0x2bc0 <main+0x576>
    2bbe:	20 cf       	rjmp	.-448    	; 0x2a00 <main+0x3b6>
    			EEPROM_writeByte(0x0311+i, key_one[i]);
    			_delay_ms(70);
    		}
    		UART_sendByte(MATCH);
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    2bc6:	35 c6       	rjmp	.+3178   	; 0x3832 <main+0x11e8>
    	}

    	/*-------------------------------------------------------------------------------------------------------------------------*/
    	while(StayInPlusMinus == yes){
    		StayInPlusMinus = no;
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ef 55       	subi	r30, 0x5F	; 95
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	80 83       	st	Z, r24
    	PlusOrMinus = UART_recieveByte();
    2bd2:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ec 55       	subi	r30, 0x5C	; 92
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 83       	st	Z, r24
    	if(PlusOrMinus == '+'){
    2bde:	fe 01       	movw	r30, r28
    2be0:	ec 55       	subi	r30, 0x5C	; 92
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	8b 32       	cpi	r24, 0x2B	; 43
    2be8:	09 f0       	breq	.+2      	; 0x2bec <main+0x5a2>
    2bea:	7f c3       	rjmp	.+1790   	; 0x32ea <main+0xca0>
    		cou = 0;
    2bec:	fe 01       	movw	r30, r28
    2bee:	ed 55       	subi	r30, 0x5D	; 93
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	10 82       	st	Z, r1
//    		Buzzer_on();
			//recieving the password
    		match = NOT_MATCH;
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ee 55       	subi	r30, 0x5E	; 94
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	80 83       	st	Z, r24
    2bfe:	e9 c1       	rjmp	.+978    	; 0x2fd2 <main+0x988>
    		while(match == NOT_MATCH && cou < 3){
				for(int i = 0; i < 5; i++){
    2c00:	fe 01       	movw	r30, r28
    2c02:	e9 56       	subi	r30, 0x69	; 105
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	11 82       	std	Z+1, r1	; 0x01
    2c08:	10 82       	st	Z, r1
    2c0a:	22 c0       	rjmp	.+68     	; 0x2c50 <main+0x606>
					key = UART_recieveByte();
    2c0c:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
    2c10:	fe 01       	movw	r30, r28
    2c12:	eb 55       	subi	r30, 0x5B	; 91
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 83       	st	Z, r24
					key_check[i] = key;
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e9 56       	subi	r30, 0x69	; 105
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	20 81       	ld	r18, Z
    2c20:	31 81       	ldd	r19, Z+1	; 0x01
    2c22:	ce 01       	movw	r24, r28
    2c24:	8f 54       	subi	r24, 0x4F	; 79
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	dc 01       	movw	r26, r24
    2c2a:	a2 0f       	add	r26, r18
    2c2c:	b3 1f       	adc	r27, r19
    2c2e:	fe 01       	movw	r30, r28
    2c30:	eb 55       	subi	r30, 0x5B	; 91
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	8c 93       	st	X, r24
    		cou = 0;
//    		Buzzer_on();
			//recieving the password
    		match = NOT_MATCH;
    		while(match == NOT_MATCH && cou < 3){
				for(int i = 0; i < 5; i++){
    2c38:	de 01       	movw	r26, r28
    2c3a:	a9 56       	subi	r26, 0x69	; 105
    2c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e9 56       	subi	r30, 0x69	; 105
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	11 96       	adiw	r26, 0x01	; 1
    2c4c:	9c 93       	st	X, r25
    2c4e:	8e 93       	st	-X, r24
    2c50:	fe 01       	movw	r30, r28
    2c52:	e9 56       	subi	r30, 0x69	; 105
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	85 30       	cpi	r24, 0x05	; 5
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	b4 f2       	brlt	.-84     	; 0x2c0c <main+0x5c2>
					key = UART_recieveByte();
					key_check[i] = key;
				}
				//check for if the pass is true
				for(int i = 0; i < 5; i++){
    2c60:	fe 01       	movw	r30, r28
    2c62:	eb 56       	subi	r30, 0x6B	; 107
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	11 82       	std	Z+1, r1	; 0x01
    2c68:	10 82       	st	Z, r1
    2c6a:	a1 c1       	rjmp	.+834    	; 0x2fae <main+0x964>
					match = MATCH;
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ee 55       	subi	r30, 0x5E	; 94
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	10 82       	st	Z, r1
					EEPROM_readByte(0x0311+i, &val );
    2c74:	fe 01       	movw	r30, r28
    2c76:	eb 56       	subi	r30, 0x6B	; 107
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	8f 5e       	subi	r24, 0xEF	; 239
    2c80:	9c 4f       	sbci	r25, 0xFC	; 252
    2c82:	9e 01       	movw	r18, r28
    2c84:	2a 55       	subi	r18, 0x5A	; 90
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	b9 01       	movw	r22, r18
    2c8a:	0e 94 cf 11 	call	0x239e	; 0x239e <EEPROM_readByte>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e3 59       	subi	r30, 0x93	; 147
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	ac e8       	ldi	r26, 0x8C	; 140
    2c9a:	b2 e4       	ldi	r27, 0x42	; 66
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	07 59       	subi	r16, 0x97	; 151
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e3 59       	subi	r30, 0x93	; 147
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a ef       	ldi	r20, 0xFA	; 250
    2cbe:	54 e4       	ldi	r21, 0x44	; 68
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e7 59       	subi	r30, 0x97	; 151
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	44 f4       	brge	.+16     	; 0x2d00 <main+0x6b6>
		__ticks = 1;
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e9 59       	subi	r30, 0x99	; 153
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	64 c0       	rjmp	.+200    	; 0x2dc8 <main+0x77e>
	else if (__tmp > 65535)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e7 59       	subi	r30, 0x97	; 151
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <main+0x6d6>
    2d1e:	43 c0       	rjmp	.+134    	; 0x2da6 <main+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	fe 01       	movw	r30, r28
    2d22:	e3 59       	subi	r30, 0x93	; 147
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8e 01       	movw	r16, r28
    2d40:	09 59       	subi	r16, 0x99	; 153
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	1f c0       	rjmp	.+62     	; 0x2d96 <main+0x74c>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	eb 59       	subi	r30, 0x9B	; 155
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	fe 01       	movw	r30, r28
    2d68:	eb 59       	subi	r30, 0x9B	; 155
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <main+0x726>
    2d74:	fe 01       	movw	r30, r28
    2d76:	eb 59       	subi	r30, 0x9B	; 155
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	de 01       	movw	r26, r28
    2d80:	a9 59       	subi	r26, 0x99	; 153
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e9 59       	subi	r30, 0x99	; 153
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e9 59       	subi	r30, 0x99	; 153
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	d1 f6       	brne	.-76     	; 0x2d58 <main+0x70e>
    2da4:	28 c0       	rjmp	.+80     	; 0x2df6 <main+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	8e 01       	movw	r16, r28
    2da8:	09 59       	subi	r16, 0x99	; 153
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e7 59       	subi	r30, 0x97	; 151
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	de 01       	movw	r26, r28
    2dca:	ad 59       	subi	r26, 0x9D	; 157
    2dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 59       	subi	r30, 0x99	; 153
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	11 96       	adiw	r26, 0x01	; 1
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
    2dde:	fe 01       	movw	r30, r28
    2de0:	ed 59       	subi	r30, 0x9D	; 157
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <main+0x79e>
    2dec:	fe 01       	movw	r30, r28
    2dee:	ed 59       	subi	r30, 0x9D	; 157
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
					_delay_ms(70);
					if(key_check[i] != val){
    2df6:	fe 01       	movw	r30, r28
    2df8:	eb 56       	subi	r30, 0x6B	; 107
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	20 81       	ld	r18, Z
    2dfe:	31 81       	ldd	r19, Z+1	; 0x01
    2e00:	ce 01       	movw	r24, r28
    2e02:	8f 54       	subi	r24, 0x4F	; 79
    2e04:	9f 4f       	sbci	r25, 0xFF	; 255
    2e06:	fc 01       	movw	r30, r24
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	90 81       	ld	r25, Z
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ea 55       	subi	r30, 0x5A	; 90
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	98 17       	cp	r25, r24
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <main+0x7d2>
    2e1a:	bd c0       	rjmp	.+378    	; 0x2f96 <main+0x94c>
						UART_sendByte(NOT_MATCH);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    2e22:	fe 01       	movw	r30, r28
    2e24:	e1 5a       	subi	r30, 0xA1	; 161
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	ac e8       	ldi	r26, 0x8C	; 140
    2e2e:	b2 e4       	ldi	r27, 0x42	; 66
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	8e 01       	movw	r16, r28
    2e3a:	05 5a       	subi	r16, 0xA5	; 165
    2e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e1 5a       	subi	r30, 0xA1	; 161
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	80 83       	st	Z, r24
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	a2 83       	std	Z+2, r26	; 0x02
    2e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e66:	fe 01       	movw	r30, r28
    2e68:	e5 5a       	subi	r30, 0xA5	; 165
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	44 f4       	brge	.+16     	; 0x2e94 <main+0x84a>
		__ticks = 1;
    2e84:	fe 01       	movw	r30, r28
    2e86:	e7 5a       	subi	r30, 0xA7	; 167
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	80 83       	st	Z, r24
    2e92:	64 c0       	rjmp	.+200    	; 0x2f5c <main+0x912>
	else if (__tmp > 65535)
    2e94:	fe 01       	movw	r30, r28
    2e96:	e5 5a       	subi	r30, 0xA5	; 165
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <main+0x86a>
    2eb2:	43 c0       	rjmp	.+134    	; 0x2f3a <main+0x8f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e1 5a       	subi	r30, 0xA1	; 161
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	8e 01       	movw	r16, r28
    2ed4:	07 5a       	subi	r16, 0xA7	; 167
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	1f c0       	rjmp	.+62     	; 0x2f2a <main+0x8e0>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e9 5a       	subi	r30, 0xA9	; 169
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	88 ec       	ldi	r24, 0xC8	; 200
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	fe 01       	movw	r30, r28
    2efc:	e9 5a       	subi	r30, 0xA9	; 169
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <main+0x8ba>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 5a       	subi	r30, 0xA9	; 169
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	de 01       	movw	r26, r28
    2f14:	a7 5a       	subi	r26, 0xA7	; 167
    2f16:	bf 4f       	sbci	r27, 0xFF	; 255
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e7 5a       	subi	r30, 0xA7	; 167
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	11 96       	adiw	r26, 0x01	; 1
    2f26:	9c 93       	st	X, r25
    2f28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e7 5a       	subi	r30, 0xA7	; 167
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	d1 f6       	brne	.-76     	; 0x2eec <main+0x8a2>
    2f38:	28 c0       	rjmp	.+80     	; 0x2f8a <main+0x940>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	07 5a       	subi	r16, 0xA7	; 167
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	e5 5a       	subi	r30, 0xA5	; 165
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	f8 01       	movw	r30, r16
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
    2f5c:	de 01       	movw	r26, r28
    2f5e:	ab 5a       	subi	r26, 0xAB	; 171
    2f60:	bf 4f       	sbci	r27, 0xFF	; 255
    2f62:	fe 01       	movw	r30, r28
    2f64:	e7 5a       	subi	r30, 0xA7	; 167
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	11 96       	adiw	r26, 0x01	; 1
    2f6e:	9c 93       	st	X, r25
    2f70:	8e 93       	st	-X, r24
    2f72:	fe 01       	movw	r30, r28
    2f74:	eb 5a       	subi	r30, 0xAB	; 171
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <main+0x932>
    2f80:	fe 01       	movw	r30, r28
    2f82:	eb 5a       	subi	r30, 0xAB	; 171
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
						_delay_ms(70);
						match = NOT_MATCH;
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ee 55       	subi	r30, 0x5E	; 94
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 83       	st	Z, r24
    2f94:	15 c0       	rjmp	.+42     	; 0x2fc0 <main+0x976>
				for(int i = 0; i < 5; i++){
					key = UART_recieveByte();
					key_check[i] = key;
				}
				//check for if the pass is true
				for(int i = 0; i < 5; i++){
    2f96:	de 01       	movw	r26, r28
    2f98:	ab 56       	subi	r26, 0x6B	; 107
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	eb 56       	subi	r30, 0x6B	; 107
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	11 96       	adiw	r26, 0x01	; 1
    2faa:	9c 93       	st	X, r25
    2fac:	8e 93       	st	-X, r24
    2fae:	fe 01       	movw	r30, r28
    2fb0:	eb 56       	subi	r30, 0x6B	; 107
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	85 30       	cpi	r24, 0x05	; 5
    2fba:	91 05       	cpc	r25, r1
    2fbc:	0c f4       	brge	.+2      	; 0x2fc0 <main+0x976>
    2fbe:	56 ce       	rjmp	.-852    	; 0x2c6c <main+0x622>
						_delay_ms(70);
						match = NOT_MATCH;
						break;
					}
				}
				cou++;
    2fc0:	de 01       	movw	r26, r28
    2fc2:	ad 55       	subi	r26, 0x5D	; 93
    2fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ed 55       	subi	r30, 0x5D	; 93
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	8c 93       	st	X, r24
    	if(PlusOrMinus == '+'){
    		cou = 0;
//    		Buzzer_on();
			//recieving the password
    		match = NOT_MATCH;
    		while(match == NOT_MATCH && cou < 3){
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ee 55       	subi	r30, 0x5E	; 94
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	81 30       	cpi	r24, 0x01	; 1
    2fdc:	39 f4       	brne	.+14     	; 0x2fec <main+0x9a2>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ed 55       	subi	r30, 0x5D	; 93
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	83 30       	cpi	r24, 0x03	; 3
    2fe8:	08 f4       	brcc	.+2      	; 0x2fec <main+0x9a2>
    2fea:	0a ce       	rjmp	.-1004   	; 0x2c00 <main+0x5b6>
						break;
					}
				}
				cou++;
    		}
    		if(cou >= 3){
    2fec:	fe 01       	movw	r30, r28
    2fee:	ed 55       	subi	r30, 0x5D	; 93
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	83 30       	cpi	r24, 0x03	; 3
    2ff6:	08 f4       	brcc	.+2      	; 0x2ffa <main+0x9b0>
    2ff8:	d6 c0       	rjmp	.+428    	; 0x31a6 <main+0xb5c>

    			Buzzer_on();
    2ffa:	0e 94 ca 12 	call	0x2594	; 0x2594 <Buzzer_on>
    			for (int i = 0 ; i<10 ; i++){
    2ffe:	fe 01       	movw	r30, r28
    3000:	ed 56       	subi	r30, 0x6D	; 109
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	11 82       	std	Z+1, r1	; 0x01
    3006:	10 82       	st	Z, r1
    3008:	bf c0       	rjmp	.+382    	; 0x3188 <main+0xb3e>
    300a:	fe 01       	movw	r30, r28
    300c:	ef 5a       	subi	r30, 0xAF	; 175
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e8       	ldi	r25, 0x80	; 128
    3014:	ab eb       	ldi	r26, 0xBB	; 187
    3016:	b5 e4       	ldi	r27, 0x45	; 69
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3020:	8e 01       	movw	r16, r28
    3022:	03 5b       	subi	r16, 0xB3	; 179
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	fe 01       	movw	r30, r28
    3028:	ef 5a       	subi	r30, 0xAF	; 175
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a ef       	ldi	r20, 0xFA	; 250
    303a:	54 e4       	ldi	r21, 0x44	; 68
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	f8 01       	movw	r30, r16
    3046:	80 83       	st	Z, r24
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	a2 83       	std	Z+2, r26	; 0x02
    304c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    304e:	fe 01       	movw	r30, r28
    3050:	e3 5b       	subi	r30, 0xB3	; 179
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e8       	ldi	r20, 0x80	; 128
    3062:	5f e3       	ldi	r21, 0x3F	; 63
    3064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3068:	88 23       	and	r24, r24
    306a:	44 f4       	brge	.+16     	; 0x307c <main+0xa32>
		__ticks = 1;
    306c:	fe 01       	movw	r30, r28
    306e:	e5 5b       	subi	r30, 0xB5	; 181
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
    307a:	64 c0       	rjmp	.+200    	; 0x3144 <main+0xafa>
	else if (__tmp > 65535)
    307c:	fe 01       	movw	r30, r28
    307e:	e3 5b       	subi	r30, 0xB3	; 179
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	3f ef       	ldi	r19, 0xFF	; 255
    308e:	4f e7       	ldi	r20, 0x7F	; 127
    3090:	57 e4       	ldi	r21, 0x47	; 71
    3092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3096:	18 16       	cp	r1, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <main+0xa52>
    309a:	43 c0       	rjmp	.+134    	; 0x3122 <main+0xad8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309c:	fe 01       	movw	r30, r28
    309e:	ef 5a       	subi	r30, 0xAF	; 175
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	8e 01       	movw	r16, r28
    30bc:	05 5b       	subi	r16, 0xB5	; 181
    30be:	1f 4f       	sbci	r17, 0xFF	; 255
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	f8 01       	movw	r30, r16
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	80 83       	st	Z, r24
    30d2:	1f c0       	rjmp	.+62     	; 0x3112 <main+0xac8>
    30d4:	fe 01       	movw	r30, r28
    30d6:	e7 5b       	subi	r30, 0xB7	; 183
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	88 ec       	ldi	r24, 0xC8	; 200
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	fe 01       	movw	r30, r28
    30e4:	e7 5b       	subi	r30, 0xB7	; 183
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <main+0xaa2>
    30f0:	fe 01       	movw	r30, r28
    30f2:	e7 5b       	subi	r30, 0xB7	; 183
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fa:	de 01       	movw	r26, r28
    30fc:	a5 5b       	subi	r26, 0xB5	; 181
    30fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3100:	fe 01       	movw	r30, r28
    3102:	e5 5b       	subi	r30, 0xB5	; 181
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	11 96       	adiw	r26, 0x01	; 1
    310e:	9c 93       	st	X, r25
    3110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	fe 01       	movw	r30, r28
    3114:	e5 5b       	subi	r30, 0xB5	; 181
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	d1 f6       	brne	.-76     	; 0x30d4 <main+0xa8a>
    3120:	27 c0       	rjmp	.+78     	; 0x3170 <main+0xb26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	8e 01       	movw	r16, r28
    3124:	05 5b       	subi	r16, 0xB5	; 181
    3126:	1f 4f       	sbci	r17, 0xFF	; 255
    3128:	fe 01       	movw	r30, r28
    312a:	e3 5b       	subi	r30, 0xB3	; 179
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	f8 01       	movw	r30, r16
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
    3144:	de 01       	movw	r26, r28
    3146:	a9 5b       	subi	r26, 0xB9	; 185
    3148:	bf 4f       	sbci	r27, 0xFF	; 255
    314a:	fe 01       	movw	r30, r28
    314c:	e5 5b       	subi	r30, 0xB5	; 181
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 81       	ld	r24, Z
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	8d 93       	st	X+, r24
    3156:	9c 93       	st	X, r25
    3158:	fe 01       	movw	r30, r28
    315a:	e9 5b       	subi	r30, 0xB9	; 185
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <main+0xb18>
    3166:	fe 01       	movw	r30, r28
    3168:	e9 5b       	subi	r30, 0xB9	; 185
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
    3170:	de 01       	movw	r26, r28
    3172:	ad 56       	subi	r26, 0x6D	; 109
    3174:	bf 4f       	sbci	r27, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	ed 56       	subi	r30, 0x6D	; 109
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	9c 93       	st	X, r25
    3186:	8e 93       	st	-X, r24
    3188:	fe 01       	movw	r30, r28
    318a:	ed 56       	subi	r30, 0x6D	; 109
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	8a 30       	cpi	r24, 0x0A	; 10
    3194:	91 05       	cpc	r25, r1
    3196:	0c f4       	brge	.+2      	; 0x319a <main+0xb50>
    3198:	38 cf       	rjmp	.-400    	; 0x300a <main+0x9c0>
				_delay_ms(6000);
				}
				Buzzer_off();
    319a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <Buzzer_off>
    			StayInPlusMinus = yes;
    319e:	fe 01       	movw	r30, r28
    31a0:	ef 55       	subi	r30, 0x5F	; 95
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	10 82       	st	Z, r1


    		}
			if(match == MATCH){
    31a6:	fe 01       	movw	r30, r28
    31a8:	ee 55       	subi	r30, 0x5E	; 94
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	88 23       	and	r24, r24
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <main+0xb6a>
    31b2:	3f c3       	rjmp	.+1662   	; 0x3832 <main+0x11e8>
			UART_sendByte(MATCH);
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    31ba:	fe 01       	movw	r30, r28
    31bc:	ed 5b       	subi	r30, 0xBD	; 189
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	a8 e4       	ldi	r26, 0x48	; 72
    31c6:	b3 e4       	ldi	r27, 0x43	; 67
    31c8:	80 83       	st	Z, r24
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	a2 83       	std	Z+2, r26	; 0x02
    31ce:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d0:	8e 01       	movw	r16, r28
    31d2:	01 5c       	subi	r16, 0xC1	; 193
    31d4:	1f 4f       	sbci	r17, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	ed 5b       	subi	r30, 0xBD	; 189
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a ef       	ldi	r20, 0xFA	; 250
    31ea:	54 e4       	ldi	r21, 0x44	; 68
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	f8 01       	movw	r30, r16
    31f6:	80 83       	st	Z, r24
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	a2 83       	std	Z+2, r26	; 0x02
    31fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	2c f4       	brge	.+10     	; 0x3224 <main+0xbda>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9e af       	std	Y+62, r25	; 0x3e
    3220:	8d af       	std	Y+61, r24	; 0x3d
    3222:	46 c0       	rjmp	.+140    	; 0x32b0 <main+0xc66>
	else if (__tmp > 65535)
    3224:	fe 01       	movw	r30, r28
    3226:	ff 96       	adiw	r30, 0x3f	; 63
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	64 f5       	brge	.+88     	; 0x3298 <main+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3240:	fe 01       	movw	r30, r28
    3242:	ed 5b       	subi	r30, 0xBD	; 189
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	60 81       	ld	r22, Z
    3248:	71 81       	ldd	r23, Z+1	; 0x01
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e2       	ldi	r20, 0x20	; 32
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9e af       	std	Y+62, r25	; 0x3e
    326c:	8d af       	std	Y+61, r24	; 0x3d
    326e:	0f c0       	rjmp	.+30     	; 0x328e <main+0xc44>
    3270:	88 ec       	ldi	r24, 0xC8	; 200
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9c af       	std	Y+60, r25	; 0x3c
    3276:	8b af       	std	Y+59, r24	; 0x3b
    3278:	8b ad       	ldd	r24, Y+59	; 0x3b
    327a:	9c ad       	ldd	r25, Y+60	; 0x3c
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <main+0xc32>
    3280:	9c af       	std	Y+60, r25	; 0x3c
    3282:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	8d ad       	ldd	r24, Y+61	; 0x3d
    3286:	9e ad       	ldd	r25, Y+62	; 0x3e
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	9e af       	std	Y+62, r25	; 0x3e
    328c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3290:	9e ad       	ldd	r25, Y+62	; 0x3e
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f7       	brne	.-38     	; 0x3270 <main+0xc26>
    3296:	16 c0       	rjmp	.+44     	; 0x32c4 <main+0xc7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	fe 01       	movw	r30, r28
    329a:	ff 96       	adiw	r30, 0x3f	; 63
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9e af       	std	Y+62, r25	; 0x3e
    32ae:	8d af       	std	Y+61, r24	; 0x3d
    32b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    32b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    32b4:	9a af       	std	Y+58, r25	; 0x3a
    32b6:	89 af       	std	Y+57, r24	; 0x39
    32b8:	89 ad       	ldd	r24, Y+57	; 0x39
    32ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <main+0xc72>
    32c0:	9a af       	std	Y+58, r25	; 0x3a
    32c2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			DcMotor_Rotate(CW,100);
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	64 e6       	ldi	r22, 0x64	; 100
    32c8:	0e 94 4a 12 	call	0x2494	; 0x2494 <DcMotor_Rotate>
			Timer1_setCallBack(door_handle);
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	92 e1       	ldi	r25, 0x12	; 18
    32d0:	0e 94 13 09 	call	0x1226	; 0x1226 <Timer1_setCallBack>
			Timer1_init(&time_conf);
    32d4:	ce 01       	movw	r24, r28
    32d6:	8b 53       	subi	r24, 0x3B	; 59
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	0e 94 b5 08 	call	0x116a	; 0x116a <Timer1_init>
			StayInPlusMinus = no;
    32de:	fe 01       	movw	r30, r28
    32e0:	ef 55       	subi	r30, 0x5F	; 95
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	80 83       	st	Z, r24
    32e8:	a4 c2       	rjmp	.+1352   	; 0x3832 <main+0x11e8>

			}
    	}
    	else if(PlusOrMinus == '-'){
    32ea:	fe 01       	movw	r30, r28
    32ec:	ec 55       	subi	r30, 0x5C	; 92
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	8d 32       	cpi	r24, 0x2D	; 45
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <main+0xcae>
    32f6:	9d c2       	rjmp	.+1338   	; 0x3832 <main+0x11e8>
    		cou = 0;
    32f8:	fe 01       	movw	r30, r28
    32fa:	ed 55       	subi	r30, 0x5D	; 93
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	10 82       	st	Z, r1
    		//recieving the password
    		match = NOT_MATCH;
    3300:	fe 01       	movw	r30, r28
    3302:	ee 55       	subi	r30, 0x5E	; 94
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	80 83       	st	Z, r24
    330a:	65 c1       	rjmp	.+714    	; 0x35d6 <main+0xf8c>
    		while(match == NOT_MATCH && cou < 3){
					for(int i = 0; i < 5; i++){
    330c:	fe 01       	movw	r30, r28
    330e:	ef 56       	subi	r30, 0x6F	; 111
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	11 82       	std	Z+1, r1	; 0x01
    3314:	10 82       	st	Z, r1
    3316:	22 c0       	rjmp	.+68     	; 0x335c <main+0xd12>
						key = UART_recieveByte();
    3318:	0e 94 2c 07 	call	0xe58	; 0xe58 <UART_recieveByte>
    331c:	fe 01       	movw	r30, r28
    331e:	eb 55       	subi	r30, 0x5B	; 91
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 83       	st	Z, r24
						key_check[i] = key;
    3324:	fe 01       	movw	r30, r28
    3326:	ef 56       	subi	r30, 0x6F	; 111
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	20 81       	ld	r18, Z
    332c:	31 81       	ldd	r19, Z+1	; 0x01
    332e:	ce 01       	movw	r24, r28
    3330:	8f 54       	subi	r24, 0x4F	; 79
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	dc 01       	movw	r26, r24
    3336:	a2 0f       	add	r26, r18
    3338:	b3 1f       	adc	r27, r19
    333a:	fe 01       	movw	r30, r28
    333c:	eb 55       	subi	r30, 0x5B	; 91
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 81       	ld	r24, Z
    3342:	8c 93       	st	X, r24
    	else if(PlusOrMinus == '-'){
    		cou = 0;
    		//recieving the password
    		match = NOT_MATCH;
    		while(match == NOT_MATCH && cou < 3){
					for(int i = 0; i < 5; i++){
    3344:	de 01       	movw	r26, r28
    3346:	af 56       	subi	r26, 0x6F	; 111
    3348:	bf 4f       	sbci	r27, 0xFF	; 255
    334a:	fe 01       	movw	r30, r28
    334c:	ef 56       	subi	r30, 0x6F	; 111
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	01 96       	adiw	r24, 0x01	; 1
    3356:	11 96       	adiw	r26, 0x01	; 1
    3358:	9c 93       	st	X, r25
    335a:	8e 93       	st	-X, r24
    335c:	fe 01       	movw	r30, r28
    335e:	ef 56       	subi	r30, 0x6F	; 111
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	85 30       	cpi	r24, 0x05	; 5
    3368:	91 05       	cpc	r25, r1
    336a:	b4 f2       	brlt	.-84     	; 0x3318 <main+0xcce>
						key = UART_recieveByte();
						key_check[i] = key;
					}
					//check for if the pass is true
					for(int i = 0; i < 5; i++){
    336c:	fe 01       	movw	r30, r28
    336e:	e1 57       	subi	r30, 0x71	; 113
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	11 82       	std	Z+1, r1	; 0x01
    3374:	10 82       	st	Z, r1
    3376:	1d c1       	rjmp	.+570    	; 0x35b2 <main+0xf68>
						match = MATCH;
    3378:	fe 01       	movw	r30, r28
    337a:	ee 55       	subi	r30, 0x5E	; 94
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	10 82       	st	Z, r1
						EEPROM_readByte(0x0311+i, &val );
    3380:	fe 01       	movw	r30, r28
    3382:	e1 57       	subi	r30, 0x71	; 113
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	80 81       	ld	r24, Z
    3388:	91 81       	ldd	r25, Z+1	; 0x01
    338a:	8f 5e       	subi	r24, 0xEF	; 239
    338c:	9c 4f       	sbci	r25, 0xFC	; 252
    338e:	9e 01       	movw	r18, r28
    3390:	2a 55       	subi	r18, 0x5A	; 90
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	b9 01       	movw	r22, r18
    3396:	0e 94 cf 11 	call	0x239e	; 0x239e <EEPROM_readByte>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	ac e8       	ldi	r26, 0x8C	; 140
    33a0:	b2 e4       	ldi	r27, 0x42	; 66
    33a2:	8d ab       	std	Y+53, r24	; 0x35
    33a4:	9e ab       	std	Y+54, r25	; 0x36
    33a6:	af ab       	std	Y+55, r26	; 0x37
    33a8:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33aa:	6d a9       	ldd	r22, Y+53	; 0x35
    33ac:	7e a9       	ldd	r23, Y+54	; 0x36
    33ae:	8f a9       	ldd	r24, Y+55	; 0x37
    33b0:	98 ad       	ldd	r25, Y+56	; 0x38
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	4a ef       	ldi	r20, 0xFA	; 250
    33b8:	54 e4       	ldi	r21, 0x44	; 68
    33ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	89 ab       	std	Y+49, r24	; 0x31
    33c4:	9a ab       	std	Y+50, r25	; 0x32
    33c6:	ab ab       	std	Y+51, r26	; 0x33
    33c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33ca:	69 a9       	ldd	r22, Y+49	; 0x31
    33cc:	7a a9       	ldd	r23, Y+50	; 0x32
    33ce:	8b a9       	ldd	r24, Y+51	; 0x33
    33d0:	9c a9       	ldd	r25, Y+52	; 0x34
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e8       	ldi	r20, 0x80	; 128
    33d8:	5f e3       	ldi	r21, 0x3F	; 63
    33da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33de:	88 23       	and	r24, r24
    33e0:	2c f4       	brge	.+10     	; 0x33ec <main+0xda2>
		__ticks = 1;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	98 ab       	std	Y+48, r25	; 0x30
    33e8:	8f a7       	std	Y+47, r24	; 0x2f
    33ea:	3f c0       	rjmp	.+126    	; 0x346a <main+0xe20>
	else if (__tmp > 65535)
    33ec:	69 a9       	ldd	r22, Y+49	; 0x31
    33ee:	7a a9       	ldd	r23, Y+50	; 0x32
    33f0:	8b a9       	ldd	r24, Y+51	; 0x33
    33f2:	9c a9       	ldd	r25, Y+52	; 0x34
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	3f ef       	ldi	r19, 0xFF	; 255
    33f8:	4f e7       	ldi	r20, 0x7F	; 127
    33fa:	57 e4       	ldi	r21, 0x47	; 71
    33fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3400:	18 16       	cp	r1, r24
    3402:	4c f5       	brge	.+82     	; 0x3456 <main+0xe0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3404:	6d a9       	ldd	r22, Y+53	; 0x35
    3406:	7e a9       	ldd	r23, Y+54	; 0x36
    3408:	8f a9       	ldd	r24, Y+55	; 0x37
    340a:	98 ad       	ldd	r25, Y+56	; 0x38
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 e2       	ldi	r20, 0x20	; 32
    3412:	51 e4       	ldi	r21, 0x41	; 65
    3414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	98 ab       	std	Y+48, r25	; 0x30
    342a:	8f a7       	std	Y+47, r24	; 0x2f
    342c:	0f c0       	rjmp	.+30     	; 0x344c <main+0xe02>
    342e:	88 ec       	ldi	r24, 0xC8	; 200
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9e a7       	std	Y+46, r25	; 0x2e
    3434:	8d a7       	std	Y+45, r24	; 0x2d
    3436:	8d a5       	ldd	r24, Y+45	; 0x2d
    3438:	9e a5       	ldd	r25, Y+46	; 0x2e
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <main+0xdf0>
    343e:	9e a7       	std	Y+46, r25	; 0x2e
    3440:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3442:	8f a5       	ldd	r24, Y+47	; 0x2f
    3444:	98 a9       	ldd	r25, Y+48	; 0x30
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	98 ab       	std	Y+48, r25	; 0x30
    344a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	8f a5       	ldd	r24, Y+47	; 0x2f
    344e:	98 a9       	ldd	r25, Y+48	; 0x30
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	69 f7       	brne	.-38     	; 0x342e <main+0xde4>
    3454:	14 c0       	rjmp	.+40     	; 0x347e <main+0xe34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3456:	69 a9       	ldd	r22, Y+49	; 0x31
    3458:	7a a9       	ldd	r23, Y+50	; 0x32
    345a:	8b a9       	ldd	r24, Y+51	; 0x33
    345c:	9c a9       	ldd	r25, Y+52	; 0x34
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	98 ab       	std	Y+48, r25	; 0x30
    3468:	8f a7       	std	Y+47, r24	; 0x2f
    346a:	8f a5       	ldd	r24, Y+47	; 0x2f
    346c:	98 a9       	ldd	r25, Y+48	; 0x30
    346e:	9c a7       	std	Y+44, r25	; 0x2c
    3470:	8b a7       	std	Y+43, r24	; 0x2b
    3472:	8b a5       	ldd	r24, Y+43	; 0x2b
    3474:	9c a5       	ldd	r25, Y+44	; 0x2c
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <main+0xe2c>
    347a:	9c a7       	std	Y+44, r25	; 0x2c
    347c:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(70);
						if(key_check[i] != val){
    347e:	fe 01       	movw	r30, r28
    3480:	e1 57       	subi	r30, 0x71	; 113
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	20 81       	ld	r18, Z
    3486:	31 81       	ldd	r19, Z+1	; 0x01
    3488:	ce 01       	movw	r24, r28
    348a:	8f 54       	subi	r24, 0x4F	; 79
    348c:	9f 4f       	sbci	r25, 0xFF	; 255
    348e:	fc 01       	movw	r30, r24
    3490:	e2 0f       	add	r30, r18
    3492:	f3 1f       	adc	r31, r19
    3494:	90 81       	ld	r25, Z
    3496:	fe 01       	movw	r30, r28
    3498:	ea 55       	subi	r30, 0x5A	; 90
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	98 17       	cp	r25, r24
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <main+0xe5a>
    34a2:	7b c0       	rjmp	.+246    	; 0x359a <main+0xf50>
							UART_sendByte(NOT_MATCH);
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a8 e4       	ldi	r26, 0x48	; 72
    34b0:	b2 e4       	ldi	r27, 0x42	; 66
    34b2:	8f a3       	std	Y+39, r24	; 0x27
    34b4:	98 a7       	std	Y+40, r25	; 0x28
    34b6:	a9 a7       	std	Y+41, r26	; 0x29
    34b8:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	6f a1       	ldd	r22, Y+39	; 0x27
    34bc:	78 a5       	ldd	r23, Y+40	; 0x28
    34be:	89 a5       	ldd	r24, Y+41	; 0x29
    34c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8b a3       	std	Y+35, r24	; 0x23
    34d4:	9c a3       	std	Y+36, r25	; 0x24
    34d6:	ad a3       	std	Y+37, r26	; 0x25
    34d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34da:	6b a1       	ldd	r22, Y+35	; 0x23
    34dc:	7c a1       	ldd	r23, Y+36	; 0x24
    34de:	8d a1       	ldd	r24, Y+37	; 0x25
    34e0:	9e a1       	ldd	r25, Y+38	; 0x26
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <main+0xeb2>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9a a3       	std	Y+34, r25	; 0x22
    34f8:	89 a3       	std	Y+33, r24	; 0x21
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <main+0xf30>
	else if (__tmp > 65535)
    34fc:	6b a1       	ldd	r22, Y+35	; 0x23
    34fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	9e a1       	ldd	r25, Y+38	; 0x26
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <main+0xf1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	6f a1       	ldd	r22, Y+39	; 0x27
    3516:	78 a5       	ldd	r23, Y+40	; 0x28
    3518:	89 a5       	ldd	r24, Y+41	; 0x29
    351a:	9a a5       	ldd	r25, Y+42	; 0x2a
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
    353c:	0f c0       	rjmp	.+30     	; 0x355c <main+0xf12>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	98 a3       	std	Y+32, r25	; 0x20
    3544:	8f 8f       	std	Y+31, r24	; 0x1f
    3546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3548:	98 a1       	ldd	r25, Y+32	; 0x20
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <main+0xf00>
    354e:	98 a3       	std	Y+32, r25	; 0x20
    3550:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	89 a1       	ldd	r24, Y+33	; 0x21
    3554:	9a a1       	ldd	r25, Y+34	; 0x22
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9a a3       	std	Y+34, r25	; 0x22
    355a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	89 a1       	ldd	r24, Y+33	; 0x21
    355e:	9a a1       	ldd	r25, Y+34	; 0x22
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <main+0xef4>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <main+0xf44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9a a3       	std	Y+34, r25	; 0x22
    3578:	89 a3       	std	Y+33, r24	; 0x21
    357a:	89 a1       	ldd	r24, Y+33	; 0x21
    357c:	9a a1       	ldd	r25, Y+34	; 0x22
    357e:	9e 8f       	std	Y+30, r25	; 0x1e
    3580:	8d 8f       	std	Y+29, r24	; 0x1d
    3582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <main+0xf3c>
    358a:	9e 8f       	std	Y+30, r25	; 0x1e
    358c:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(50);
							match = NOT_MATCH;
    358e:	fe 01       	movw	r30, r28
    3590:	ee 55       	subi	r30, 0x5E	; 94
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	80 83       	st	Z, r24
    3598:	15 c0       	rjmp	.+42     	; 0x35c4 <main+0xf7a>
					for(int i = 0; i < 5; i++){
						key = UART_recieveByte();
						key_check[i] = key;
					}
					//check for if the pass is true
					for(int i = 0; i < 5; i++){
    359a:	de 01       	movw	r26, r28
    359c:	a1 57       	subi	r26, 0x71	; 113
    359e:	bf 4f       	sbci	r27, 0xFF	; 255
    35a0:	fe 01       	movw	r30, r28
    35a2:	e1 57       	subi	r30, 0x71	; 113
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	11 96       	adiw	r26, 0x01	; 1
    35ae:	9c 93       	st	X, r25
    35b0:	8e 93       	st	-X, r24
    35b2:	fe 01       	movw	r30, r28
    35b4:	e1 57       	subi	r30, 0x71	; 113
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	85 30       	cpi	r24, 0x05	; 5
    35be:	91 05       	cpc	r25, r1
    35c0:	0c f4       	brge	.+2      	; 0x35c4 <main+0xf7a>
    35c2:	da ce       	rjmp	.-588    	; 0x3378 <main+0xd2e>
							_delay_ms(50);
							match = NOT_MATCH;
							break;
						}
					}
					cou++;
    35c4:	de 01       	movw	r26, r28
    35c6:	ad 55       	subi	r26, 0x5D	; 93
    35c8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ca:	fe 01       	movw	r30, r28
    35cc:	ed 55       	subi	r30, 0x5D	; 93
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 81       	ld	r24, Z
    35d2:	8f 5f       	subi	r24, 0xFF	; 255
    35d4:	8c 93       	st	X, r24
    	}
    	else if(PlusOrMinus == '-'){
    		cou = 0;
    		//recieving the password
    		match = NOT_MATCH;
    		while(match == NOT_MATCH && cou < 3){
    35d6:	fe 01       	movw	r30, r28
    35d8:	ee 55       	subi	r30, 0x5E	; 94
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	39 f4       	brne	.+14     	; 0x35f0 <main+0xfa6>
    35e2:	fe 01       	movw	r30, r28
    35e4:	ed 55       	subi	r30, 0x5D	; 93
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	83 30       	cpi	r24, 0x03	; 3
    35ec:	08 f4       	brcc	.+2      	; 0x35f0 <main+0xfa6>
    35ee:	8e ce       	rjmp	.-740    	; 0x330c <main+0xcc2>
						}
					}
					cou++;
				}

				if(cou >= 3){
    35f0:	fe 01       	movw	r30, r28
    35f2:	ed 55       	subi	r30, 0x5D	; 93
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	83 30       	cpi	r24, 0x03	; 3
    35fa:	08 f4       	brcc	.+2      	; 0x35fe <main+0xfb4>
    35fc:	99 c0       	rjmp	.+306    	; 0x3730 <main+0x10e6>
					StayInPlusMinus = yes;
    35fe:	fe 01       	movw	r30, r28
    3600:	ef 55       	subi	r30, 0x5F	; 95
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	10 82       	st	Z, r1
					Buzzer_on();
    3606:	0e 94 ca 12 	call	0x2594	; 0x2594 <Buzzer_on>
					for (int i = 0 ; i<10 ; i++){
    360a:	fe 01       	movw	r30, r28
    360c:	e3 57       	subi	r30, 0x73	; 115
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	11 82       	std	Z+1, r1	; 0x01
    3612:	10 82       	st	Z, r1
    3614:	7e c0       	rjmp	.+252    	; 0x3712 <main+0x10c8>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e8       	ldi	r25, 0x80	; 128
    361a:	ab eb       	ldi	r26, 0xBB	; 187
    361c:	b5 e4       	ldi	r27, 0x45	; 69
    361e:	89 8f       	std	Y+25, r24	; 0x19
    3620:	9a 8f       	std	Y+26, r25	; 0x1a
    3622:	ab 8f       	std	Y+27, r26	; 0x1b
    3624:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3626:	69 8d       	ldd	r22, Y+25	; 0x19
    3628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    362a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    362c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4a ef       	ldi	r20, 0xFA	; 250
    3634:	54 e4       	ldi	r21, 0x44	; 68
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	8d 8b       	std	Y+21, r24	; 0x15
    3640:	9e 8b       	std	Y+22, r25	; 0x16
    3642:	af 8b       	std	Y+23, r26	; 0x17
    3644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3646:	6d 89       	ldd	r22, Y+21	; 0x15
    3648:	7e 89       	ldd	r23, Y+22	; 0x16
    364a:	8f 89       	ldd	r24, Y+23	; 0x17
    364c:	98 8d       	ldd	r25, Y+24	; 0x18
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	2c f4       	brge	.+10     	; 0x3668 <main+0x101e>
		__ticks = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	9c 8b       	std	Y+20, r25	; 0x14
    3664:	8b 8b       	std	Y+19, r24	; 0x13
    3666:	3f c0       	rjmp	.+126    	; 0x36e6 <main+0x109c>
	else if (__tmp > 65535)
    3668:	6d 89       	ldd	r22, Y+21	; 0x15
    366a:	7e 89       	ldd	r23, Y+22	; 0x16
    366c:	8f 89       	ldd	r24, Y+23	; 0x17
    366e:	98 8d       	ldd	r25, Y+24	; 0x18
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	3f ef       	ldi	r19, 0xFF	; 255
    3674:	4f e7       	ldi	r20, 0x7F	; 127
    3676:	57 e4       	ldi	r21, 0x47	; 71
    3678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367c:	18 16       	cp	r1, r24
    367e:	4c f5       	brge	.+82     	; 0x36d2 <main+0x1088>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3680:	69 8d       	ldd	r22, Y+25	; 0x19
    3682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e2       	ldi	r20, 0x20	; 32
    368e:	51 e4       	ldi	r21, 0x41	; 65
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9c 8b       	std	Y+20, r25	; 0x14
    36a6:	8b 8b       	std	Y+19, r24	; 0x13
    36a8:	0f c0       	rjmp	.+30     	; 0x36c8 <main+0x107e>
    36aa:	88 ec       	ldi	r24, 0xC8	; 200
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	9a 8b       	std	Y+18, r25	; 0x12
    36b0:	89 8b       	std	Y+17, r24	; 0x11
    36b2:	89 89       	ldd	r24, Y+17	; 0x11
    36b4:	9a 89       	ldd	r25, Y+18	; 0x12
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <main+0x106c>
    36ba:	9a 8b       	std	Y+18, r25	; 0x12
    36bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	9c 8b       	std	Y+20, r25	; 0x14
    36c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	69 f7       	brne	.-38     	; 0x36aa <main+0x1060>
    36d0:	14 c0       	rjmp	.+40     	; 0x36fa <main+0x10b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d2:	6d 89       	ldd	r22, Y+21	; 0x15
    36d4:	7e 89       	ldd	r23, Y+22	; 0x16
    36d6:	8f 89       	ldd	r24, Y+23	; 0x17
    36d8:	98 8d       	ldd	r25, Y+24	; 0x18
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9c 8b       	std	Y+20, r25	; 0x14
    36e4:	8b 8b       	std	Y+19, r24	; 0x13
    36e6:	8b 89       	ldd	r24, Y+19	; 0x13
    36e8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ea:	98 8b       	std	Y+16, r25	; 0x10
    36ec:	8f 87       	std	Y+15, r24	; 0x0f
    36ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    36f0:	98 89       	ldd	r25, Y+16	; 0x10
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <main+0x10a8>
    36f6:	98 8b       	std	Y+16, r25	; 0x10
    36f8:	8f 87       	std	Y+15, r24	; 0x0f
    36fa:	de 01       	movw	r26, r28
    36fc:	a3 57       	subi	r26, 0x73	; 115
    36fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	e3 57       	subi	r30, 0x73	; 115
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 96       	adiw	r24, 0x01	; 1
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	9c 93       	st	X, r25
    3710:	8e 93       	st	-X, r24
    3712:	fe 01       	movw	r30, r28
    3714:	e3 57       	subi	r30, 0x73	; 115
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	8a 30       	cpi	r24, 0x0A	; 10
    371e:	91 05       	cpc	r25, r1
    3720:	0c f4       	brge	.+2      	; 0x3724 <main+0x10da>
    3722:	79 cf       	rjmp	.-270    	; 0x3616 <main+0xfcc>
					_delay_ms(6000);
					}
					Buzzer_off();
    3724:	0e 94 d6 12 	call	0x25ac	; 0x25ac <Buzzer_off>
					StayInPlusMinus = yes;
    3728:	fe 01       	movw	r30, r28
    372a:	ef 55       	subi	r30, 0x5F	; 95
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	10 82       	st	Z, r1

				}
				if(match == MATCH){
    3730:	fe 01       	movw	r30, r28
    3732:	ee 55       	subi	r30, 0x5E	; 94
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	88 23       	and	r24, r24
    373a:	09 f0       	breq	.+2      	; 0x373e <main+0x10f4>
    373c:	7a c0       	rjmp	.+244    	; 0x3832 <main+0x11e8>
				UART_sendByte(MATCH);
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_sendByte>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	a8 e4       	ldi	r26, 0x48	; 72
    374a:	b2 e4       	ldi	r27, 0x42	; 66
    374c:	8b 87       	std	Y+11, r24	; 0x0b
    374e:	9c 87       	std	Y+12, r25	; 0x0c
    3750:	ad 87       	std	Y+13, r26	; 0x0d
    3752:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	6b 85       	ldd	r22, Y+11	; 0x0b
    3756:	7c 85       	ldd	r23, Y+12	; 0x0c
    3758:	8d 85       	ldd	r24, Y+13	; 0x0d
    375a:	9e 85       	ldd	r25, Y+14	; 0x0e
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	4a ef       	ldi	r20, 0xFA	; 250
    3762:	54 e4       	ldi	r21, 0x44	; 68
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	8f 83       	std	Y+7, r24	; 0x07
    376e:	98 87       	std	Y+8, r25	; 0x08
    3770:	a9 87       	std	Y+9, r26	; 0x09
    3772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3774:	6f 81       	ldd	r22, Y+7	; 0x07
    3776:	78 85       	ldd	r23, Y+8	; 0x08
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	9a 85       	ldd	r25, Y+10	; 0x0a
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <main+0x114c>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <main+0x11ca>
	else if (__tmp > 65535)
    3796:	6f 81       	ldd	r22, Y+7	; 0x07
    3798:	78 85       	ldd	r23, Y+8	; 0x08
    379a:	89 85       	ldd	r24, Y+9	; 0x09
    379c:	9a 85       	ldd	r25, Y+10	; 0x0a
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <main+0x11b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9e 83       	std	Y+6, r25	; 0x06
    37d4:	8d 83       	std	Y+5, r24	; 0x05
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <main+0x11ac>
    37d8:	88 ec       	ldi	r24, 0xC8	; 200
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	9c 81       	ldd	r25, Y+4	; 0x04
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <main+0x119a>
    37e8:	9c 83       	std	Y+4, r25	; 0x04
    37ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	8d 81       	ldd	r24, Y+5	; 0x05
    37f8:	9e 81       	ldd	r25, Y+6	; 0x06
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <main+0x118e>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <main+0x11de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	6f 81       	ldd	r22, Y+7	; 0x07
    3802:	78 85       	ldd	r23, Y+8	; 0x08
    3804:	89 85       	ldd	r24, Y+9	; 0x09
    3806:	9a 85       	ldd	r25, Y+10	; 0x0a
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	8d 83       	std	Y+5, r24	; 0x05
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	9e 81       	ldd	r25, Y+6	; 0x06
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	89 83       	std	Y+1, r24	; 0x01
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	9a 81       	ldd	r25, Y+2	; 0x02
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <main+0x11d6>
    3824:	9a 83       	std	Y+2, r25	; 0x02
    3826:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				StayInPlusMinus = no;
    3828:	fe 01       	movw	r30, r28
    382a:	ef 55       	subi	r30, 0x5F	; 95
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
    		}
    		UART_sendByte(MATCH);
    	}

    	/*-------------------------------------------------------------------------------------------------------------------------*/
    	while(StayInPlusMinus == yes){
    3832:	fe 01       	movw	r30, r28
    3834:	ef 55       	subi	r30, 0x5F	; 95
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	88 23       	and	r24, r24
    383c:	09 f4       	brne	.+2      	; 0x3840 <main+0x11f6>
    383e:	c4 c9       	rjmp	.-3192   	; 0x2bc8 <main+0x57e>
    3840:	0c 94 98 13 	jmp	0x2730	; 0x2730 <main+0xe6>

00003844 <__udivmodsi4>:
    3844:	a1 e2       	ldi	r26, 0x21	; 33
    3846:	1a 2e       	mov	r1, r26
    3848:	aa 1b       	sub	r26, r26
    384a:	bb 1b       	sub	r27, r27
    384c:	fd 01       	movw	r30, r26
    384e:	0d c0       	rjmp	.+26     	; 0x386a <__udivmodsi4_ep>

00003850 <__udivmodsi4_loop>:
    3850:	aa 1f       	adc	r26, r26
    3852:	bb 1f       	adc	r27, r27
    3854:	ee 1f       	adc	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	a2 17       	cp	r26, r18
    385a:	b3 07       	cpc	r27, r19
    385c:	e4 07       	cpc	r30, r20
    385e:	f5 07       	cpc	r31, r21
    3860:	20 f0       	brcs	.+8      	; 0x386a <__udivmodsi4_ep>
    3862:	a2 1b       	sub	r26, r18
    3864:	b3 0b       	sbc	r27, r19
    3866:	e4 0b       	sbc	r30, r20
    3868:	f5 0b       	sbc	r31, r21

0000386a <__udivmodsi4_ep>:
    386a:	66 1f       	adc	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	88 1f       	adc	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	1a 94       	dec	r1
    3874:	69 f7       	brne	.-38     	; 0x3850 <__udivmodsi4_loop>
    3876:	60 95       	com	r22
    3878:	70 95       	com	r23
    387a:	80 95       	com	r24
    387c:	90 95       	com	r25
    387e:	9b 01       	movw	r18, r22
    3880:	ac 01       	movw	r20, r24
    3882:	bd 01       	movw	r22, r26
    3884:	cf 01       	movw	r24, r30
    3886:	08 95       	ret

00003888 <__prologue_saves__>:
    3888:	2f 92       	push	r2
    388a:	3f 92       	push	r3
    388c:	4f 92       	push	r4
    388e:	5f 92       	push	r5
    3890:	6f 92       	push	r6
    3892:	7f 92       	push	r7
    3894:	8f 92       	push	r8
    3896:	9f 92       	push	r9
    3898:	af 92       	push	r10
    389a:	bf 92       	push	r11
    389c:	cf 92       	push	r12
    389e:	df 92       	push	r13
    38a0:	ef 92       	push	r14
    38a2:	ff 92       	push	r15
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
    38b0:	ca 1b       	sub	r28, r26
    38b2:	db 0b       	sbc	r29, r27
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	09 94       	ijmp

000038c0 <__epilogue_restores__>:
    38c0:	2a 88       	ldd	r2, Y+18	; 0x12
    38c2:	39 88       	ldd	r3, Y+17	; 0x11
    38c4:	48 88       	ldd	r4, Y+16	; 0x10
    38c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    38cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    38ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d2:	b9 84       	ldd	r11, Y+9	; 0x09
    38d4:	c8 84       	ldd	r12, Y+8	; 0x08
    38d6:	df 80       	ldd	r13, Y+7	; 0x07
    38d8:	ee 80       	ldd	r14, Y+6	; 0x06
    38da:	fd 80       	ldd	r15, Y+5	; 0x05
    38dc:	0c 81       	ldd	r16, Y+4	; 0x04
    38de:	1b 81       	ldd	r17, Y+3	; 0x03
    38e0:	aa 81       	ldd	r26, Y+2	; 0x02
    38e2:	b9 81       	ldd	r27, Y+1	; 0x01
    38e4:	ce 0f       	add	r28, r30
    38e6:	d1 1d       	adc	r29, r1
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	ed 01       	movw	r28, r26
    38f4:	08 95       	ret

000038f6 <itoa>:
    38f6:	fb 01       	movw	r30, r22
    38f8:	9f 01       	movw	r18, r30
    38fa:	e8 94       	clt
    38fc:	42 30       	cpi	r20, 0x02	; 2
    38fe:	c4 f0       	brlt	.+48     	; 0x3930 <itoa+0x3a>
    3900:	45 32       	cpi	r20, 0x25	; 37
    3902:	b4 f4       	brge	.+44     	; 0x3930 <itoa+0x3a>
    3904:	4a 30       	cpi	r20, 0x0A	; 10
    3906:	29 f4       	brne	.+10     	; 0x3912 <itoa+0x1c>
    3908:	97 fb       	bst	r25, 7
    390a:	1e f4       	brtc	.+6      	; 0x3912 <itoa+0x1c>
    390c:	90 95       	com	r25
    390e:	81 95       	neg	r24
    3910:	9f 4f       	sbci	r25, 0xFF	; 255
    3912:	64 2f       	mov	r22, r20
    3914:	77 27       	eor	r23, r23
    3916:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__udivmodhi4>
    391a:	80 5d       	subi	r24, 0xD0	; 208
    391c:	8a 33       	cpi	r24, 0x3A	; 58
    391e:	0c f0       	brlt	.+2      	; 0x3922 <itoa+0x2c>
    3920:	89 5d       	subi	r24, 0xD9	; 217
    3922:	81 93       	st	Z+, r24
    3924:	cb 01       	movw	r24, r22
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	a1 f7       	brne	.-24     	; 0x3912 <itoa+0x1c>
    392a:	16 f4       	brtc	.+4      	; 0x3930 <itoa+0x3a>
    392c:	5d e2       	ldi	r21, 0x2D	; 45
    392e:	51 93       	st	Z+, r21
    3930:	10 82       	st	Z, r1
    3932:	c9 01       	movw	r24, r18
    3934:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <strrev>

00003938 <strrev>:
    3938:	dc 01       	movw	r26, r24
    393a:	fc 01       	movw	r30, r24
    393c:	67 2f       	mov	r22, r23
    393e:	71 91       	ld	r23, Z+
    3940:	77 23       	and	r23, r23
    3942:	e1 f7       	brne	.-8      	; 0x393c <strrev+0x4>
    3944:	32 97       	sbiw	r30, 0x02	; 2
    3946:	04 c0       	rjmp	.+8      	; 0x3950 <strrev+0x18>
    3948:	7c 91       	ld	r23, X
    394a:	6d 93       	st	X+, r22
    394c:	70 83       	st	Z, r23
    394e:	62 91       	ld	r22, -Z
    3950:	ae 17       	cp	r26, r30
    3952:	bf 07       	cpc	r27, r31
    3954:	c8 f3       	brcs	.-14     	; 0x3948 <strrev+0x10>
    3956:	08 95       	ret

00003958 <__udivmodhi4>:
    3958:	aa 1b       	sub	r26, r26
    395a:	bb 1b       	sub	r27, r27
    395c:	51 e1       	ldi	r21, 0x11	; 17
    395e:	07 c0       	rjmp	.+14     	; 0x396e <__udivmodhi4_ep>

00003960 <__udivmodhi4_loop>:
    3960:	aa 1f       	adc	r26, r26
    3962:	bb 1f       	adc	r27, r27
    3964:	a6 17       	cp	r26, r22
    3966:	b7 07       	cpc	r27, r23
    3968:	10 f0       	brcs	.+4      	; 0x396e <__udivmodhi4_ep>
    396a:	a6 1b       	sub	r26, r22
    396c:	b7 0b       	sbc	r27, r23

0000396e <__udivmodhi4_ep>:
    396e:	88 1f       	adc	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	5a 95       	dec	r21
    3974:	a9 f7       	brne	.-22     	; 0x3960 <__udivmodhi4_loop>
    3976:	80 95       	com	r24
    3978:	90 95       	com	r25
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	08 95       	ret

00003980 <_exit>:
    3980:	f8 94       	cli

00003982 <__stop_program>:
    3982:	ff cf       	rjmp	.-2      	; 0x3982 <__stop_program>
