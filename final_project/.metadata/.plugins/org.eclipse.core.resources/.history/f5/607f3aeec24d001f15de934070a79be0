/*
 * timer.c
 *
 *  Created on: Jul 25, 2024
 *      Author: DELL
 */
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"
//static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)
{
	if(g_callBackPtr != NULL_PTR)
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
		}
}
ISR(TIMER1_COMPA_vect)
{
	if(g_callBackPtr != NULL_PTR)
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
		}
}

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
	TCNT1 = Config_Ptr->initial_value;
	if(Config_Ptr->mode == NORMAL){
		TIMSK = (1<<TOIE1);
		TCCR1B= ((Config_Ptr->prescaler) << 0);
	}else if(Config_Ptr->mode == COMPARE){
		OCR1A = Config_Ptr->compare_value;
		TIMSK = (1<<OCIE1A);
		TCCR1A = (1<<FOC1A);
		TCCR1B=(1<<WGM12) | ((Config_Ptr->prescaler) << 0);
	}

}
void Timer1_deInit(void){
	TCCR1B &= ~(1 << CS12);
	TCCR1B &= ~(1 << CS11);
	TCCR1B &= ~(1 << CS10);
}
void Timer1_setCallBack(void(*a_ptr)(void)){
	g_callBackPtr = a_ptr;
}

