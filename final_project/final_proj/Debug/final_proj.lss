
final_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00003b7e  00003c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000e2  008000e2  00003c94  2**0
                  ALLOC
  3 .stab         00003690  00000000  00000000  00003c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001547  00000000  00000000  00007324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000886b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000089ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b64f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <main>
      8a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 3. Setup the UART baud rate.
 */


void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5c:	eb e2       	ldi	r30, 0x2B	; 43
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	switch(Config_Ptr->bit_data){
     b64:	eb 81       	ldd	r30, Y+3	; 0x03
     b66:	fc 81       	ldd	r31, Y+4	; 0x04
     b68:	80 81       	ld	r24, Z
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <UART_init+0x88>
     b7c:	2d 81       	ldd	r18, Y+5	; 0x05
     b7e:	3e 81       	ldd	r19, Y+6	; 0x06
     b80:	23 30       	cpi	r18, 0x03	; 3
     b82:	31 05       	cpc	r19, r1
     b84:	54 f4       	brge	.+20     	; 0xb9a <UART_init+0x54>
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	89 f0       	breq	.+34     	; 0xbb0 <UART_init+0x6a>
     b8e:	2d 81       	ldd	r18, Y+5	; 0x05
     b90:	3e 81       	ldd	r19, Y+6	; 0x06
     b92:	21 30       	cpi	r18, 0x01	; 1
     b94:	31 05       	cpc	r19, r1
     b96:	99 f0       	breq	.+38     	; 0xbbe <UART_init+0x78>
     b98:	32 c0       	rjmp	.+100    	; 0xbfe <UART_init+0xb8>
     b9a:	8d 81       	ldd	r24, Y+5	; 0x05
     b9c:	9e 81       	ldd	r25, Y+6	; 0x06
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f0       	breq	.+58     	; 0xbde <UART_init+0x98>
     ba4:	2d 81       	ldd	r18, Y+5	; 0x05
     ba6:	3e 81       	ldd	r19, Y+6	; 0x06
     ba8:	27 30       	cpi	r18, 0x07	; 7
     baa:	31 05       	cpc	r19, r1
     bac:	01 f1       	breq	.+64     	; 0xbee <UART_init+0xa8>
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <UART_init+0xb8>
	case FIVE:
		UCSRB = ( 0 << UCSZ2);
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	10 82       	st	Z, r1
		UCSRC = ( 0 << UCSZ0) | (0<<UCSZ1);
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	10 82       	st	Z, r1
     bbc:	20 c0       	rjmp	.+64     	; 0xbfe <UART_init+0xb8>
		break;
	case SIX:
		UCSRB = ( 0 << UCSZ2);
     bbe:	ea e2       	ldi	r30, 0x2A	; 42
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	10 82       	st	Z, r1
		UCSRC = ( 1 << UCSZ0) | (0<<UCSZ1);
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	80 83       	st	Z, r24
     bcc:	18 c0       	rjmp	.+48     	; 0xbfe <UART_init+0xb8>
		break;
	case SEVEN:
		UCSRB = ( 0 << UCSZ2);
     bce:	ea e2       	ldi	r30, 0x2A	; 42
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	10 82       	st	Z, r1
		UCSRC = ( 0 << UCSZ0) | ( 1<<UCSZ1);
     bd4:	e0 e4       	ldi	r30, 0x40	; 64
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	80 83       	st	Z, r24
     bdc:	10 c0       	rjmp	.+32     	; 0xbfe <UART_init+0xb8>
		break;
	case EIGT:
		UCSRB = ( 0 << UCSZ2);
     bde:	ea e2       	ldi	r30, 0x2A	; 42
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	10 82       	st	Z, r1
		UCSRC = ( 1 << UCSZ0) | ( 1 <<UCSZ1);
     be4:	e0 e4       	ldi	r30, 0x40	; 64
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	86 e0       	ldi	r24, 0x06	; 6
     bea:	80 83       	st	Z, r24
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <UART_init+0xb8>
		break;
	case NINE:
		UCSRB = ( 1 << UCSZ2);
     bee:	ea e2       	ldi	r30, 0x2A	; 42
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	80 83       	st	Z, r24
		UCSRC = ( 1 << UCSZ0) | ( 1 <<UCSZ1);
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	80 83       	st	Z, r24
		break;
	}

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 61       	ori	r24, 0x18	; 24
     c0a:	8c 93       	st	X, r24
	 * UPM1:0  = Configure parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
     c0c:	a0 e4       	ldi	r26, 0x40	; 64
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 68       	ori	r24, 0x80	; 128
     c18:	8c 93       	st	X, r24

	UCSRC |= ((Config_Ptr->parity) << UPM0);
     c1a:	a0 e4       	ldi	r26, 0x40	; 64
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e0 e4       	ldi	r30, 0x40	; 64
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	28 2f       	mov	r18, r24
     c26:	eb 81       	ldd	r30, Y+3	; 0x03
     c28:	fc 81       	ldd	r31, Y+4	; 0x04
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	82 95       	swap	r24
     c32:	92 95       	swap	r25
     c34:	90 7f       	andi	r25, 0xF0	; 240
     c36:	98 27       	eor	r25, r24
     c38:	80 7f       	andi	r24, 0xF0	; 240
     c3a:	98 27       	eor	r25, r24
     c3c:	82 2b       	or	r24, r18
     c3e:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->stop_bit << USBS);
     c40:	a0 e4       	ldi	r26, 0x40	; 64
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e0 e4       	ldi	r30, 0x40	; 64
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	28 2f       	mov	r18, r24
     c4c:	eb 81       	ldd	r30, Y+3	; 0x03
     c4e:	fc 81       	ldd	r31, Y+4	; 0x04
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	82 2b       	or	r24, r18
     c64:	8c 93       	st	X, r24

	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     c66:	eb 81       	ldd	r30, Y+3	; 0x03
     c68:	fc 81       	ldd	r31, Y+4	; 0x04
     c6a:	83 81       	ldd	r24, Z+3	; 0x03
     c6c:	94 81       	ldd	r25, Z+4	; 0x04
     c6e:	a5 81       	ldd	r26, Z+5	; 0x05
     c70:	b6 81       	ldd	r27, Z+6	; 0x06
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	aa 1f       	adc	r26, r26
     c78:	bb 1f       	adc	r27, r27
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	aa 1f       	adc	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	9c 01       	movw	r18, r24
     c8c:	ad 01       	movw	r20, r26
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	92 e1       	ldi	r25, 0x12	; 18
     c92:	aa e7       	ldi	r26, 0x7A	; 122
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__udivmodsi4>
     c9e:	da 01       	movw	r26, r20
     ca0:	c9 01       	movw	r24, r18
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     ca8:	e0 e4       	ldi	r30, 0x40	; 64
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	89 2f       	mov	r24, r25
     cb2:	99 27       	eor	r25, r25
     cb4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cb6:	e9 e2       	ldi	r30, 0x29	; 41
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	80 83       	st	Z, r24


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

}
     cbe:	26 96       	adiw	r28, 0x06	; 6
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     cdc:	eb e2       	ldi	r30, 0x2B	; 43
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	80 72       	andi	r24, 0x20	; 32
     ce8:	90 70       	andi	r25, 0x00	; 0
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	b9 f3       	breq	.-18     	; 0xcdc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     cee:	ec e2       	ldi	r30, 0x2C	; 44
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d06:	eb e2       	ldi	r30, 0x2B	; 43
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	dc f7       	brge	.-10     	; 0xd06 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     d10:	ec e2       	ldi	r30, 0x2C	; 44
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <UART_sendString+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	9b 83       	std	Y+3, r25	; 0x03
     d2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	0e c0       	rjmp	.+28     	; 0xd4c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	fc 01       	movw	r30, r24
     d3c:	e2 0f       	add	r30, r18
     d3e:	f3 1f       	adc	r31, r19
     d40:	80 81       	ld	r24, Z
     d42:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_sendByte>
		i++;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	80 81       	ld	r24, Z
     d5e:	88 23       	and	r24, r24
     d60:	39 f7       	brne	.-50     	; 0xd30 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <UART_receiveString+0xa>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d82:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	8c 01       	movw	r16, r24
     d90:	02 0f       	add	r16, r18
     d92:	13 1f       	adc	r17, r19
     d94:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_recieveByte>
     d98:	f8 01       	movw	r30, r16
     d9a:	80 83       	st	Z, r24
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	8c 01       	movw	r16, r24
     db0:	02 0f       	add	r16, r18
     db2:	13 1f       	adc	r17, r19
     db4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_recieveByte>
     db8:	f8 01       	movw	r30, r16
     dba:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	fc 01       	movw	r30, r24
     dc8:	e2 0f       	add	r30, r18
     dca:	f3 1f       	adc	r31, r19
     dcc:	80 81       	ld	r24, Z
     dce:	83 32       	cpi	r24, 0x23	; 35
     dd0:	31 f7       	brne	.-52     	; 0xd9e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	10 82       	st	Z, r1
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e1e:	80 91 e2 00 	lds	r24, 0x00E2
     e22:	90 91 e3 00 	lds	r25, 0x00E3
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	29 f0       	breq	.+10     	; 0xe34 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e2a:	e0 91 e2 00 	lds	r30, 0x00E2
     e2e:	f0 91 e3 00 	lds	r31, 0x00E3
     e32:	09 95       	icall
		}
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e84:	80 91 e2 00 	lds	r24, 0x00E2
     e88:	90 91 e3 00 	lds	r25, 0x00E3
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	29 f0       	breq	.+10     	; 0xe9a <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e90:	e0 91 e2 00 	lds	r30, 0x00E2
     e94:	f0 91 e3 00 	lds	r31, 0x00E3
     e98:	09 95       	icall
		}
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <Timer1_init+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
     ece:	ac e4       	ldi	r26, 0x4C	; 76
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e9 81       	ldd	r30, Y+1	; 0x01
     ed4:	fa 81       	ldd	r31, Y+2	; 0x02
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == NORMAL){
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	85 81       	ldd	r24, Z+5	; 0x05
     ee6:	88 23       	and	r24, r24
     ee8:	59 f4       	brne	.+22     	; 0xf00 <Timer1_init+0x40>
		TIMSK = (1<<TOIE1);
     eea:	e9 e5       	ldi	r30, 0x59	; 89
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	80 83       	st	Z, r24
		TCCR1B= ((Config_Ptr->prescaler) << 0);
     ef2:	ae e4       	ldi	r26, 0x4E	; 78
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	8c 93       	st	X, r24
     efe:	1d c0       	rjmp	.+58     	; 0xf3a <Timer1_init+0x7a>
	}else if(Config_Ptr->mode == COMPARE){
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	85 81       	ldd	r24, Z+5	; 0x05
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	c1 f4       	brne	.+48     	; 0xf3a <Timer1_init+0x7a>
		OCR1A = Config_Ptr->compare_value;
     f0a:	aa e4       	ldi	r26, 0x4A	; 74
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 81       	ldd	r30, Y+1	; 0x01
     f10:	fa 81       	ldd	r31, Y+2	; 0x02
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
		TIMSK = (1<<OCIE1A);
     f1c:	e9 e5       	ldi	r30, 0x59	; 89
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 e1       	ldi	r24, 0x10	; 16
     f22:	80 83       	st	Z, r24
		TCCR1A = (1<<FOC1A);
     f24:	ef e4       	ldi	r30, 0x4F	; 79
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12) | ((Config_Ptr->prescaler) << 0);
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 81       	ldd	r30, Y+1	; 0x01
     f32:	fa 81       	ldd	r31, Y+2	; 0x02
     f34:	84 81       	ldd	r24, Z+4	; 0x04
     f36:	88 60       	ori	r24, 0x08	; 8
     f38:	8c 93       	st	X, r24
	}

}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <Timer1_deInit>:
void Timer1_deInit(void){
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS12);
     f4c:	ae e4       	ldi	r26, 0x4E	; 78
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	ee e4       	ldi	r30, 0x4E	; 78
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8b 7f       	andi	r24, 0xFB	; 251
     f58:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS11);
     f5a:	ae e4       	ldi	r26, 0x4E	; 78
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ee e4       	ldi	r30, 0x4E	; 78
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8d 7f       	andi	r24, 0xFD	; 253
     f66:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS10);
     f68:	ae e4       	ldi	r26, 0x4E	; 78
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ee e4       	ldi	r30, 0x4E	; 78
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8c 93       	st	X, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <Timer1_setCallBack+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	90 93 e3 00 	sts	0x00E3, r25
     f92:	80 93 e2 00 	sts	0x00E2, r24
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	2e 97       	sbiw	r28, 0x0e	; 14
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	66 e0       	ldi	r22, 0x06	; 6
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	67 e0       	ldi	r22, 0x07	; 7
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 ea       	ldi	r26, 0xA0	; 160
     fce:	b1 e4       	ldi	r27, 0x41	; 65
     fd0:	8b 87       	std	Y+11, r24	; 0x0b
     fd2:	9c 87       	std	Y+12, r25	; 0x0c
     fd4:	ad 87       	std	Y+13, r26	; 0x0d
     fd6:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fda:	7c 85       	ldd	r23, Y+12	; 0x0c
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a ef       	ldi	r20, 0xFA	; 250
     fe6:	54 e4       	ldi	r21, 0x44	; 68
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	8f 83       	std	Y+7, r24	; 0x07
     ff2:	98 87       	std	Y+8, r25	; 0x08
     ff4:	a9 87       	std	Y+9, r26	; 0x09
     ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100c:	88 23       	and	r24, r24
    100e:	2c f4       	brge	.+10     	; 0x101a <LCD_init+0x7a>
		__ticks = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	3f c0       	rjmp	.+126    	; 0x1098 <LCD_init+0xf8>
	else if (__tmp > 65535)
    101a:	6f 81       	ldd	r22, Y+7	; 0x07
    101c:	78 85       	ldd	r23, Y+8	; 0x08
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	3f ef       	ldi	r19, 0xFF	; 255
    1026:	4f e7       	ldi	r20, 0x7F	; 127
    1028:	57 e4       	ldi	r21, 0x47	; 71
    102a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102e:	18 16       	cp	r1, r24
    1030:	4c f5       	brge	.+82     	; 0x1084 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1032:	6b 85       	ldd	r22, Y+11	; 0x0b
    1034:	7c 85       	ldd	r23, Y+12	; 0x0c
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	9e 85       	ldd	r25, Y+14	; 0x0e
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 e4       	ldi	r21, 0x41	; 65
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	0f c0       	rjmp	.+30     	; 0x107a <LCD_init+0xda>
    105c:	88 ec       	ldi	r24, 0xC8	; 200
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <LCD_init+0xc8>
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	69 f7       	brne	.-38     	; 0x105c <LCD_init+0xbc>
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9e 83       	std	Y+6, r25	; 0x06
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <LCD_init+0x104>
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	6f ef       	ldi	r22, 0xFF	; 255
    10b0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    10b4:	88 e3       	ldi	r24, 0x38	; 56
    10b6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    10ba:	8c e0       	ldi	r24, 0x0C	; 12
    10bc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_sendCommand>
}
    10c6:	2e 96       	adiw	r28, 0x0e	; 14
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	e9 97       	sbiw	r28, 0x39	; 57
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	66 e0       	ldi	r22, 0x06	; 6
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e8       	ldi	r26, 0x80	; 128
    10fe:	bf e3       	ldi	r27, 0x3F	; 63
    1100:	8d ab       	std	Y+53, r24	; 0x35
    1102:	9e ab       	std	Y+54, r25	; 0x36
    1104:	af ab       	std	Y+55, r26	; 0x37
    1106:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	6d a9       	ldd	r22, Y+53	; 0x35
    110a:	7e a9       	ldd	r23, Y+54	; 0x36
    110c:	8f a9       	ldd	r24, Y+55	; 0x37
    110e:	98 ad       	ldd	r25, Y+56	; 0x38
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a ef       	ldi	r20, 0xFA	; 250
    1116:	54 e4       	ldi	r21, 0x44	; 68
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	89 ab       	std	Y+49, r24	; 0x31
    1122:	9a ab       	std	Y+50, r25	; 0x32
    1124:	ab ab       	std	Y+51, r26	; 0x33
    1126:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1128:	69 a9       	ldd	r22, Y+49	; 0x31
    112a:	7a a9       	ldd	r23, Y+50	; 0x32
    112c:	8b a9       	ldd	r24, Y+51	; 0x33
    112e:	9c a9       	ldd	r25, Y+52	; 0x34
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <LCD_sendCommand+0x72>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	98 ab       	std	Y+48, r25	; 0x30
    1146:	8f a7       	std	Y+47, r24	; 0x2f
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    114a:	69 a9       	ldd	r22, Y+49	; 0x31
    114c:	7a a9       	ldd	r23, Y+50	; 0x32
    114e:	8b a9       	ldd	r24, Y+51	; 0x33
    1150:	9c a9       	ldd	r25, Y+52	; 0x34
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6d a9       	ldd	r22, Y+53	; 0x35
    1164:	7e a9       	ldd	r23, Y+54	; 0x36
    1166:	8f a9       	ldd	r24, Y+55	; 0x37
    1168:	98 ad       	ldd	r25, Y+56	; 0x38
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	98 ab       	std	Y+48, r25	; 0x30
    1188:	8f a7       	std	Y+47, r24	; 0x2f
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <LCD_sendCommand+0xd2>
    118c:	88 ec       	ldi	r24, 0xC8	; 200
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9e a7       	std	Y+46, r25	; 0x2e
    1192:	8d a7       	std	Y+45, r24	; 0x2d
    1194:	8d a5       	ldd	r24, Y+45	; 0x2d
    1196:	9e a5       	ldd	r25, Y+46	; 0x2e
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <LCD_sendCommand+0xc0>
    119c:	9e a7       	std	Y+46, r25	; 0x2e
    119e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a2:	98 a9       	ldd	r25, Y+48	; 0x30
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	98 ab       	std	Y+48, r25	; 0x30
    11a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ac:	98 a9       	ldd	r25, Y+48	; 0x30
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <LCD_sendCommand+0xb4>
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	69 a9       	ldd	r22, Y+49	; 0x31
    11b6:	7a a9       	ldd	r23, Y+50	; 0x32
    11b8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ba:	9c a9       	ldd	r25, Y+52	; 0x34
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	98 ab       	std	Y+48, r25	; 0x30
    11c6:	8f a7       	std	Y+47, r24	; 0x2f
    11c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ca:	98 a9       	ldd	r25, Y+48	; 0x30
    11cc:	9c a7       	std	Y+44, r25	; 0x2c
    11ce:	8b a7       	std	Y+43, r24	; 0x2b
    11d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <LCD_sendCommand+0xfc>
    11d8:	9c a7       	std	Y+44, r25	; 0x2c
    11da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	67 e0       	ldi	r22, 0x07	; 7
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e8       	ldi	r26, 0x80	; 128
    11ec:	bf e3       	ldi	r27, 0x3F	; 63
    11ee:	8f a3       	std	Y+39, r24	; 0x27
    11f0:	98 a7       	std	Y+40, r25	; 0x28
    11f2:	a9 a7       	std	Y+41, r26	; 0x29
    11f4:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	6f a1       	ldd	r22, Y+39	; 0x27
    11f8:	78 a5       	ldd	r23, Y+40	; 0x28
    11fa:	89 a5       	ldd	r24, Y+41	; 0x29
    11fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a ef       	ldi	r20, 0xFA	; 250
    1204:	54 e4       	ldi	r21, 0x44	; 68
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	8b a3       	std	Y+35, r24	; 0x23
    1210:	9c a3       	std	Y+36, r25	; 0x24
    1212:	ad a3       	std	Y+37, r26	; 0x25
    1214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1216:	6b a1       	ldd	r22, Y+35	; 0x23
    1218:	7c a1       	ldd	r23, Y+36	; 0x24
    121a:	8d a1       	ldd	r24, Y+37	; 0x25
    121c:	9e a1       	ldd	r25, Y+38	; 0x26
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <LCD_sendCommand+0x160>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9a a3       	std	Y+34, r25	; 0x22
    1234:	89 a3       	std	Y+33, r24	; 0x21
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1238:	6b a1       	ldd	r22, Y+35	; 0x23
    123a:	7c a1       	ldd	r23, Y+36	; 0x24
    123c:	8d a1       	ldd	r24, Y+37	; 0x25
    123e:	9e a1       	ldd	r25, Y+38	; 0x26
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	4c f5       	brge	.+82     	; 0x12a2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	6f a1       	ldd	r22, Y+39	; 0x27
    1252:	78 a5       	ldd	r23, Y+40	; 0x28
    1254:	89 a5       	ldd	r24, Y+41	; 0x29
    1256:	9a a5       	ldd	r25, Y+42	; 0x2a
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9a a3       	std	Y+34, r25	; 0x22
    1276:	89 a3       	std	Y+33, r24	; 0x21
    1278:	0f c0       	rjmp	.+30     	; 0x1298 <LCD_sendCommand+0x1c0>
    127a:	88 ec       	ldi	r24, 0xC8	; 200
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	98 a3       	std	Y+32, r25	; 0x20
    1280:	8f 8f       	std	Y+31, r24	; 0x1f
    1282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1284:	98 a1       	ldd	r25, Y+32	; 0x20
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_sendCommand+0x1ae>
    128a:	98 a3       	std	Y+32, r25	; 0x20
    128c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	89 a1       	ldd	r24, Y+33	; 0x21
    1290:	9a a1       	ldd	r25, Y+34	; 0x22
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	9a a3       	std	Y+34, r25	; 0x22
    1296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	89 a1       	ldd	r24, Y+33	; 0x21
    129a:	9a a1       	ldd	r25, Y+34	; 0x22
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f7       	brne	.-38     	; 0x127a <LCD_sendCommand+0x1a2>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a2:	6b a1       	ldd	r22, Y+35	; 0x23
    12a4:	7c a1       	ldd	r23, Y+36	; 0x24
    12a6:	8d a1       	ldd	r24, Y+37	; 0x25
    12a8:	9e a1       	ldd	r25, Y+38	; 0x26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9a a3       	std	Y+34, r25	; 0x22
    12b4:	89 a3       	std	Y+33, r24	; 0x21
    12b6:	89 a1       	ldd	r24, Y+33	; 0x21
    12b8:	9a a1       	ldd	r25, Y+34	; 0x22
    12ba:	9e 8f       	std	Y+30, r25	; 0x1e
    12bc:	8d 8f       	std	Y+29, r24	; 0x1d
    12be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <LCD_sendCommand+0x1ea>
    12c6:	9e 8f       	std	Y+30, r25	; 0x1e
    12c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	69 ad       	ldd	r22, Y+57	; 0x39
    12ce:	0e 94 3b 11 	call	0x2276	; 0x2276 <GPIO_writePort>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a0 e8       	ldi	r26, 0x80	; 128
    12d8:	bf e3       	ldi	r27, 0x3F	; 63
    12da:	89 8f       	std	Y+25, r24	; 0x19
    12dc:	9a 8f       	std	Y+26, r25	; 0x1a
    12de:	ab 8f       	std	Y+27, r26	; 0x1b
    12e0:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e2:	69 8d       	ldd	r22, Y+25	; 0x19
    12e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a ef       	ldi	r20, 0xFA	; 250
    12f0:	54 e4       	ldi	r21, 0x44	; 68
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8d 8b       	std	Y+21, r24	; 0x15
    12fc:	9e 8b       	std	Y+22, r25	; 0x16
    12fe:	af 8b       	std	Y+23, r26	; 0x17
    1300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1302:	6d 89       	ldd	r22, Y+21	; 0x15
    1304:	7e 89       	ldd	r23, Y+22	; 0x16
    1306:	8f 89       	ldd	r24, Y+23	; 0x17
    1308:	98 8d       	ldd	r25, Y+24	; 0x18
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	2c f4       	brge	.+10     	; 0x1324 <LCD_sendCommand+0x24c>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	3f c0       	rjmp	.+126    	; 0x13a2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1324:	6d 89       	ldd	r22, Y+21	; 0x15
    1326:	7e 89       	ldd	r23, Y+22	; 0x16
    1328:	8f 89       	ldd	r24, Y+23	; 0x17
    132a:	98 8d       	ldd	r25, Y+24	; 0x18
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	4c f5       	brge	.+82     	; 0x138e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	69 8d       	ldd	r22, Y+25	; 0x19
    133e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e2       	ldi	r20, 0x20	; 32
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9c 8b       	std	Y+20, r25	; 0x14
    1362:	8b 8b       	std	Y+19, r24	; 0x13
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <LCD_sendCommand+0x2ac>
    1366:	88 ec       	ldi	r24, 0xC8	; 200
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9a 8b       	std	Y+18, r25	; 0x12
    136c:	89 8b       	std	Y+17, r24	; 0x11
    136e:	89 89       	ldd	r24, Y+17	; 0x11
    1370:	9a 89       	ldd	r25, Y+18	; 0x12
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <LCD_sendCommand+0x29a>
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	9c 89       	ldd	r25, Y+20	; 0x14
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 8b       	std	Y+20, r25	; 0x14
    1382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1384:	8b 89       	ldd	r24, Y+19	; 0x13
    1386:	9c 89       	ldd	r25, Y+20	; 0x14
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	69 f7       	brne	.-38     	; 0x1366 <LCD_sendCommand+0x28e>
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138e:	6d 89       	ldd	r22, Y+21	; 0x15
    1390:	7e 89       	ldd	r23, Y+22	; 0x16
    1392:	8f 89       	ldd	r24, Y+23	; 0x17
    1394:	98 8d       	ldd	r25, Y+24	; 0x18
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	98 8b       	std	Y+16, r25	; 0x10
    13a8:	8f 87       	std	Y+15, r24	; 0x0f
    13aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ac:	98 89       	ldd	r25, Y+16	; 0x10
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_sendCommand+0x2d6>
    13b2:	98 8b       	std	Y+16, r25	; 0x10
    13b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	67 e0       	ldi	r22, 0x07	; 7
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a0 e8       	ldi	r26, 0x80	; 128
    13c6:	bf e3       	ldi	r27, 0x3F	; 63
    13c8:	8b 87       	std	Y+11, r24	; 0x0b
    13ca:	9c 87       	std	Y+12, r25	; 0x0c
    13cc:	ad 87       	std	Y+13, r26	; 0x0d
    13ce:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a ef       	ldi	r20, 0xFA	; 250
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	8f 83       	std	Y+7, r24	; 0x07
    13ea:	98 87       	std	Y+8, r25	; 0x08
    13ec:	a9 87       	std	Y+9, r26	; 0x09
    13ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1404:	88 23       	and	r24, r24
    1406:	2c f4       	brge	.+10     	; 0x1412 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	4c f5       	brge	.+82     	; 0x147c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <LCD_sendCommand+0x39a>
    1454:	88 ec       	ldi	r24, 0xC8	; 200
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <LCD_sendCommand+0x388>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	69 f7       	brne	.-38     	; 0x1454 <LCD_sendCommand+0x37c>
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <LCD_sendCommand+0x3c4>
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    14a4:	e9 96       	adiw	r28, 0x39	; 57
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	e9 97       	sbiw	r28, 0x39	; 57
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	66 e0       	ldi	r22, 0x06	; 6
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e8       	ldi	r26, 0x80	; 128
    14dc:	bf e3       	ldi	r27, 0x3F	; 63
    14de:	8d ab       	std	Y+53, r24	; 0x35
    14e0:	9e ab       	std	Y+54, r25	; 0x36
    14e2:	af ab       	std	Y+55, r26	; 0x37
    14e4:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	6d a9       	ldd	r22, Y+53	; 0x35
    14e8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ea:	8f a9       	ldd	r24, Y+55	; 0x37
    14ec:	98 ad       	ldd	r25, Y+56	; 0x38
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	89 ab       	std	Y+49, r24	; 0x31
    1500:	9a ab       	std	Y+50, r25	; 0x32
    1502:	ab ab       	std	Y+51, r26	; 0x33
    1504:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1506:	69 a9       	ldd	r22, Y+49	; 0x31
    1508:	7a a9       	ldd	r23, Y+50	; 0x32
    150a:	8b a9       	ldd	r24, Y+51	; 0x33
    150c:	9c a9       	ldd	r25, Y+52	; 0x34
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	2c f4       	brge	.+10     	; 0x1528 <LCD_displayCharacter+0x72>
		__ticks = 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	98 ab       	std	Y+48, r25	; 0x30
    1524:	8f a7       	std	Y+47, r24	; 0x2f
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1528:	69 a9       	ldd	r22, Y+49	; 0x31
    152a:	7a a9       	ldd	r23, Y+50	; 0x32
    152c:	8b a9       	ldd	r24, Y+51	; 0x33
    152e:	9c a9       	ldd	r25, Y+52	; 0x34
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	6d a9       	ldd	r22, Y+53	; 0x35
    1542:	7e a9       	ldd	r23, Y+54	; 0x36
    1544:	8f a9       	ldd	r24, Y+55	; 0x37
    1546:	98 ad       	ldd	r25, Y+56	; 0x38
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	98 ab       	std	Y+48, r25	; 0x30
    1566:	8f a7       	std	Y+47, r24	; 0x2f
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <LCD_displayCharacter+0xd2>
    156a:	88 ec       	ldi	r24, 0xC8	; 200
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9e a7       	std	Y+46, r25	; 0x2e
    1570:	8d a7       	std	Y+45, r24	; 0x2d
    1572:	8d a5       	ldd	r24, Y+45	; 0x2d
    1574:	9e a5       	ldd	r25, Y+46	; 0x2e
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <LCD_displayCharacter+0xc0>
    157a:	9e a7       	std	Y+46, r25	; 0x2e
    157c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1580:	98 a9       	ldd	r25, Y+48	; 0x30
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	98 ab       	std	Y+48, r25	; 0x30
    1586:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	8f a5       	ldd	r24, Y+47	; 0x2f
    158a:	98 a9       	ldd	r25, Y+48	; 0x30
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f7       	brne	.-38     	; 0x156a <LCD_displayCharacter+0xb4>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1592:	69 a9       	ldd	r22, Y+49	; 0x31
    1594:	7a a9       	ldd	r23, Y+50	; 0x32
    1596:	8b a9       	ldd	r24, Y+51	; 0x33
    1598:	9c a9       	ldd	r25, Y+52	; 0x34
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	98 ab       	std	Y+48, r25	; 0x30
    15a4:	8f a7       	std	Y+47, r24	; 0x2f
    15a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a8:	98 a9       	ldd	r25, Y+48	; 0x30
    15aa:	9c a7       	std	Y+44, r25	; 0x2c
    15ac:	8b a7       	std	Y+43, r24	; 0x2b
    15ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_displayCharacter+0xfc>
    15b6:	9c a7       	std	Y+44, r25	; 0x2c
    15b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	67 e0       	ldi	r22, 0x07	; 7
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e8       	ldi	r26, 0x80	; 128
    15ca:	bf e3       	ldi	r27, 0x3F	; 63
    15cc:	8f a3       	std	Y+39, r24	; 0x27
    15ce:	98 a7       	std	Y+40, r25	; 0x28
    15d0:	a9 a7       	std	Y+41, r26	; 0x29
    15d2:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6f a1       	ldd	r22, Y+39	; 0x27
    15d6:	78 a5       	ldd	r23, Y+40	; 0x28
    15d8:	89 a5       	ldd	r24, Y+41	; 0x29
    15da:	9a a5       	ldd	r25, Y+42	; 0x2a
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a ef       	ldi	r20, 0xFA	; 250
    15e2:	54 e4       	ldi	r21, 0x44	; 68
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8b a3       	std	Y+35, r24	; 0x23
    15ee:	9c a3       	std	Y+36, r25	; 0x24
    15f0:	ad a3       	std	Y+37, r26	; 0x25
    15f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15f4:	6b a1       	ldd	r22, Y+35	; 0x23
    15f6:	7c a1       	ldd	r23, Y+36	; 0x24
    15f8:	8d a1       	ldd	r24, Y+37	; 0x25
    15fa:	9e a1       	ldd	r25, Y+38	; 0x26
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_displayCharacter+0x160>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9a a3       	std	Y+34, r25	; 0x22
    1612:	89 a3       	std	Y+33, r24	; 0x21
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6f a1       	ldd	r22, Y+39	; 0x27
    1630:	78 a5       	ldd	r23, Y+40	; 0x28
    1632:	89 a5       	ldd	r24, Y+41	; 0x29
    1634:	9a a5       	ldd	r25, Y+42	; 0x2a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9a a3       	std	Y+34, r25	; 0x22
    1654:	89 a3       	std	Y+33, r24	; 0x21
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_displayCharacter+0x1c0>
    1658:	88 ec       	ldi	r24, 0xC8	; 200
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	98 a3       	std	Y+32, r25	; 0x20
    165e:	8f 8f       	std	Y+31, r24	; 0x1f
    1660:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1662:	98 a1       	ldd	r25, Y+32	; 0x20
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_displayCharacter+0x1ae>
    1668:	98 a3       	std	Y+32, r25	; 0x20
    166a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9a a3       	std	Y+34, r25	; 0x22
    1674:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	89 a1       	ldd	r24, Y+33	; 0x21
    1678:	9a a1       	ldd	r25, Y+34	; 0x22
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_displayCharacter+0x1a2>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6b a1       	ldd	r22, Y+35	; 0x23
    1682:	7c a1       	ldd	r23, Y+36	; 0x24
    1684:	8d a1       	ldd	r24, Y+37	; 0x25
    1686:	9e a1       	ldd	r25, Y+38	; 0x26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9a a3       	std	Y+34, r25	; 0x22
    1692:	89 a3       	std	Y+33, r24	; 0x21
    1694:	89 a1       	ldd	r24, Y+33	; 0x21
    1696:	9a a1       	ldd	r25, Y+34	; 0x22
    1698:	9e 8f       	std	Y+30, r25	; 0x1e
    169a:	8d 8f       	std	Y+29, r24	; 0x1d
    169c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_displayCharacter+0x1ea>
    16a4:	9e 8f       	std	Y+30, r25	; 0x1e
    16a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	69 ad       	ldd	r22, Y+57	; 0x39
    16ac:	0e 94 3b 11 	call	0x2276	; 0x2276 <GPIO_writePort>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e8       	ldi	r26, 0x80	; 128
    16b6:	bf e3       	ldi	r27, 0x3F	; 63
    16b8:	89 8f       	std	Y+25, r24	; 0x19
    16ba:	9a 8f       	std	Y+26, r25	; 0x1a
    16bc:	ab 8f       	std	Y+27, r26	; 0x1b
    16be:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	69 8d       	ldd	r22, Y+25	; 0x19
    16c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a ef       	ldi	r20, 0xFA	; 250
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8d 8b       	std	Y+21, r24	; 0x15
    16da:	9e 8b       	std	Y+22, r25	; 0x16
    16dc:	af 8b       	std	Y+23, r26	; 0x17
    16de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9c 8b       	std	Y+20, r25	; 0x14
    16fe:	8b 8b       	std	Y+19, r24	; 0x13
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1702:	6d 89       	ldd	r22, Y+21	; 0x15
    1704:	7e 89       	ldd	r23, Y+22	; 0x16
    1706:	8f 89       	ldd	r24, Y+23	; 0x17
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	69 8d       	ldd	r22, Y+25	; 0x19
    171c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    171e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <LCD_displayCharacter+0x2ac>
    1744:	88 ec       	ldi	r24, 0xC8	; 200
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9a 8b       	std	Y+18, r25	; 0x12
    174a:	89 8b       	std	Y+17, r24	; 0x11
    174c:	89 89       	ldd	r24, Y+17	; 0x11
    174e:	9a 89       	ldd	r25, Y+18	; 0x12
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_displayCharacter+0x29a>
    1754:	9a 8b       	std	Y+18, r25	; 0x12
    1756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8b 89       	ldd	r24, Y+19	; 0x13
    175a:	9c 89       	ldd	r25, Y+20	; 0x14
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9c 8b       	std	Y+20, r25	; 0x14
    1760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8b 89       	ldd	r24, Y+19	; 0x13
    1764:	9c 89       	ldd	r25, Y+20	; 0x14
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <LCD_displayCharacter+0x28e>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6d 89       	ldd	r22, Y+21	; 0x15
    176e:	7e 89       	ldd	r23, Y+22	; 0x16
    1770:	8f 89       	ldd	r24, Y+23	; 0x17
    1772:	98 8d       	ldd	r25, Y+24	; 0x18
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9c 8b       	std	Y+20, r25	; 0x14
    177e:	8b 8b       	std	Y+19, r24	; 0x13
    1780:	8b 89       	ldd	r24, Y+19	; 0x13
    1782:	9c 89       	ldd	r25, Y+20	; 0x14
    1784:	98 8b       	std	Y+16, r25	; 0x10
    1786:	8f 87       	std	Y+15, r24	; 0x0f
    1788:	8f 85       	ldd	r24, Y+15	; 0x0f
    178a:	98 89       	ldd	r25, Y+16	; 0x10
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_displayCharacter+0x2d6>
    1790:	98 8b       	std	Y+16, r25	; 0x10
    1792:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e8       	ldi	r26, 0x80	; 128
    17a4:	bf e3       	ldi	r27, 0x3F	; 63
    17a6:	8b 87       	std	Y+11, r24	; 0x0b
    17a8:	9c 87       	std	Y+12, r25	; 0x0c
    17aa:	ad 87       	std	Y+13, r26	; 0x0d
    17ac:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a ef       	ldi	r20, 0xFA	; 250
    17bc:	54 e4       	ldi	r21, 0x44	; 68
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	8f 83       	std	Y+7, r24	; 0x07
    17c8:	98 87       	std	Y+8, r25	; 0x08
    17ca:	a9 87       	std	Y+9, r26	; 0x09
    17cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e2:	88 23       	and	r24, r24
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	3f c0       	rjmp	.+126    	; 0x186e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	3f ef       	ldi	r19, 0xFF	; 255
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	57 e4       	ldi	r21, 0x47	; 71
    1800:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	4c f5       	brge	.+82     	; 0x185a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1808:	6b 85       	ldd	r22, Y+11	; 0x0b
    180a:	7c 85       	ldd	r23, Y+12	; 0x0c
    180c:	8d 85       	ldd	r24, Y+13	; 0x0d
    180e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	51 e4       	ldi	r21, 0x41	; 65
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <LCD_displayCharacter+0x39a>
    1832:	88 ec       	ldi	r24, 0xC8	; 200
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9c 83       	std	Y+4, r25	; 0x04
    1838:	8b 83       	std	Y+3, r24	; 0x03
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_displayCharacter+0x388>
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	69 f7       	brne	.-38     	; 0x1832 <LCD_displayCharacter+0x37c>
    1858:	14 c0       	rjmp	.+40     	; 0x1882 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	9e 81       	ldd	r25, Y+6	; 0x06
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_displayCharacter+0x3c4>
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1882:	e9 96       	adiw	r28, 0x39	; 57
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <LCD_displayString+0x6>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    18a4:	19 82       	std	Y+1, r1	; 0x01
    18a6:	0e c0       	rjmp	.+28     	; 0x18c4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	fc 01       	movw	r30, r24
    18b4:	e2 0f       	add	r30, r18
    18b6:	f3 1f       	adc	r31, r19
    18b8:	80 81       	ld	r24, Z
    18ba:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_displayCharacter>
		i++;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	fc 01       	movw	r30, r24
    18d0:	e2 0f       	add	r30, r18
    18d2:	f3 1f       	adc	r31, r19
    18d4:	80 81       	ld	r24, Z
    18d6:	88 23       	and	r24, r24
    18d8:	39 f7       	brne	.-50     	; 0x18a8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <LCD_moveCursor+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <LCD_moveCursor+0x8>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3d 83       	std	Y+5, r19	; 0x05
    1900:	2c 83       	std	Y+4, r18	; 0x04
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	c1 f0       	breq	.+48     	; 0x193c <LCD_moveCursor+0x56>
    190c:	2c 81       	ldd	r18, Y+4	; 0x04
    190e:	3d 81       	ldd	r19, Y+5	; 0x05
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <LCD_moveCursor+0x3a>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <LCD_moveCursor+0x50>
    191e:	19 c0       	rjmp	.+50     	; 0x1952 <LCD_moveCursor+0x6c>
    1920:	2c 81       	ldd	r18, Y+4	; 0x04
    1922:	3d 81       	ldd	r19, Y+5	; 0x05
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	69 f0       	breq	.+26     	; 0x1944 <LCD_moveCursor+0x5e>
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	61 f0       	breq	.+24     	; 0x194c <LCD_moveCursor+0x66>
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	0b c0       	rjmp	.+22     	; 0x1952 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	80 5c       	subi	r24, 0xC0	; 192
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	80 5f       	subi	r24, 0xF0	; 240
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	80 5b       	subi	r24, 0xB0	; 176
    1950:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	80 68       	ori	r24, 0x80	; 128
    1956:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_sendCommand>
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <LCD_displayStringRowColumn+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <LCD_displayStringRowColumn+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	6a 83       	std	Y+2, r22	; 0x02
    197a:	5c 83       	std	Y+4, r21	; 0x04
    197c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	6a 81       	ldd	r22, Y+2	; 0x02
    1982:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	62 97       	sbiw	r28, 0x12	; 18
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	9a 8b       	std	Y+18, r25	; 0x12
    19b2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    19b4:	89 89       	ldd	r24, Y+17	; 0x11
    19b6:	9a 89       	ldd	r25, Y+18	; 0x12
    19b8:	9e 01       	movw	r18, r28
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	b9 01       	movw	r22, r18
    19c0:	4a e0       	ldi	r20, 0x0A	; 10
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <itoa>
   LCD_displayString(buff); /* Display the string */
    19c8:	ce 01       	movw	r24, r28
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
}
    19d0:	62 96       	adiw	r28, 0x12	; 18
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_sendCommand>
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	60 97       	sbiw	r28, 0x10	; 16
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	62 e0       	ldi	r22, 0x02	; 2
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	63 e0       	ldi	r22, 0x03	; 3
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	62 e0       	ldi	r22, 0x02	; 2
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	63 e0       	ldi	r22, 0x03	; 3
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	64 e0       	ldi	r22, 0x04	; 4
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	65 e0       	ldi	r22, 0x05	; 5
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a5a:	1f 86       	std	Y+15, r1	; 0x0f
    1a5c:	ab c0       	rjmp	.+342    	; 0x1bb4 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a72:	18 8a       	std	Y+16, r1	; 0x10
    1a74:	22 c0       	rjmp	.+68     	; 0x1aba <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a76:	88 89       	ldd	r24, Y+16	; 0x10
    1a78:	98 2f       	mov	r25, r24
    1a7a:	9e 5f       	subi	r25, 0xFE	; 254
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	69 2f       	mov	r22, r25
    1a80:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <GPIO_readPin>
    1a84:	88 23       	and	r24, r24
    1a86:	b1 f4       	brne	.+44     	; 0x1ab4 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	98 2f       	mov	r25, r24
    1a98:	88 89       	ldd	r24, Y+16	; 0x10
    1a9a:	89 0f       	add	r24, r25
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1aa2:	60 96       	adiw	r28, 0x10	; 16
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ab4:	88 89       	ldd	r24, Y+16	; 0x10
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	88 8b       	std	Y+16, r24	; 0x10
    1aba:	88 89       	ldd	r24, Y+16	; 0x10
    1abc:	84 30       	cpi	r24, 0x04	; 4
    1abe:	d8 f2       	brcs	.-74     	; 0x1a76 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_setupPinDirection>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e2       	ldi	r26, 0x20	; 32
    1ad0:	b1 e4       	ldi	r27, 0x41	; 65
    1ad2:	8b 87       	std	Y+11, r24	; 0x0b
    1ad4:	9c 87       	std	Y+12, r25	; 0x0c
    1ad6:	ad 87       	std	Y+13, r26	; 0x0d
    1ad8:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a ef       	ldi	r20, 0xFA	; 250
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8f 83       	std	Y+7, r24	; 0x07
    1af4:	98 87       	std	Y+8, r25	; 0x08
    1af6:	a9 87       	std	Y+9, r26	; 0x09
    1af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afa:	6f 81       	ldd	r22, Y+7	; 0x07
    1afc:	78 85       	ldd	r23, Y+8	; 0x08
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <KEYPAD_getPressedKey+0x186>
    1b5e:	88 ec       	ldi	r24, 0xC8	; 200
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <KEYPAD_getPressedKey+0x174>
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <KEYPAD_getPressedKey+0x168>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <KEYPAD_getPressedKey+0x1b0>
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb0:	8f 5f       	subi	r24, 0xFF	; 255
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
    1bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <KEYPAD_getPressedKey+0x1c6>
    1bba:	51 cf       	rjmp	.-350    	; 0x1a5e <KEYPAD_getPressedKey+0x68>
    1bbc:	4e cf       	rjmp	.-356    	; 0x1a5a <KEYPAD_getPressedKey+0x64>

00001bbe <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	3c 83       	std	Y+4, r19	; 0x04
    1bd6:	2b 83       	std	Y+3, r18	; 0x03
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	88 30       	cpi	r24, 0x08	; 8
    1bde:	91 05       	cpc	r25, r1
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1be2:	70 c0       	rjmp	.+224    	; 0x1cc4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	29 30       	cpi	r18, 0x09	; 9
    1bea:	31 05       	cpc	r19, r1
    1bec:	5c f5       	brge	.+86     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	84 30       	cpi	r24, 0x04	; 4
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bf8:	59 c0       	rjmp	.+178    	; 0x1cac <KEYPAD_4x4_adjustKeyNumber+0xee>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	25 30       	cpi	r18, 0x05	; 5
    1c00:	31 05       	cpc	r19, r1
    1c02:	9c f4       	brge	.+38     	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	82 30       	cpi	r24, 0x02	; 2
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c0e:	48 c0       	rjmp	.+144    	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	23 30       	cpi	r18, 0x03	; 3
    1c16:	31 05       	cpc	r19, r1
    1c18:	0c f0       	brlt	.+2      	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c1a:	45 c0       	rjmp	.+138    	; 0x1ca6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c26:	39 c0       	rjmp	.+114    	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c28:	67 c0       	rjmp	.+206    	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	26 30       	cpi	r18, 0x06	; 6
    1c30:	31 05       	cpc	r19, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c34:	41 c0       	rjmp	.+130    	; 0x1cb8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	87 30       	cpi	r24, 0x07	; 7
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c40:	3e c0       	rjmp	.+124    	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c42:	37 c0       	rjmp	.+110    	; 0x1cb2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	2c 30       	cpi	r18, 0x0C	; 12
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c4e:	46 c0       	rjmp	.+140    	; 0x1cdc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	8d 30       	cpi	r24, 0x0D	; 13
    1c56:	91 05       	cpc	r25, r1
    1c58:	5c f4       	brge	.+22     	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5e:	2a 30       	cpi	r18, 0x0A	; 10
    1c60:	31 05       	cpc	r19, r1
    1c62:	b1 f1       	breq	.+108    	; 0x1cd0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	8b 30       	cpi	r24, 0x0B	; 11
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	a4 f5       	brge	.+104    	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c6e:	2d c0       	rjmp	.+90     	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	2e 30       	cpi	r18, 0x0E	; 14
    1c76:	31 05       	cpc	r19, r1
    1c78:	b9 f1       	breq	.+110    	; 0x1ce8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	8e 30       	cpi	r24, 0x0E	; 14
    1c80:	91 05       	cpc	r25, r1
    1c82:	7c f1       	brlt	.+94     	; 0x1ce2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	2f 30       	cpi	r18, 0x0F	; 15
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	79 f1       	breq	.+94     	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	80 31       	cpi	r24, 0x10	; 16
    1c94:	91 05       	cpc	r25, r1
    1c96:	69 f1       	breq	.+90     	; 0x1cf2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c98:	2f c0       	rjmp	.+94     	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c9a:	87 e0       	ldi	r24, 0x07	; 7
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	2e c0       	rjmp	.+92     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	2b c0       	rjmp	.+86     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ca6:	89 e0       	ldi	r24, 0x09	; 9
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	28 c0       	rjmp	.+80     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cac:	85 e2       	ldi	r24, 0x25	; 37
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	25 c0       	rjmp	.+74     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	22 c0       	rjmp	.+68     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cb8:	85 e0       	ldi	r24, 0x05	; 5
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	1f c0       	rjmp	.+62     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cbe:	86 e0       	ldi	r24, 0x06	; 6
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	1c c0       	rjmp	.+56     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1cc4:	8a e2       	ldi	r24, 0x2A	; 42
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	19 c0       	rjmp	.+50     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	16 c0       	rjmp	.+44     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	13 c0       	rjmp	.+38     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	10 c0       	rjmp	.+32     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cdc:	8d e2       	ldi	r24, 0x2D	; 45
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	0d c0       	rjmp	.+26     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ce2:	8d e0       	ldi	r24, 0x0D	; 13
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	0a c0       	rjmp	.+20     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1ce8:	19 82       	std	Y+1, r1	; 0x01
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1cec:	8d e3       	ldi	r24, 0x3D	; 61
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1cf2:	8b e2       	ldi	r24, 0x2B	; 43
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <GPIO_setupPinDirection+0x6>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <GPIO_setupPinDirection+0x8>
    1d14:	0f 92       	push	r0
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	6a 83       	std	Y+2, r22	; 0x02
    1d1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 30       	cpi	r24, 0x08	; 8
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <GPIO_setupPinDirection+0x1c>
    1d26:	d5 c0       	rjmp	.+426    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <GPIO_setupPinDirection+0x24>
    1d2e:	d1 c0       	rjmp	.+418    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3d 83       	std	Y+5, r19	; 0x05
    1d38:	2c 83       	std	Y+4, r18	; 0x04
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <GPIO_setupPinDirection+0x3a>
    1d44:	43 c0       	rjmp	.+134    	; 0x1dcc <GPIO_setupPinDirection+0xc0>
    1d46:	2c 81       	ldd	r18, Y+4	; 0x04
    1d48:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <GPIO_setupPinDirection+0x4e>
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <GPIO_setupPinDirection+0x68>
    1d58:	bc c0       	rjmp	.+376    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
    1d5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <GPIO_setupPinDirection+0x5a>
    1d64:	5f c0       	rjmp	.+190    	; 0x1e24 <GPIO_setupPinDirection+0x118>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <GPIO_setupPinDirection+0x66>
    1d70:	85 c0       	rjmp	.+266    	; 0x1e7c <GPIO_setupPinDirection+0x170>
    1d72:	af c0       	rjmp	.+350    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	a1 f4       	brne	.+40     	; 0x1da2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d7a:	aa e3       	ldi	r26, 0x3A	; 58
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ea e3       	ldi	r30, 0x3A	; 58
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <GPIO_setupPinDirection+0x8c>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <GPIO_setupPinDirection+0x88>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	98 c0       	rjmp	.+304    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1da2:	aa e3       	ldi	r26, 0x3A	; 58
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ea e3       	ldi	r30, 0x3A	; 58
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_setupPinDirection+0xb4>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_setupPinDirection+0xb0>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	83 c0       	rjmp	.+262    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	a1 f4       	brne	.+40     	; 0x1dfa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dd2:	a7 e3       	ldi	r26, 0x37	; 55
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e7 e3       	ldi	r30, 0x37	; 55
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_setupPinDirection+0xe4>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_setupPinDirection+0xe0>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	6c c0       	rjmp	.+216    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dfa:	a7 e3       	ldi	r26, 0x37	; 55
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e7 e3       	ldi	r30, 0x37	; 55
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_setupPinDirection+0x10c>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_setupPinDirection+0x108>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	57 c0       	rjmp	.+174    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	a1 f4       	brne	.+40     	; 0x1e52 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e2a:	a4 e3       	ldi	r26, 0x34	; 52
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e4 e3       	ldi	r30, 0x34	; 52
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_setupPinDirection+0x13c>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_setupPinDirection+0x138>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	40 c0       	rjmp	.+128    	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e52:	a4 e3       	ldi	r26, 0x34	; 52
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e4 e3       	ldi	r30, 0x34	; 52
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_setupPinDirection+0x164>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_setupPinDirection+0x160>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	a1 f4       	brne	.+40     	; 0x1eaa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e82:	a1 e3       	ldi	r26, 0x31	; 49
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 e3       	ldi	r30, 0x31	; 49
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_setupPinDirection+0x194>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_setupPinDirection+0x190>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eaa:	a1 e3       	ldi	r26, 0x31	; 49
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e1 e3       	ldi	r30, 0x31	; 49
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <GPIO_setupPinDirection+0x1bc>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <GPIO_setupPinDirection+0x1b8>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <GPIO_writePin+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <GPIO_writePin+0x8>
    1eea:	0f 92       	push	r0
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	6a 83       	std	Y+2, r22	; 0x02
    1ef4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	88 30       	cpi	r24, 0x08	; 8
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <GPIO_writePin+0x1c>
    1efc:	d5 c0       	rjmp	.+426    	; 0x20a8 <GPIO_writePin+0x1c6>
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <GPIO_writePin+0x24>
    1f04:	d1 c0       	rjmp	.+418    	; 0x20a8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3d 83       	std	Y+5, r19	; 0x05
    1f0e:	2c 83       	std	Y+4, r18	; 0x04
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <GPIO_writePin+0x3a>
    1f1a:	43 c0       	rjmp	.+134    	; 0x1fa2 <GPIO_writePin+0xc0>
    1f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <GPIO_writePin+0x4e>
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	71 f0       	breq	.+28     	; 0x1f4a <GPIO_writePin+0x68>
    1f2e:	bc c0       	rjmp	.+376    	; 0x20a8 <GPIO_writePin+0x1c6>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <GPIO_writePin+0x5a>
    1f3a:	5f c0       	rjmp	.+190    	; 0x1ffa <GPIO_writePin+0x118>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <GPIO_writePin+0x66>
    1f46:	85 c0       	rjmp	.+266    	; 0x2052 <GPIO_writePin+0x170>
    1f48:	af c0       	rjmp	.+350    	; 0x20a8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	a1 f4       	brne	.+40     	; 0x1f78 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f50:	ab e3       	ldi	r26, 0x3B	; 59
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	eb e3       	ldi	r30, 0x3B	; 59
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 2e       	mov	r0, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <GPIO_writePin+0x8c>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	0a 94       	dec	r0
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <GPIO_writePin+0x88>
    1f72:	84 2b       	or	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	98 c0       	rjmp	.+304    	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f78:	ab e3       	ldi	r26, 0x3B	; 59
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <GPIO_writePin+0xb4>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <GPIO_writePin+0xb0>
    1f9a:	80 95       	com	r24
    1f9c:	84 23       	and	r24, r20
    1f9e:	8c 93       	st	X, r24
    1fa0:	83 c0       	rjmp	.+262    	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	a1 f4       	brne	.+40     	; 0x1fd0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fa8:	a8 e3       	ldi	r26, 0x38	; 56
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e8 e3       	ldi	r30, 0x38	; 56
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <GPIO_writePin+0xe4>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <GPIO_writePin+0xe0>
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	6c c0       	rjmp	.+216    	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <GPIO_writePin+0x10c>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <GPIO_writePin+0x108>
    1ff2:	80 95       	com	r24
    1ff4:	84 23       	and	r24, r20
    1ff6:	8c 93       	st	X, r24
    1ff8:	57 c0       	rjmp	.+174    	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	a1 f4       	brne	.+40     	; 0x2028 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2000:	a5 e3       	ldi	r26, 0x35	; 53
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e5 e3       	ldi	r30, 0x35	; 53
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <GPIO_writePin+0x13c>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <GPIO_writePin+0x138>
    2022:	84 2b       	or	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	40 c0       	rjmp	.+128    	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2028:	a5 e3       	ldi	r26, 0x35	; 53
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e5 e3       	ldi	r30, 0x35	; 53
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <GPIO_writePin+0x164>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <GPIO_writePin+0x160>
    204a:	80 95       	com	r24
    204c:	84 23       	and	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	2b c0       	rjmp	.+86     	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	a1 f4       	brne	.+40     	; 0x2080 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2058:	a2 e3       	ldi	r26, 0x32	; 50
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e2 e3       	ldi	r30, 0x32	; 50
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <GPIO_writePin+0x194>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <GPIO_writePin+0x190>
    207a:	84 2b       	or	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2080:	a2 e3       	ldi	r26, 0x32	; 50
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e2 e3       	ldi	r30, 0x32	; 50
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <GPIO_writePin+0x1bc>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <GPIO_writePin+0x1b8>
    20a2:	80 95       	com	r24
    20a4:	84 23       	and	r24, r20
    20a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <GPIO_readPin+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <GPIO_readPin+0x8>
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20ca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 30       	cpi	r24, 0x08	; 8
    20d0:	08 f0       	brcs	.+2      	; 0x20d4 <GPIO_readPin+0x1c>
    20d2:	84 c0       	rjmp	.+264    	; 0x21dc <GPIO_readPin+0x124>
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	84 30       	cpi	r24, 0x04	; 4
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <GPIO_readPin+0x24>
    20da:	80 c0       	rjmp	.+256    	; 0x21dc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	3d 83       	std	Y+5, r19	; 0x05
    20e4:	2c 83       	std	Y+4, r18	; 0x04
    20e6:	4c 81       	ldd	r20, Y+4	; 0x04
    20e8:	5d 81       	ldd	r21, Y+5	; 0x05
    20ea:	41 30       	cpi	r20, 0x01	; 1
    20ec:	51 05       	cpc	r21, r1
    20ee:	79 f1       	breq	.+94     	; 0x214e <GPIO_readPin+0x96>
    20f0:	8c 81       	ldd	r24, Y+4	; 0x04
    20f2:	9d 81       	ldd	r25, Y+5	; 0x05
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	91 05       	cpc	r25, r1
    20f8:	34 f4       	brge	.+12     	; 0x2106 <GPIO_readPin+0x4e>
    20fa:	2c 81       	ldd	r18, Y+4	; 0x04
    20fc:	3d 81       	ldd	r19, Y+5	; 0x05
    20fe:	21 15       	cp	r18, r1
    2100:	31 05       	cpc	r19, r1
    2102:	69 f0       	breq	.+26     	; 0x211e <GPIO_readPin+0x66>
    2104:	6b c0       	rjmp	.+214    	; 0x21dc <GPIO_readPin+0x124>
    2106:	4c 81       	ldd	r20, Y+4	; 0x04
    2108:	5d 81       	ldd	r21, Y+5	; 0x05
    210a:	42 30       	cpi	r20, 0x02	; 2
    210c:	51 05       	cpc	r21, r1
    210e:	b9 f1       	breq	.+110    	; 0x217e <GPIO_readPin+0xc6>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	83 30       	cpi	r24, 0x03	; 3
    2116:	91 05       	cpc	r25, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <GPIO_readPin+0x64>
    211a:	49 c0       	rjmp	.+146    	; 0x21ae <GPIO_readPin+0xf6>
    211c:	5f c0       	rjmp	.+190    	; 0x21dc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    211e:	e9 e3       	ldi	r30, 0x39	; 57
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_readPin+0x7e>
    2132:	55 95       	asr	r21
    2134:	47 95       	ror	r20
    2136:	8a 95       	dec	r24
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_readPin+0x7a>
    213a:	ca 01       	movw	r24, r20
    213c:	81 70       	andi	r24, 0x01	; 1
    213e:	90 70       	andi	r25, 0x00	; 0
    2140:	88 23       	and	r24, r24
    2142:	19 f0       	breq	.+6      	; 0x214a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	49 c0       	rjmp	.+146    	; 0x21dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	47 c0       	rjmp	.+142    	; 0x21dc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    214e:	e6 e3       	ldi	r30, 0x36	; 54
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <GPIO_readPin+0xae>
    2162:	55 95       	asr	r21
    2164:	47 95       	ror	r20
    2166:	8a 95       	dec	r24
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <GPIO_readPin+0xaa>
    216a:	ca 01       	movw	r24, r20
    216c:	81 70       	andi	r24, 0x01	; 1
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	88 23       	and	r24, r24
    2172:	19 f0       	breq	.+6      	; 0x217a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	31 c0       	rjmp	.+98     	; 0x21dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    217a:	19 82       	std	Y+1, r1	; 0x01
    217c:	2f c0       	rjmp	.+94     	; 0x21dc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    217e:	e3 e3       	ldi	r30, 0x33	; 51
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <GPIO_readPin+0xde>
    2192:	55 95       	asr	r21
    2194:	47 95       	ror	r20
    2196:	8a 95       	dec	r24
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <GPIO_readPin+0xda>
    219a:	ca 01       	movw	r24, r20
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	88 23       	and	r24, r24
    21a2:	19 f0       	breq	.+6      	; 0x21aa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	19 c0       	rjmp	.+50     	; 0x21dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	17 c0       	rjmp	.+46     	; 0x21dc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21ae:	e0 e3       	ldi	r30, 0x30	; 48
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <GPIO_readPin+0x10e>
    21c2:	55 95       	asr	r21
    21c4:	47 95       	ror	r20
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <GPIO_readPin+0x10a>
    21ca:	ca 01       	movw	r24, r20
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	88 23       	and	r24, r24
    21d2:	19 f0       	breq	.+6      	; 0x21da <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21da:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <GPIO_setupPortDirection+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <GPIO_setupPortDirection+0x8>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	90 f5       	brcc	.+100    	; 0x2268 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	3c 83       	std	Y+4, r19	; 0x04
    220c:	2b 83       	std	Y+3, r18	; 0x03
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	91 05       	cpc	r25, r1
    2216:	d1 f0       	breq	.+52     	; 0x224c <GPIO_setupPortDirection+0x5e>
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	2c f4       	brge	.+10     	; 0x222c <GPIO_setupPortDirection+0x3e>
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	61 f0       	breq	.+24     	; 0x2242 <GPIO_setupPortDirection+0x54>
    222a:	1e c0       	rjmp	.+60     	; 0x2268 <GPIO_setupPortDirection+0x7a>
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	3c 81       	ldd	r19, Y+4	; 0x04
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	81 f0       	breq	.+32     	; 0x2256 <GPIO_setupPortDirection+0x68>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	91 05       	cpc	r25, r1
    223e:	81 f0       	breq	.+32     	; 0x2260 <GPIO_setupPortDirection+0x72>
    2240:	13 c0       	rjmp	.+38     	; 0x2268 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2242:	ea e3       	ldi	r30, 0x3A	; 58
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	80 83       	st	Z, r24
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    224c:	e7 e3       	ldi	r30, 0x37	; 55
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	80 83       	st	Z, r24
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2256:	e4 e3       	ldi	r30, 0x34	; 52
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	80 83       	st	Z, r24
    225e:	04 c0       	rjmp	.+8      	; 0x2268 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2260:	e1 e3       	ldi	r30, 0x31	; 49
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	80 83       	st	Z, r24
			break;
		}
	}
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <GPIO_writePort+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <GPIO_writePort+0x8>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	90 f5       	brcc	.+100    	; 0x22f0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3c 83       	std	Y+4, r19	; 0x04
    2294:	2b 83       	std	Y+3, r18	; 0x03
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	d1 f0       	breq	.+52     	; 0x22d4 <GPIO_writePort+0x5e>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <GPIO_writePort+0x3e>
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	61 f0       	breq	.+24     	; 0x22ca <GPIO_writePort+0x54>
    22b2:	1e c0       	rjmp	.+60     	; 0x22f0 <GPIO_writePort+0x7a>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	81 f0       	breq	.+32     	; 0x22de <GPIO_writePort+0x68>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	81 f0       	breq	.+32     	; 0x22e8 <GPIO_writePort+0x72>
    22c8:	13 c0       	rjmp	.+38     	; 0x22f0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22ca:	eb e3       	ldi	r30, 0x3B	; 59
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 83       	st	Z, r24
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22d4:	e8 e3       	ldi	r30, 0x38	; 56
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	80 83       	st	Z, r24
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22de:	e5 e3       	ldi	r30, 0x35	; 53
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	80 83       	st	Z, r24
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22e8:	e2 e3       	ldi	r30, 0x32	; 50
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <GPIO_readPort+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <GPIO_readPort+0x8>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    230c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	84 30       	cpi	r24, 0x04	; 4
    2312:	90 f5       	brcc	.+100    	; 0x2378 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	3c 83       	std	Y+4, r19	; 0x04
    231c:	2b 83       	std	Y+3, r18	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	91 05       	cpc	r25, r1
    2326:	d1 f0       	breq	.+52     	; 0x235c <GPIO_readPort+0x5e>
    2328:	2b 81       	ldd	r18, Y+3	; 0x03
    232a:	3c 81       	ldd	r19, Y+4	; 0x04
    232c:	22 30       	cpi	r18, 0x02	; 2
    232e:	31 05       	cpc	r19, r1
    2330:	2c f4       	brge	.+10     	; 0x233c <GPIO_readPort+0x3e>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	61 f0       	breq	.+24     	; 0x2352 <GPIO_readPort+0x54>
    233a:	1e c0       	rjmp	.+60     	; 0x2378 <GPIO_readPort+0x7a>
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	22 30       	cpi	r18, 0x02	; 2
    2342:	31 05       	cpc	r19, r1
    2344:	81 f0       	breq	.+32     	; 0x2366 <GPIO_readPort+0x68>
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	91 05       	cpc	r25, r1
    234e:	81 f0       	breq	.+32     	; 0x2370 <GPIO_readPort+0x72>
    2350:	13 c0       	rjmp	.+38     	; 0x2378 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2352:	e9 e3       	ldi	r30, 0x39	; 57
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    235c:	e6 e3       	ldi	r30, 0x36	; 54
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	09 c0       	rjmp	.+18     	; 0x2378 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2366:	e3 e3       	ldi	r30, 0x33	; 51
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2370:	e0 e3       	ldi	r30, 0x30	; 48
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2378:	89 81       	ldd	r24, Y+1	; 0x01
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <door_unlock>:
	no
}stay;

uint8 ProgramFinish = 0;
uint8 count = 1;
void door_unlock(){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	if(count == 6){
    2390:	80 91 e0 00 	lds	r24, 0x00E0
    2394:	86 30       	cpi	r24, 0x06	; 6
    2396:	39 f4       	brne	.+14     	; 0x23a6 <door_unlock+0x1e>
		LCD_clearScreen();
    2398:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
		LCD_displayString("Door is locking");
    239c:	80 e6       	ldi	r24, 0x60	; 96
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
    23a4:	06 c0       	rjmp	.+12     	; 0x23b2 <door_unlock+0x2a>

	}else if(count == 11){
    23a6:	80 91 e0 00 	lds	r24, 0x00E0
    23aa:	8b 30       	cpi	r24, 0x0B	; 11
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <door_unlock+0x2a>
		LCD_clearScreen();
    23ae:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
	}
	count++;
    23b2:	80 91 e0 00 	lds	r24, 0x00E0
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	80 93 e0 00 	sts	0x00E0, r24
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <main>:
int main(void)
{
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	c6 5b       	subi	r28, 0xB6	; 182
    23d0:	d0 40       	sbci	r29, 0x00	; 0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7);
    23dc:	af e5       	ldi	r26, 0x5F	; 95
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ef e5       	ldi	r30, 0x5F	; 95
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	8c 93       	st	X, r24

	UART_ConfigType  conf;
	conf.baud_rate = 9600;
    23ea:	fe 01       	movw	r30, r28
    23ec:	e5 56       	subi	r30, 0x65	; 101
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 e8       	ldi	r24, 0x80	; 128
    23f2:	95 e2       	ldi	r25, 0x25	; 37
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	83 83       	std	Z+3, r24	; 0x03
    23fa:	94 83       	std	Z+4, r25	; 0x04
    23fc:	a5 83       	std	Z+5, r26	; 0x05
    23fe:	b6 83       	std	Z+6, r27	; 0x06
	conf.bit_data  = EIGT;
    2400:	fe 01       	movw	r30, r28
    2402:	e5 56       	subi	r30, 0x65	; 101
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	80 83       	st	Z, r24
	conf.parity    = EVEN;
    240a:	fe 01       	movw	r30, r28
    240c:	e5 56       	subi	r30, 0x65	; 101
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	81 83       	std	Z+1, r24	; 0x01
	conf.stop_bit  = ONE_BIT;
    2414:	fe 01       	movw	r30, r28
    2416:	e5 56       	subi	r30, 0x65	; 101
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	12 82       	std	Z+2, r1	; 0x02

	Timer1_ConfigType time_conf;
	time_conf.initial_value = 0;
    241c:	fe 01       	movw	r30, r28
    241e:	ee 55       	subi	r30, 0x5E	; 94
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	11 82       	std	Z+1, r1	; 0x01
    2424:	10 82       	st	Z, r1
	time_conf.mode = COMPARE;
    2426:	fe 01       	movw	r30, r28
    2428:	ee 55       	subi	r30, 0x5E	; 94
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	85 83       	std	Z+5, r24	; 0x05
	time_conf.prescaler = ONE_ZERO_TWO_FOUR;
    2430:	fe 01       	movw	r30, r28
    2432:	ee 55       	subi	r30, 0x5E	; 94
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	85 e0       	ldi	r24, 0x05	; 5
    2438:	84 83       	std	Z+4, r24	; 0x04
	//compare each 3 seconds
	time_conf.compare_value = 23437;
    243a:	fe 01       	movw	r30, r28
    243c:	ee 55       	subi	r30, 0x5E	; 94
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	8d e8       	ldi	r24, 0x8D	; 141
    2442:	9b e5       	ldi	r25, 0x5B	; 91
    2444:	93 83       	std	Z+3, r25	; 0x03
    2446:	82 83       	std	Z+2, r24	; 0x02


	UART_init(&conf);
    2448:	ce 01       	movw	r24, r28
    244a:	85 56       	subi	r24, 0x65	; 101
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init();
    2452:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCD_init>
	stay StayInPlusMinus = yes;
    2456:	fe 01       	movw	r30, r28
    2458:	e6 56       	subi	r30, 0x66	; 102
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	10 82       	st	Z, r1
	uint8 cou = 0;
    245e:	fe 01       	movw	r30, r28
    2460:	e7 56       	subi	r30, 0x67	; 103
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	10 82       	st	Z, r1
	uint8 key_check[5];


	while(1){

		StayInPlusMinus = yes;
    2466:	fe 01       	movw	r30, r28
    2468:	e6 56       	subi	r30, 0x66	; 102
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	10 82       	st	Z, r1
		if(ProgramFinish == 0){
    246e:	80 91 e4 00 	lds	r24, 0x00E4
    2472:	88 23       	and	r24, r24
    2474:	c1 f7       	brne	.-16     	; 0x2466 <main+0xa4>
			ProgramFinish = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	80 93 e4 00 	sts	0x00E4, r24

		LCD_clearScreen();
    247c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
		pass_creation( &key_one, &key_two);
    2480:	ce 01       	movw	r24, r28
    2482:	88 55       	subi	r24, 0x58	; 88
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	9e 01       	movw	r18, r28
    2488:	23 55       	subi	r18, 0x53	; 83
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 9d 19 	call	0x333a	; 0x333a <pass_creation>

		enter_key = KEYPAD_getPressedKey();
    2492:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    2496:	fe 01       	movw	r30, r28
    2498:	eb 56       	subi	r30, 0x6B	; 107
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 83       	st	Z, r24
    249e:	fe 01       	movw	r30, r28
    24a0:	e7 57       	subi	r30, 0x77	; 119
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a8 ec       	ldi	r26, 0xC8	; 200
    24aa:	b3 e4       	ldi	r27, 0x43	; 67
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	8e 01       	movw	r16, r28
    24b6:	0b 57       	subi	r16, 0x7B	; 123
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	fe 01       	movw	r30, r28
    24bc:	e7 57       	subi	r30, 0x77	; 119
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	80 83       	st	Z, r24
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	a2 83       	std	Z+2, r26	; 0x02
    24e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e2:	fe 01       	movw	r30, r28
    24e4:	eb 57       	subi	r30, 0x7B	; 123
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	44 f4       	brge	.+16     	; 0x2510 <main+0x14e>
		__ticks = 1;
    2500:	fe 01       	movw	r30, r28
    2502:	ed 57       	subi	r30, 0x7D	; 125
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
    250e:	64 c0       	rjmp	.+200    	; 0x25d8 <main+0x216>
	else if (__tmp > 65535)
    2510:	fe 01       	movw	r30, r28
    2512:	eb 57       	subi	r30, 0x7B	; 123
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	0c f0       	brlt	.+2      	; 0x2530 <main+0x16e>
    252e:	43 c0       	rjmp	.+134    	; 0x25b6 <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	fe 01       	movw	r30, r28
    2532:	e7 57       	subi	r30, 0x77	; 119
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8e 01       	movw	r16, r28
    2550:	0d 57       	subi	r16, 0x7D	; 125
    2552:	1f 4f       	sbci	r17, 0xFF	; 255
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	f8 01       	movw	r30, r16
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	1f c0       	rjmp	.+62     	; 0x25a6 <main+0x1e4>
    2568:	fe 01       	movw	r30, r28
    256a:	ef 57       	subi	r30, 0x7F	; 127
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    2576:	fe 01       	movw	r30, r28
    2578:	ef 57       	subi	r30, 0x7F	; 127
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0x1be>
    2584:	fe 01       	movw	r30, r28
    2586:	ef 57       	subi	r30, 0x7F	; 127
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258e:	de 01       	movw	r26, r28
    2590:	ad 57       	subi	r26, 0x7D	; 125
    2592:	bf 4f       	sbci	r27, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	ed 57       	subi	r30, 0x7D	; 125
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	11 96       	adiw	r26, 0x01	; 1
    25a2:	9c 93       	st	X, r25
    25a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 57       	subi	r30, 0x7D	; 125
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	d1 f6       	brne	.-76     	; 0x2568 <main+0x1a6>
    25b4:	28 c0       	rjmp	.+80     	; 0x2606 <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	8e 01       	movw	r16, r28
    25b8:	0d 57       	subi	r16, 0x7D	; 125
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	fe 01       	movw	r30, r28
    25be:	eb 57       	subi	r30, 0x7B	; 123
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	f8 01       	movw	r30, r16
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	de 01       	movw	r26, r28
    25da:	a1 58       	subi	r26, 0x81	; 129
    25dc:	bf 4f       	sbci	r27, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 57       	subi	r30, 0x7D	; 125
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	9c 93       	st	X, r25
    25ec:	8e 93       	st	-X, r24
    25ee:	fe 01       	movw	r30, r28
    25f0:	e1 58       	subi	r30, 0x81	; 129
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <main+0x236>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e1 58       	subi	r30, 0x81	; 129
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
		_delay_ms(400);

		if (enter_key == '*' ){
    2606:	fe 01       	movw	r30, r28
    2608:	eb 56       	subi	r30, 0x6B	; 107
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	8a 32       	cpi	r24, 0x2A	; 42
    2610:	09 f0       	breq	.+2      	; 0x2614 <main+0x252>
    2612:	29 cf       	rjmp	.-430    	; 0x2466 <main+0xa4>

			enter_key = 0;
    2614:	fe 01       	movw	r30, r28
    2616:	eb 56       	subi	r30, 0x6B	; 107
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	10 82       	st	Z, r1
			for(int l = 0 ; l < 5 ; l++){
    261c:	fe 01       	movw	r30, r28
    261e:	ed 56       	subi	r30, 0x6D	; 109
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	11 82       	std	Z+1, r1	; 0x01
    2624:	10 82       	st	Z, r1
    2626:	cd c0       	rjmp	.+410    	; 0x27c2 <main+0x400>

				UART_sendByte(key_one[l]);
    2628:	fe 01       	movw	r30, r28
    262a:	ed 56       	subi	r30, 0x6D	; 109
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	20 81       	ld	r18, Z
    2630:	31 81       	ldd	r19, Z+1	; 0x01
    2632:	ce 01       	movw	r24, r28
    2634:	88 55       	subi	r24, 0x58	; 88
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	80 81       	ld	r24, Z
    2640:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_sendByte>
    2644:	fe 01       	movw	r30, r28
    2646:	e5 58       	subi	r30, 0x85	; 133
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	a8 e4       	ldi	r26, 0x48	; 72
    2650:	b2 e4       	ldi	r27, 0x42	; 66
    2652:	80 83       	st	Z, r24
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	a2 83       	std	Z+2, r26	; 0x02
    2658:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265a:	8e 01       	movw	r16, r28
    265c:	09 58       	subi	r16, 0x89	; 137
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	fe 01       	movw	r30, r28
    2662:	e5 58       	subi	r30, 0x85	; 133
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a ef       	ldi	r20, 0xFA	; 250
    2674:	54 e4       	ldi	r21, 0x44	; 68
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	f8 01       	movw	r30, r16
    2680:	80 83       	st	Z, r24
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	a2 83       	std	Z+2, r26	; 0x02
    2686:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2688:	fe 01       	movw	r30, r28
    268a:	e9 58       	subi	r30, 0x89	; 137
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	44 f4       	brge	.+16     	; 0x26b6 <main+0x2f4>
		__ticks = 1;
    26a6:	fe 01       	movw	r30, r28
    26a8:	eb 58       	subi	r30, 0x8B	; 139
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	64 c0       	rjmp	.+200    	; 0x277e <main+0x3bc>
	else if (__tmp > 65535)
    26b6:	fe 01       	movw	r30, r28
    26b8:	e9 58       	subi	r30, 0x89	; 137
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	0c f0       	brlt	.+2      	; 0x26d6 <main+0x314>
    26d4:	43 c0       	rjmp	.+134    	; 0x275c <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 58       	subi	r30, 0x85	; 133
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8e 01       	movw	r16, r28
    26f6:	0b 58       	subi	r16, 0x8B	; 139
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	1f c0       	rjmp	.+62     	; 0x274c <main+0x38a>
    270e:	fe 01       	movw	r30, r28
    2710:	ed 58       	subi	r30, 0x8D	; 141
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	88 ec       	ldi	r24, 0xC8	; 200
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
    271c:	fe 01       	movw	r30, r28
    271e:	ed 58       	subi	r30, 0x8D	; 141
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <main+0x364>
    272a:	fe 01       	movw	r30, r28
    272c:	ed 58       	subi	r30, 0x8D	; 141
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	de 01       	movw	r26, r28
    2736:	ab 58       	subi	r26, 0x8B	; 139
    2738:	bf 4f       	sbci	r27, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	eb 58       	subi	r30, 0x8B	; 139
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	9c 93       	st	X, r25
    274a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274c:	fe 01       	movw	r30, r28
    274e:	eb 58       	subi	r30, 0x8B	; 139
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	d1 f6       	brne	.-76     	; 0x270e <main+0x34c>
    275a:	27 c0       	rjmp	.+78     	; 0x27aa <main+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	8e 01       	movw	r16, r28
    275e:	0b 58       	subi	r16, 0x8B	; 139
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	fe 01       	movw	r30, r28
    2764:	e9 58       	subi	r30, 0x89	; 137
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	f8 01       	movw	r30, r16
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
    277e:	de 01       	movw	r26, r28
    2780:	af 58       	subi	r26, 0x8F	; 143
    2782:	bf 4f       	sbci	r27, 0xFF	; 255
    2784:	fe 01       	movw	r30, r28
    2786:	eb 58       	subi	r30, 0x8B	; 139
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	8d 93       	st	X+, r24
    2790:	9c 93       	st	X, r25
    2792:	fe 01       	movw	r30, r28
    2794:	ef 58       	subi	r30, 0x8F	; 143
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	91 81       	ldd	r25, Z+1	; 0x01
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <main+0x3da>
    27a0:	fe 01       	movw	r30, r28
    27a2:	ef 58       	subi	r30, 0x8F	; 143
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
		_delay_ms(400);

		if (enter_key == '*' ){

			enter_key = 0;
			for(int l = 0 ; l < 5 ; l++){
    27aa:	de 01       	movw	r26, r28
    27ac:	ad 56       	subi	r26, 0x6D	; 109
    27ae:	bf 4f       	sbci	r27, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	ed 56       	subi	r30, 0x6D	; 109
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	11 96       	adiw	r26, 0x01	; 1
    27be:	9c 93       	st	X, r25
    27c0:	8e 93       	st	-X, r24
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 56       	subi	r30, 0x6D	; 109
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	85 30       	cpi	r24, 0x05	; 5
    27ce:	91 05       	cpc	r25, r1
    27d0:	0c f4       	brge	.+2      	; 0x27d4 <main+0x412>
    27d2:	2a cf       	rjmp	.-428    	; 0x2628 <main+0x266>

				UART_sendByte(key_one[l]);
				_delay_ms(50);
			}
			for(int i = 0 ; i < 5 ; i++){
    27d4:	fe 01       	movw	r30, r28
    27d6:	ef 56       	subi	r30, 0x6F	; 111
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	11 82       	std	Z+1, r1	; 0x01
    27dc:	10 82       	st	Z, r1
    27de:	cd c0       	rjmp	.+410    	; 0x297a <main+0x5b8>
				UART_sendByte(key_two[i]);
    27e0:	fe 01       	movw	r30, r28
    27e2:	ef 56       	subi	r30, 0x6F	; 111
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	20 81       	ld	r18, Z
    27e8:	31 81       	ldd	r19, Z+1	; 0x01
    27ea:	ce 01       	movw	r24, r28
    27ec:	83 55       	subi	r24, 0x53	; 83
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 0f       	add	r30, r18
    27f4:	f3 1f       	adc	r31, r19
    27f6:	80 81       	ld	r24, Z
    27f8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_sendByte>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e3 59       	subi	r30, 0x93	; 147
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a8 e4       	ldi	r26, 0x48	; 72
    2808:	b2 e4       	ldi	r27, 0x42	; 66
    280a:	80 83       	st	Z, r24
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	a2 83       	std	Z+2, r26	; 0x02
    2810:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	8e 01       	movw	r16, r28
    2814:	07 59       	subi	r16, 0x97	; 151
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	e3 59       	subi	r30, 0x93	; 147
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a ef       	ldi	r20, 0xFA	; 250
    282c:	54 e4       	ldi	r21, 0x44	; 68
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	f8 01       	movw	r30, r16
    2838:	80 83       	st	Z, r24
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	a2 83       	std	Z+2, r26	; 0x02
    283e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2840:	fe 01       	movw	r30, r28
    2842:	e7 59       	subi	r30, 0x97	; 151
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	44 f4       	brge	.+16     	; 0x286e <main+0x4ac>
		__ticks = 1;
    285e:	fe 01       	movw	r30, r28
    2860:	e9 59       	subi	r30, 0x99	; 153
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	64 c0       	rjmp	.+200    	; 0x2936 <main+0x574>
	else if (__tmp > 65535)
    286e:	fe 01       	movw	r30, r28
    2870:	e7 59       	subi	r30, 0x97	; 151
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	0c f0       	brlt	.+2      	; 0x288e <main+0x4cc>
    288c:	43 c0       	rjmp	.+134    	; 0x2914 <main+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288e:	fe 01       	movw	r30, r28
    2890:	e3 59       	subi	r30, 0x93	; 147
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8e 01       	movw	r16, r28
    28ae:	09 59       	subi	r16, 0x99	; 153
    28b0:	1f 4f       	sbci	r17, 0xFF	; 255
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	f8 01       	movw	r30, r16
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
    28c4:	1f c0       	rjmp	.+62     	; 0x2904 <main+0x542>
    28c6:	fe 01       	movw	r30, r28
    28c8:	eb 59       	subi	r30, 0x9B	; 155
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	88 ec       	ldi	r24, 0xC8	; 200
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	fe 01       	movw	r30, r28
    28d6:	eb 59       	subi	r30, 0x9B	; 155
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <main+0x51c>
    28e2:	fe 01       	movw	r30, r28
    28e4:	eb 59       	subi	r30, 0x9B	; 155
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	de 01       	movw	r26, r28
    28ee:	a9 59       	subi	r26, 0x99	; 153
    28f0:	bf 4f       	sbci	r27, 0xFF	; 255
    28f2:	fe 01       	movw	r30, r28
    28f4:	e9 59       	subi	r30, 0x99	; 153
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	11 96       	adiw	r26, 0x01	; 1
    2900:	9c 93       	st	X, r25
    2902:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	fe 01       	movw	r30, r28
    2906:	e9 59       	subi	r30, 0x99	; 153
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	d1 f6       	brne	.-76     	; 0x28c6 <main+0x504>
    2912:	27 c0       	rjmp	.+78     	; 0x2962 <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	8e 01       	movw	r16, r28
    2916:	09 59       	subi	r16, 0x99	; 153
    2918:	1f 4f       	sbci	r17, 0xFF	; 255
    291a:	fe 01       	movw	r30, r28
    291c:	e7 59       	subi	r30, 0x97	; 151
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    2936:	de 01       	movw	r26, r28
    2938:	ad 59       	subi	r26, 0x9D	; 157
    293a:	bf 4f       	sbci	r27, 0xFF	; 255
    293c:	fe 01       	movw	r30, r28
    293e:	e9 59       	subi	r30, 0x99	; 153
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	8d 93       	st	X+, r24
    2948:	9c 93       	st	X, r25
    294a:	fe 01       	movw	r30, r28
    294c:	ed 59       	subi	r30, 0x9D	; 157
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0x592>
    2958:	fe 01       	movw	r30, r28
    295a:	ed 59       	subi	r30, 0x9D	; 157
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
			for(int l = 0 ; l < 5 ; l++){

				UART_sendByte(key_one[l]);
				_delay_ms(50);
			}
			for(int i = 0 ; i < 5 ; i++){
    2962:	de 01       	movw	r26, r28
    2964:	af 56       	subi	r26, 0x6F	; 111
    2966:	bf 4f       	sbci	r27, 0xFF	; 255
    2968:	fe 01       	movw	r30, r28
    296a:	ef 56       	subi	r30, 0x6F	; 111
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	11 96       	adiw	r26, 0x01	; 1
    2976:	9c 93       	st	X, r25
    2978:	8e 93       	st	-X, r24
    297a:	fe 01       	movw	r30, r28
    297c:	ef 56       	subi	r30, 0x6F	; 111
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	85 30       	cpi	r24, 0x05	; 5
    2986:	91 05       	cpc	r25, r1
    2988:	0c f4       	brge	.+2      	; 0x298c <main+0x5ca>
    298a:	2a cf       	rjmp	.-428    	; 0x27e0 <main+0x41e>
				UART_sendByte(key_two[i]);
				_delay_ms(50);

			}
			match_cond = UART_recieveByte();
    298c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_recieveByte>
    2990:	fe 01       	movw	r30, r28
    2992:	e9 56       	subi	r30, 0x69	; 105
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 83       	st	Z, r24
    2998:	fe 01       	movw	r30, r28
    299a:	e1 5a       	subi	r30, 0xA1	; 161
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a8 e4       	ldi	r26, 0x48	; 72
    29a4:	b2 e4       	ldi	r27, 0x42	; 66
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	8e 01       	movw	r16, r28
    29b0:	05 5a       	subi	r16, 0xA5	; 165
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	e1 5a       	subi	r30, 0xA1	; 161
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29dc:	fe 01       	movw	r30, r28
    29de:	e5 5a       	subi	r30, 0xA5	; 165
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	44 f4       	brge	.+16     	; 0x2a0a <main+0x648>
		__ticks = 1;
    29fa:	fe 01       	movw	r30, r28
    29fc:	e7 5a       	subi	r30, 0xA7	; 167
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	64 c0       	rjmp	.+200    	; 0x2ad2 <main+0x710>
	else if (__tmp > 65535)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e5 5a       	subi	r30, 0xA5	; 165
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <main+0x668>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <main+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e1 5a       	subi	r30, 0xA1	; 161
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8e 01       	movw	r16, r28
    2a4a:	07 5a       	subi	r16, 0xA7	; 167
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	1f c0       	rjmp	.+62     	; 0x2aa0 <main+0x6de>
    2a62:	fe 01       	movw	r30, r28
    2a64:	e9 5a       	subi	r30, 0xA9	; 169
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	88 ec       	ldi	r24, 0xC8	; 200
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	fe 01       	movw	r30, r28
    2a72:	e9 5a       	subi	r30, 0xA9	; 169
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <main+0x6b8>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e9 5a       	subi	r30, 0xA9	; 169
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	de 01       	movw	r26, r28
    2a8a:	a7 5a       	subi	r26, 0xA7	; 167
    2a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e7 5a       	subi	r30, 0xA7	; 167
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e7 5a       	subi	r30, 0xA7	; 167
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	d1 f6       	brne	.-76     	; 0x2a62 <main+0x6a0>
    2aae:	28 c0       	rjmp	.+80     	; 0x2b00 <main+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	07 5a       	subi	r16, 0xA7	; 167
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e5 5a       	subi	r30, 0xA5	; 165
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	de 01       	movw	r26, r28
    2ad4:	ab 5a       	subi	r26, 0xAB	; 171
    2ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e7 5a       	subi	r30, 0xA7	; 167
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	9c 93       	st	X, r25
    2ae6:	8e 93       	st	-X, r24
    2ae8:	fe 01       	movw	r30, r28
    2aea:	eb 5a       	subi	r30, 0xAB	; 171
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <main+0x730>
    2af6:	fe 01       	movw	r30, r28
    2af8:	eb 5a       	subi	r30, 0xAB	; 171
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
			_delay_ms(50);
			if (match_cond == 0){
    2b00:	fe 01       	movw	r30, r28
    2b02:	e9 56       	subi	r30, 0x69	; 105
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <main+0x74c>
    2b0c:	11 c4       	rjmp	.+2082   	; 0x3330 <main+0xf6e>
    2b0e:	08 c4       	rjmp	.+2064   	; 0x3320 <main+0xf5e>
				while(StayInPlusMinus == yes ){
					StayInPlusMinus = no;
    2b10:	fe 01       	movw	r30, r28
    2b12:	e6 56       	subi	r30, 0x66	; 102
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	80 83       	st	Z, r24
				LCD_clearScreen();
    2b1a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"+ : Open Door");
    2b1e:	20 e7       	ldi	r18, 0x70	; 112
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	a9 01       	movw	r20, r18
    2b28:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2b2c:	2e e7       	ldi	r18, 0x7E	; 126
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	a9 01       	movw	r20, r18
    2b36:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayStringRowColumn>
				twoKey = KEYPAD_getPressedKey();
    2b3a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ea 56       	subi	r30, 0x6A	; 106
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	80 83       	st	Z, r24
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 5a       	subi	r30, 0xAF	; 175
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	aa ef       	ldi	r26, 0xFA	; 250
    2b52:	b3 e4       	ldi	r27, 0x43	; 67
    2b54:	80 83       	st	Z, r24
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	a2 83       	std	Z+2, r26	; 0x02
    2b5a:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	8e 01       	movw	r16, r28
    2b5e:	03 5b       	subi	r16, 0xB3	; 179
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	fe 01       	movw	r30, r28
    2b64:	ef 5a       	subi	r30, 0xAF	; 175
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a ef       	ldi	r20, 0xFA	; 250
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	f8 01       	movw	r30, r16
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e3 5b       	subi	r30, 0xB3	; 179
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	44 f4       	brge	.+16     	; 0x2bb8 <main+0x7f6>
		__ticks = 1;
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e5 5b       	subi	r30, 0xB5	; 181
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
    2bb6:	64 c0       	rjmp	.+200    	; 0x2c80 <main+0x8be>
	else if (__tmp > 65535)
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e3 5b       	subi	r30, 0xB3	; 179
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <main+0x816>
    2bd6:	43 c0       	rjmp	.+134    	; 0x2c5e <main+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ef 5a       	subi	r30, 0xAF	; 175
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8e 01       	movw	r16, r28
    2bf8:	05 5b       	subi	r16, 0xB5	; 181
    2bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	f8 01       	movw	r30, r16
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	1f c0       	rjmp	.+62     	; 0x2c4e <main+0x88c>
    2c10:	fe 01       	movw	r30, r28
    2c12:	e7 5b       	subi	r30, 0xB7	; 183
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	88 ec       	ldi	r24, 0xC8	; 200
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	80 83       	st	Z, r24
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e7 5b       	subi	r30, 0xB7	; 183
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <main+0x866>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e7 5b       	subi	r30, 0xB7	; 183
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	de 01       	movw	r26, r28
    2c38:	a5 5b       	subi	r26, 0xB5	; 181
    2c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e5 5b       	subi	r30, 0xB5	; 181
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	11 96       	adiw	r26, 0x01	; 1
    2c4a:	9c 93       	st	X, r25
    2c4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 5b       	subi	r30, 0xB5	; 181
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	d1 f6       	brne	.-76     	; 0x2c10 <main+0x84e>
    2c5c:	27 c0       	rjmp	.+78     	; 0x2cac <main+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	8e 01       	movw	r16, r28
    2c60:	05 5b       	subi	r16, 0xB5	; 181
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	fe 01       	movw	r30, r28
    2c66:	e3 5b       	subi	r30, 0xB3	; 179
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
    2c80:	de 01       	movw	r26, r28
    2c82:	a9 5b       	subi	r26, 0xB9	; 185
    2c84:	bf 4f       	sbci	r27, 0xFF	; 255
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 5b       	subi	r30, 0xB5	; 181
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	8d 93       	st	X+, r24
    2c92:	9c 93       	st	X, r25
    2c94:	fe 01       	movw	r30, r28
    2c96:	e9 5b       	subi	r30, 0xB9	; 185
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <main+0x8dc>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e9 5b       	subi	r30, 0xB9	; 185
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
				_delay_ms(500);
				UART_sendByte(twoKey);
    2cac:	fe 01       	movw	r30, r28
    2cae:	ea 56       	subi	r30, 0x6A	; 106
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_sendByte>
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 5b       	subi	r30, 0xBD	; 189
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a8 e4       	ldi	r26, 0x48	; 72
    2cc4:	b2 e4       	ldi	r27, 0x42	; 66
    2cc6:	80 83       	st	Z, r24
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	a2 83       	std	Z+2, r26	; 0x02
    2ccc:	b3 83       	std	Z+3, r27	; 0x03
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cce:	8e 01       	movw	r16, r28
    2cd0:	01 5c       	subi	r16, 0xC1	; 193
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ed 5b       	subi	r30, 0xBD	; 189
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	60 81       	ld	r22, Z
    2cdc:	71 81       	ldd	r23, Z+1	; 0x01
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	80 83       	st	Z, r24
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	a2 83       	std	Z+2, r26	; 0x02
    2cfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ff 96       	adiw	r30, 0x3f	; 63
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <main+0x960>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9e af       	std	Y+62, r25	; 0x3e
    2d1e:	8d af       	std	Y+61, r24	; 0x3d
    2d20:	46 c0       	rjmp	.+140    	; 0x2dae <main+0x9ec>
	else if (__tmp > 65535)
    2d22:	fe 01       	movw	r30, r28
    2d24:	ff 96       	adiw	r30, 0x3f	; 63
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	64 f5       	brge	.+88     	; 0x2d96 <main+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ed 5b       	subi	r30, 0xBD	; 189
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e af       	std	Y+62, r25	; 0x3e
    2d6a:	8d af       	std	Y+61, r24	; 0x3d
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <main+0x9ca>
    2d6e:	88 ec       	ldi	r24, 0xC8	; 200
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9c af       	std	Y+60, r25	; 0x3c
    2d74:	8b af       	std	Y+59, r24	; 0x3b
    2d76:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d78:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x9b8>
    2d7e:	9c af       	std	Y+60, r25	; 0x3c
    2d80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9e af       	std	Y+62, r25	; 0x3e
    2d8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <main+0x9ac>
    2d94:	16 c0       	rjmp	.+44     	; 0x2dc2 <main+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	fe 01       	movw	r30, r28
    2d98:	ff 96       	adiw	r30, 0x3f	; 63
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e af       	std	Y+62, r25	; 0x3e
    2dac:	8d af       	std	Y+61, r24	; 0x3d
    2dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db2:	9a af       	std	Y+58, r25	; 0x3a
    2db4:	89 af       	std	Y+57, r24	; 0x39
    2db6:	89 ad       	ldd	r24, Y+57	; 0x39
    2db8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <main+0x9f8>
    2dbe:	9a af       	std	Y+58, r25	; 0x3a
    2dc0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(twoKey == '+'){
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ea 56       	subi	r30, 0x6A	; 106
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	8b 32       	cpi	r24, 0x2B	; 43
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <main+0xa0e>
    2dce:	58 c1       	rjmp	.+688    	; 0x3080 <main+0xcbe>
					auth = pass_check(key_check);
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	8e 54       	subi	r24, 0x4E	; 78
    2dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd6:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <pass_check>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e8 56       	subi	r30, 0x68	; 104
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 83       	st	Z, r24
					cou = 0;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e7 56       	subi	r30, 0x67	; 103
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	10 82       	st	Z, r1
					LCD_clearScreen();
    2dea:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
    2dee:	86 c0       	rjmp	.+268    	; 0x2efc <main+0xb3a>
					//not match
					while(auth == 1 && cou < 2){
								LCD_clearScreen();
    2df0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a8 e4       	ldi	r26, 0x48	; 72
    2dfa:	b2 e4       	ldi	r27, 0x42	; 66
    2dfc:	8d ab       	std	Y+53, r24	; 0x35
    2dfe:	9e ab       	std	Y+54, r25	; 0x36
    2e00:	af ab       	std	Y+55, r26	; 0x37
    2e02:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	6d a9       	ldd	r22, Y+53	; 0x35
    2e06:	7e a9       	ldd	r23, Y+54	; 0x36
    2e08:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a ef       	ldi	r20, 0xFA	; 250
    2e12:	54 e4       	ldi	r21, 0x44	; 68
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	89 ab       	std	Y+49, r24	; 0x31
    2e1e:	9a ab       	std	Y+50, r25	; 0x32
    2e20:	ab ab       	std	Y+51, r26	; 0x33
    2e22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e24:	69 a9       	ldd	r22, Y+49	; 0x31
    2e26:	7a a9       	ldd	r23, Y+50	; 0x32
    2e28:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <main+0xa84>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	98 ab       	std	Y+48, r25	; 0x30
    2e42:	8f a7       	std	Y+47, r24	; 0x2f
    2e44:	3f c0       	rjmp	.+126    	; 0x2ec4 <main+0xb02>
	else if (__tmp > 65535)
    2e46:	69 a9       	ldd	r22, Y+49	; 0x31
    2e48:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	4c f5       	brge	.+82     	; 0x2eb0 <main+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e60:	7e a9       	ldd	r23, Y+54	; 0x36
    2e62:	8f a9       	ldd	r24, Y+55	; 0x37
    2e64:	98 ad       	ldd	r25, Y+56	; 0x38
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	98 ab       	std	Y+48, r25	; 0x30
    2e84:	8f a7       	std	Y+47, r24	; 0x2f
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <main+0xae4>
    2e88:	88 ec       	ldi	r24, 0xC8	; 200
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9e a7       	std	Y+46, r25	; 0x2e
    2e8e:	8d a7       	std	Y+45, r24	; 0x2d
    2e90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <main+0xad2>
    2e98:	9e a7       	std	Y+46, r25	; 0x2e
    2e9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	98 ab       	std	Y+48, r25	; 0x30
    2ea4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f7       	brne	.-38     	; 0x2e88 <main+0xac6>
    2eae:	14 c0       	rjmp	.+40     	; 0x2ed8 <main+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2eb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	98 ab       	std	Y+48, r25	; 0x30
    2ec2:	8f a7       	std	Y+47, r24	; 0x2f
    2ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec8:	9c a7       	std	Y+44, r25	; 0x2c
    2eca:	8b a7       	std	Y+43, r24	; 0x2b
    2ecc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ece:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <main+0xb0e>
    2ed4:	9c a7       	std	Y+44, r25	; 0x2c
    2ed6:	8b a7       	std	Y+43, r24	; 0x2b

								_delay_ms(50);
								auth = pass_check(key_check);
    2ed8:	ce 01       	movw	r24, r28
    2eda:	8e 54       	subi	r24, 0x4E	; 78
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ede:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <pass_check>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e8 56       	subi	r30, 0x68	; 104
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 83       	st	Z, r24
								cou++;
    2eea:	de 01       	movw	r26, r28
    2eec:	a7 56       	subi	r26, 0x67	; 103
    2eee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e7 56       	subi	r30, 0x67	; 103
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	8c 93       	st	X, r24
				if(twoKey == '+'){
					auth = pass_check(key_check);
					cou = 0;
					LCD_clearScreen();
					//not match
					while(auth == 1 && cou < 2){
    2efc:	fe 01       	movw	r30, r28
    2efe:	e8 56       	subi	r30, 0x68	; 104
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	39 f4       	brne	.+14     	; 0x2f16 <main+0xb54>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e7 56       	subi	r30, 0x67	; 103
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <main+0xb54>
    2f14:	6d cf       	rjmp	.-294    	; 0x2df0 <main+0xa2e>

								_delay_ms(50);
								auth = pass_check(key_check);
								cou++;
							}
					if(cou >= 2){
    2f16:	fe 01       	movw	r30, r28
    2f18:	e7 56       	subi	r30, 0x67	; 103
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	82 30       	cpi	r24, 0x02	; 2
    2f20:	08 f4       	brcc	.+2      	; 0x2f24 <main+0xb62>
    2f22:	97 c0       	rjmp	.+302    	; 0x3052 <main+0xc90>
								LCD_clearScreen();
    2f24:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
								LCD_displayString("ERROR!!");
    2f28:	8e e8       	ldi	r24, 0x8E	; 142
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
								for (int i = 0 ; i<10 ; i++){
    2f30:	fe 01       	movw	r30, r28
    2f32:	e1 57       	subi	r30, 0x71	; 113
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	11 82       	std	Z+1, r1	; 0x01
    2f38:	10 82       	st	Z, r1
    2f3a:	7e c0       	rjmp	.+252    	; 0x3038 <main+0xc76>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e8       	ldi	r25, 0x80	; 128
    2f40:	ab eb       	ldi	r26, 0xBB	; 187
    2f42:	b5 e4       	ldi	r27, 0x45	; 69
    2f44:	8f a3       	std	Y+39, r24	; 0x27
    2f46:	98 a7       	std	Y+40, r25	; 0x28
    2f48:	a9 a7       	std	Y+41, r26	; 0x29
    2f4a:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f50:	89 a5       	ldd	r24, Y+41	; 0x29
    2f52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	4a ef       	ldi	r20, 0xFA	; 250
    2f5a:	54 e4       	ldi	r21, 0x44	; 68
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	8b a3       	std	Y+35, r24	; 0x23
    2f66:	9c a3       	std	Y+36, r25	; 0x24
    2f68:	ad a3       	std	Y+37, r26	; 0x25
    2f6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f70:	8d a1       	ldd	r24, Y+37	; 0x25
    2f72:	9e a1       	ldd	r25, Y+38	; 0x26
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e8       	ldi	r20, 0x80	; 128
    2f7a:	5f e3       	ldi	r21, 0x3F	; 63
    2f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f80:	88 23       	and	r24, r24
    2f82:	2c f4       	brge	.+10     	; 0x2f8e <main+0xbcc>
		__ticks = 1;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9a a3       	std	Y+34, r25	; 0x22
    2f8a:	89 a3       	std	Y+33, r24	; 0x21
    2f8c:	3f c0       	rjmp	.+126    	; 0x300c <main+0xc4a>
	else if (__tmp > 65535)
    2f8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f90:	7c a1       	ldd	r23, Y+36	; 0x24
    2f92:	8d a1       	ldd	r24, Y+37	; 0x25
    2f94:	9e a1       	ldd	r25, Y+38	; 0x26
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	3f ef       	ldi	r19, 0xFF	; 255
    2f9a:	4f e7       	ldi	r20, 0x7F	; 127
    2f9c:	57 e4       	ldi	r21, 0x47	; 71
    2f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	4c f5       	brge	.+82     	; 0x2ff8 <main+0xc36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa8:	78 a5       	ldd	r23, Y+40	; 0x28
    2faa:	89 a5       	ldd	r24, Y+41	; 0x29
    2fac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e2       	ldi	r20, 0x20	; 32
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9a a3       	std	Y+34, r25	; 0x22
    2fcc:	89 a3       	std	Y+33, r24	; 0x21
    2fce:	0f c0       	rjmp	.+30     	; 0x2fee <main+0xc2c>
    2fd0:	88 ec       	ldi	r24, 0xC8	; 200
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	98 a3       	std	Y+32, r25	; 0x20
    2fd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2fd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fda:	98 a1       	ldd	r25, Y+32	; 0x20
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <main+0xc1a>
    2fe0:	98 a3       	std	Y+32, r25	; 0x20
    2fe2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	9a a3       	std	Y+34, r25	; 0x22
    2fec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	69 f7       	brne	.-38     	; 0x2fd0 <main+0xc0e>
    2ff6:	14 c0       	rjmp	.+40     	; 0x3020 <main+0xc5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9a a3       	std	Y+34, r25	; 0x22
    300a:	89 a3       	std	Y+33, r24	; 0x21
    300c:	89 a1       	ldd	r24, Y+33	; 0x21
    300e:	9a a1       	ldd	r25, Y+34	; 0x22
    3010:	9e 8f       	std	Y+30, r25	; 0x1e
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
    3014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3016:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <main+0xc56>
    301c:	9e 8f       	std	Y+30, r25	; 0x1e
    301e:	8d 8f       	std	Y+29, r24	; 0x1d
    3020:	de 01       	movw	r26, r28
    3022:	a1 57       	subi	r26, 0x71	; 113
    3024:	bf 4f       	sbci	r27, 0xFF	; 255
    3026:	fe 01       	movw	r30, r28
    3028:	e1 57       	subi	r30, 0x71	; 113
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 96       	adiw	r24, 0x01	; 1
    3032:	11 96       	adiw	r26, 0x01	; 1
    3034:	9c 93       	st	X, r25
    3036:	8e 93       	st	-X, r24
    3038:	fe 01       	movw	r30, r28
    303a:	e1 57       	subi	r30, 0x71	; 113
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	8a 30       	cpi	r24, 0x0A	; 10
    3044:	91 05       	cpc	r25, r1
    3046:	0c f4       	brge	.+2      	; 0x304a <main+0xc88>
    3048:	79 cf       	rjmp	.-270    	; 0x2f3c <main+0xb7a>
								_delay_ms(6000);
								}
								StayInPlusMinus = yes;
    304a:	fe 01       	movw	r30, r28
    304c:	e6 56       	subi	r30, 0x66	; 102
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	10 82       	st	Z, r1
							}
							//match
					if(auth == 0){
    3052:	fe 01       	movw	r30, r28
    3054:	e8 56       	subi	r30, 0x68	; 104
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	09 f0       	breq	.+2      	; 0x3060 <main+0xc9e>
    305e:	60 c1       	rjmp	.+704    	; 0x3320 <main+0xf5e>
								LCD_clearScreen();
    3060:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
								LCD_displayString("Door is unlocking!!");
    3064:	86 e9       	ldi	r24, 0x96	; 150
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
								Timer1_setCallBack(door_unlock);
    306c:	84 ec       	ldi	r24, 0xC4	; 196
    306e:	91 e1       	ldi	r25, 0x11	; 17
    3070:	0e 94 be 07 	call	0xf7c	; 0xf7c <Timer1_setCallBack>
								Timer1_init(&time_conf);
    3074:	ce 01       	movw	r24, r28
    3076:	8e 55       	subi	r24, 0x5E	; 94
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	0e 94 60 07 	call	0xec0	; 0xec0 <Timer1_init>
    307e:	50 c1       	rjmp	.+672    	; 0x3320 <main+0xf5e>
							}

				}else if(twoKey == '-'){
    3080:	fe 01       	movw	r30, r28
    3082:	ea 56       	subi	r30, 0x6A	; 106
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	8d 32       	cpi	r24, 0x2D	; 45
    308a:	09 f0       	breq	.+2      	; 0x308e <main+0xccc>
    308c:	49 c1       	rjmp	.+658    	; 0x3320 <main+0xf5e>
						cou =0;
    308e:	fe 01       	movw	r30, r28
    3090:	e7 56       	subi	r30, 0x67	; 103
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	10 82       	st	Z, r1
						auth = pass_check(key_check);
    3096:	ce 01       	movw	r24, r28
    3098:	8e 54       	subi	r24, 0x4E	; 78
    309a:	9f 4f       	sbci	r25, 0xFF	; 255
    309c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <pass_check>
    30a0:	fe 01       	movw	r30, r28
    30a2:	e8 56       	subi	r30, 0x68	; 104
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 83       	st	Z, r24
    30a8:	86 c0       	rjmp	.+268    	; 0x31b6 <main+0xdf4>
						//not match
						while(auth == 1 && cou < 2){
							LCD_clearScreen();
    30aa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	a8 e4       	ldi	r26, 0x48	; 72
    30b4:	b2 e4       	ldi	r27, 0x42	; 66
    30b6:	89 8f       	std	Y+25, r24	; 0x19
    30b8:	9a 8f       	std	Y+26, r25	; 0x1a
    30ba:	ab 8f       	std	Y+27, r26	; 0x1b
    30bc:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	69 8d       	ldd	r22, Y+25	; 0x19
    30c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a ef       	ldi	r20, 0xFA	; 250
    30cc:	54 e4       	ldi	r21, 0x44	; 68
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8d 8b       	std	Y+21, r24	; 0x15
    30d8:	9e 8b       	std	Y+22, r25	; 0x16
    30da:	af 8b       	std	Y+23, r26	; 0x17
    30dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30de:	6d 89       	ldd	r22, Y+21	; 0x15
    30e0:	7e 89       	ldd	r23, Y+22	; 0x16
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <main+0xd3e>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9c 8b       	std	Y+20, r25	; 0x14
    30fc:	8b 8b       	std	Y+19, r24	; 0x13
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <main+0xdbc>
	else if (__tmp > 65535)
    3100:	6d 89       	ldd	r22, Y+21	; 0x15
    3102:	7e 89       	ldd	r23, Y+22	; 0x16
    3104:	8f 89       	ldd	r24, Y+23	; 0x17
    3106:	98 8d       	ldd	r25, Y+24	; 0x18
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <main+0xda8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	69 8d       	ldd	r22, Y+25	; 0x19
    311a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    311c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    311e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9c 8b       	std	Y+20, r25	; 0x14
    313e:	8b 8b       	std	Y+19, r24	; 0x13
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <main+0xd9e>
    3142:	88 ec       	ldi	r24, 0xC8	; 200
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9a 8b       	std	Y+18, r25	; 0x12
    3148:	89 8b       	std	Y+17, r24	; 0x11
    314a:	89 89       	ldd	r24, Y+17	; 0x11
    314c:	9a 89       	ldd	r25, Y+18	; 0x12
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <main+0xd8c>
    3152:	9a 8b       	std	Y+18, r25	; 0x12
    3154:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	8b 89       	ldd	r24, Y+19	; 0x13
    3158:	9c 89       	ldd	r25, Y+20	; 0x14
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9c 8b       	std	Y+20, r25	; 0x14
    315e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	8b 89       	ldd	r24, Y+19	; 0x13
    3162:	9c 89       	ldd	r25, Y+20	; 0x14
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <main+0xd80>
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <main+0xdd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	6d 89       	ldd	r22, Y+21	; 0x15
    316c:	7e 89       	ldd	r23, Y+22	; 0x16
    316e:	8f 89       	ldd	r24, Y+23	; 0x17
    3170:	98 8d       	ldd	r25, Y+24	; 0x18
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
    317e:	8b 89       	ldd	r24, Y+19	; 0x13
    3180:	9c 89       	ldd	r25, Y+20	; 0x14
    3182:	98 8b       	std	Y+16, r25	; 0x10
    3184:	8f 87       	std	Y+15, r24	; 0x0f
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	98 89       	ldd	r25, Y+16	; 0x10
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <main+0xdc8>
    318e:	98 8b       	std	Y+16, r25	; 0x10
    3190:	8f 87       	std	Y+15, r24	; 0x0f

							_delay_ms(50);
							auth = pass_check(key_check);
    3192:	ce 01       	movw	r24, r28
    3194:	8e 54       	subi	r24, 0x4E	; 78
    3196:	9f 4f       	sbci	r25, 0xFF	; 255
    3198:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <pass_check>
    319c:	fe 01       	movw	r30, r28
    319e:	e8 56       	subi	r30, 0x68	; 104
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	80 83       	st	Z, r24
							cou++;
    31a4:	de 01       	movw	r26, r28
    31a6:	a7 56       	subi	r26, 0x67	; 103
    31a8:	bf 4f       	sbci	r27, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	e7 56       	subi	r30, 0x67	; 103
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	8c 93       	st	X, r24

				}else if(twoKey == '-'){
						cou =0;
						auth = pass_check(key_check);
						//not match
						while(auth == 1 && cou < 2){
    31b6:	fe 01       	movw	r30, r28
    31b8:	e8 56       	subi	r30, 0x68	; 104
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	39 f4       	brne	.+14     	; 0x31d0 <main+0xe0e>
    31c2:	fe 01       	movw	r30, r28
    31c4:	e7 56       	subi	r30, 0x67	; 103
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	80 81       	ld	r24, Z
    31ca:	82 30       	cpi	r24, 0x02	; 2
    31cc:	08 f4       	brcc	.+2      	; 0x31d0 <main+0xe0e>
    31ce:	6d cf       	rjmp	.-294    	; 0x30aa <main+0xce8>

							_delay_ms(50);
							auth = pass_check(key_check);
							cou++;
						}
						if(cou >= 2){
    31d0:	fe 01       	movw	r30, r28
    31d2:	e7 56       	subi	r30, 0x67	; 103
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	82 30       	cpi	r24, 0x02	; 2
    31da:	08 f4       	brcc	.+2      	; 0x31de <main+0xe1c>
    31dc:	97 c0       	rjmp	.+302    	; 0x330c <main+0xf4a>
							LCD_clearScreen();
    31de:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
							LCD_displayString("ERROR!!");
    31e2:	8e e8       	ldi	r24, 0x8E	; 142
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
							for (int i = 0 ; i<10 ; i++){
    31ea:	fe 01       	movw	r30, r28
    31ec:	e3 57       	subi	r30, 0x73	; 115
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	11 82       	std	Z+1, r1	; 0x01
    31f2:	10 82       	st	Z, r1
    31f4:	7e c0       	rjmp	.+252    	; 0x32f2 <main+0xf30>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e8       	ldi	r25, 0x80	; 128
    31fa:	ab eb       	ldi	r26, 0xBB	; 187
    31fc:	b5 e4       	ldi	r27, 0x45	; 69
    31fe:	8b 87       	std	Y+11, r24	; 0x0b
    3200:	9c 87       	std	Y+12, r25	; 0x0c
    3202:	ad 87       	std	Y+13, r26	; 0x0d
    3204:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3206:	6b 85       	ldd	r22, Y+11	; 0x0b
    3208:	7c 85       	ldd	r23, Y+12	; 0x0c
    320a:	8d 85       	ldd	r24, Y+13	; 0x0d
    320c:	9e 85       	ldd	r25, Y+14	; 0x0e
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a ef       	ldi	r20, 0xFA	; 250
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	8f 83       	std	Y+7, r24	; 0x07
    3220:	98 87       	std	Y+8, r25	; 0x08
    3222:	a9 87       	std	Y+9, r26	; 0x09
    3224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3226:	6f 81       	ldd	r22, Y+7	; 0x07
    3228:	78 85       	ldd	r23, Y+8	; 0x08
    322a:	89 85       	ldd	r24, Y+9	; 0x09
    322c:	9a 85       	ldd	r25, Y+10	; 0x0a
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <main+0xe86>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	3f c0       	rjmp	.+126    	; 0x32c6 <main+0xf04>
	else if (__tmp > 65535)
    3248:	6f 81       	ldd	r22, Y+7	; 0x07
    324a:	78 85       	ldd	r23, Y+8	; 0x08
    324c:	89 85       	ldd	r24, Y+9	; 0x09
    324e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	4c f5       	brge	.+82     	; 0x32b2 <main+0xef0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <main+0xee6>
    328a:	88 ec       	ldi	r24, 0xC8	; 200
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 83       	std	Y+4, r25	; 0x04
    3290:	8b 83       	std	Y+3, r24	; 0x03
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <main+0xed4>
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	9e 83       	std	Y+6, r25	; 0x06
    32a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a8:	8d 81       	ldd	r24, Y+5	; 0x05
    32aa:	9e 81       	ldd	r25, Y+6	; 0x06
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	69 f7       	brne	.-38     	; 0x328a <main+0xec8>
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <main+0xf18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b2:	6f 81       	ldd	r22, Y+7	; 0x07
    32b4:	78 85       	ldd	r23, Y+8	; 0x08
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	9a 81       	ldd	r25, Y+2	; 0x02
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <main+0xf10>
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	de 01       	movw	r26, r28
    32dc:	a3 57       	subi	r26, 0x73	; 115
    32de:	bf 4f       	sbci	r27, 0xFF	; 255
    32e0:	fe 01       	movw	r30, r28
    32e2:	e3 57       	subi	r30, 0x73	; 115
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	11 96       	adiw	r26, 0x01	; 1
    32ee:	9c 93       	st	X, r25
    32f0:	8e 93       	st	-X, r24
    32f2:	fe 01       	movw	r30, r28
    32f4:	e3 57       	subi	r30, 0x73	; 115
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
    32fa:	91 81       	ldd	r25, Z+1	; 0x01
    32fc:	8a 30       	cpi	r24, 0x0A	; 10
    32fe:	91 05       	cpc	r25, r1
    3300:	0c f4       	brge	.+2      	; 0x3304 <main+0xf42>
    3302:	79 cf       	rjmp	.-270    	; 0x31f6 <main+0xe34>
							_delay_ms(6000);
							}
							StayInPlusMinus = yes;
    3304:	fe 01       	movw	r30, r28
    3306:	e6 56       	subi	r30, 0x66	; 102
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	10 82       	st	Z, r1
						}
						//match
						if(auth == 0){
    330c:	fe 01       	movw	r30, r28
    330e:	e8 56       	subi	r30, 0x68	; 104
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	88 23       	and	r24, r24
    3316:	21 f4       	brne	.+8      	; 0x3320 <main+0xf5e>
							LCD_clearScreen();
    3318:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
							ProgramFinish = 0;
    331c:	10 92 e4 00 	sts	0x00E4, r1

			}
			match_cond = UART_recieveByte();
			_delay_ms(50);
			if (match_cond == 0){
				while(StayInPlusMinus == yes ){
    3320:	fe 01       	movw	r30, r28
    3322:	e6 56       	subi	r30, 0x66	; 102
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 81       	ld	r24, Z
    3328:	88 23       	and	r24, r24
    332a:	09 f4       	brne	.+2      	; 0x332e <main+0xf6c>
    332c:	f1 cb       	rjmp	.-2078   	; 0x2b10 <main+0x74e>
    332e:	9b c8       	rjmp	.-3786   	; 0x2466 <main+0xa4>
						}
				}

			}
			}else{
				LCD_clearScreen();
    3330:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
				ProgramFinish = 0;
    3334:	10 92 e4 00 	sts	0x00E4, r1
    3338:	96 c8       	rjmp	.-3796   	; 0x2466 <main+0xa4>

0000333a <pass_creation>:
}




void pass_creation(uint8 * key_one,uint8 * key_two ){
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	a3 97       	sbiw	r28, 0x23	; 35
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	99 a3       	std	Y+33, r25	; 0x21
    3350:	88 a3       	std	Y+32, r24	; 0x20
    3352:	7b a3       	std	Y+35, r23	; 0x23
    3354:	6a a3       	std	Y+34, r22	; 0x22
			uint8 key;
			uint8 i = 0;
    3356:	1e 8e       	std	Y+30, r1	; 0x1e
			uint8 j = 0;
    3358:	1d 8e       	std	Y+29, r1	; 0x1d
			LCD_clearScreen();
    335a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    335e:	2a ea       	ldi	r18, 0xAA	; 170
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	a9 01       	movw	r20, r18
    3368:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayStringRowColumn>
	    	LCD_moveCursor(1,0);
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_moveCursor>
    3374:	89 c0       	rjmp	.+274    	; 0x3488 <pass_creation+0x14e>
			while(i<5){
				key = KEYPAD_getPressedKey();
    3376:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    337a:	8f 8f       	std	Y+31, r24	; 0x1f
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	aa ef       	ldi	r26, 0xFA	; 250
    3382:	b3 e4       	ldi	r27, 0x43	; 67
    3384:	89 8f       	std	Y+25, r24	; 0x19
    3386:	9a 8f       	std	Y+26, r25	; 0x1a
    3388:	ab 8f       	std	Y+27, r26	; 0x1b
    338a:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338c:	69 8d       	ldd	r22, Y+25	; 0x19
    338e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	4a ef       	ldi	r20, 0xFA	; 250
    339a:	54 e4       	ldi	r21, 0x44	; 68
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8d 8b       	std	Y+21, r24	; 0x15
    33a6:	9e 8b       	std	Y+22, r25	; 0x16
    33a8:	af 8b       	std	Y+23, r26	; 0x17
    33aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ac:	6d 89       	ldd	r22, Y+21	; 0x15
    33ae:	7e 89       	ldd	r23, Y+22	; 0x16
    33b0:	8f 89       	ldd	r24, Y+23	; 0x17
    33b2:	98 8d       	ldd	r25, Y+24	; 0x18
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e8       	ldi	r20, 0x80	; 128
    33ba:	5f e3       	ldi	r21, 0x3F	; 63
    33bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c0:	88 23       	and	r24, r24
    33c2:	2c f4       	brge	.+10     	; 0x33ce <pass_creation+0x94>
		__ticks = 1;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 8b       	std	Y+20, r25	; 0x14
    33ca:	8b 8b       	std	Y+19, r24	; 0x13
    33cc:	3f c0       	rjmp	.+126    	; 0x344c <pass_creation+0x112>
	else if (__tmp > 65535)
    33ce:	6d 89       	ldd	r22, Y+21	; 0x15
    33d0:	7e 89       	ldd	r23, Y+22	; 0x16
    33d2:	8f 89       	ldd	r24, Y+23	; 0x17
    33d4:	98 8d       	ldd	r25, Y+24	; 0x18
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	4c f5       	brge	.+82     	; 0x3438 <pass_creation+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e6:	69 8d       	ldd	r22, Y+25	; 0x19
    33e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
    340e:	0f c0       	rjmp	.+30     	; 0x342e <pass_creation+0xf4>
    3410:	88 ec       	ldi	r24, 0xC8	; 200
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	9a 8b       	std	Y+18, r25	; 0x12
    3416:	89 8b       	std	Y+17, r24	; 0x11
    3418:	89 89       	ldd	r24, Y+17	; 0x11
    341a:	9a 89       	ldd	r25, Y+18	; 0x12
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <pass_creation+0xe2>
    3420:	9a 8b       	std	Y+18, r25	; 0x12
    3422:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	69 f7       	brne	.-38     	; 0x3410 <pass_creation+0xd6>
    3436:	14 c0       	rjmp	.+40     	; 0x3460 <pass_creation+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	6d 89       	ldd	r22, Y+21	; 0x15
    343a:	7e 89       	ldd	r23, Y+22	; 0x16
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9c 8b       	std	Y+20, r25	; 0x14
    344a:	8b 8b       	std	Y+19, r24	; 0x13
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	98 8b       	std	Y+16, r25	; 0x10
    3452:	8f 87       	std	Y+15, r24	; 0x0f
    3454:	8f 85       	ldd	r24, Y+15	; 0x0f
    3456:	98 89       	ldd	r25, Y+16	; 0x10
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <pass_creation+0x11e>
    345c:	98 8b       	std	Y+16, r25	; 0x10
    345e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500); /* Press time */
				if((key <= 9) && (key >= 0))
    3460:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3462:	8a 30       	cpi	r24, 0x0A	; 10
    3464:	70 f4       	brcc	.+28     	; 0x3482 <pass_creation+0x148>
						{
							LCD_displayString("*");
    3466:	8a eb       	ldi	r24, 0xBA	; 186
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
							key_one[i]=key;
    346e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	88 a1       	ldd	r24, Y+32	; 0x20
    3476:	99 a1       	ldd	r25, Y+33	; 0x21
    3478:	fc 01       	movw	r30, r24
    347a:	e2 0f       	add	r30, r18
    347c:	f3 1f       	adc	r31, r19
    347e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3480:	80 83       	st	Z, r24
						}

						i++;
    3482:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3484:	8f 5f       	subi	r24, 0xFF	; 255
    3486:	8e 8f       	std	Y+30, r24	; 0x1e
			uint8 i = 0;
			uint8 j = 0;
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Plz enter pass:");
	    	LCD_moveCursor(1,0);
			while(i<5){
    3488:	8e 8d       	ldd	r24, Y+30	; 0x1e
    348a:	85 30       	cpi	r24, 0x05	; 5
    348c:	08 f4       	brcc	.+2      	; 0x3490 <pass_creation+0x156>
    348e:	73 cf       	rjmp	.-282    	; 0x3376 <pass_creation+0x3c>
							key_one[i]=key;
						}

						i++;
			}
			LCD_clearScreen();
    3490:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    3494:	8c eb       	ldi	r24, 0xBC	; 188
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"same pass:");
    349c:	2d ec       	ldi	r18, 0xCD	; 205
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	a9 01       	movw	r20, r18
    34a6:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayStringRowColumn>
    34aa:	89 c0       	rjmp	.+274    	; 0x35be <pass_creation+0x284>
			while(j<5){
					key = KEYPAD_getPressedKey();
    34ac:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    34b0:	8f 8f       	std	Y+31, r24	; 0x1f
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a8 ec       	ldi	r26, 0xC8	; 200
    34b8:	b3 e4       	ldi	r27, 0x43	; 67
    34ba:	8b 87       	std	Y+11, r24	; 0x0b
    34bc:	9c 87       	std	Y+12, r25	; 0x0c
    34be:	ad 87       	std	Y+13, r26	; 0x0d
    34c0:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a ef       	ldi	r20, 0xFA	; 250
    34d0:	54 e4       	ldi	r21, 0x44	; 68
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <pass_creation+0x1ca>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	3f c0       	rjmp	.+126    	; 0x3582 <pass_creation+0x248>
	else if (__tmp > 65535)
    3504:	6f 81       	ldd	r22, Y+7	; 0x07
    3506:	78 85       	ldd	r23, Y+8	; 0x08
    3508:	89 85       	ldd	r24, Y+9	; 0x09
    350a:	9a 85       	ldd	r25, Y+10	; 0x0a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	4c f5       	brge	.+82     	; 0x356e <pass_creation+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351c:	6b 85       	ldd	r22, Y+11	; 0x0b
    351e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3520:	8d 85       	ldd	r24, Y+13	; 0x0d
    3522:	9e 85       	ldd	r25, Y+14	; 0x0e
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	0f c0       	rjmp	.+30     	; 0x3564 <pass_creation+0x22a>
    3546:	88 ec       	ldi	r24, 0xC8	; 200
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <pass_creation+0x218>
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	69 f7       	brne	.-38     	; 0x3546 <pass_creation+0x20c>
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <pass_creation+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <pass_creation+0x254>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(400); /* Press time */
					if((key <= 9) && (key >= 0))
    3596:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3598:	8a 30       	cpi	r24, 0x0A	; 10
    359a:	70 f4       	brcc	.+28     	; 0x35b8 <pass_creation+0x27e>
							{
								LCD_displayString("*");
    359c:	8a eb       	ldi	r24, 0xBA	; 186
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
								key_two[j] = key;
    35a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a6:	28 2f       	mov	r18, r24
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	8a a1       	ldd	r24, Y+34	; 0x22
    35ac:	9b a1       	ldd	r25, Y+35	; 0x23
    35ae:	fc 01       	movw	r30, r24
    35b0:	e2 0f       	add	r30, r18
    35b2:	f3 1f       	adc	r31, r19
    35b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b6:	80 83       	st	Z, r24
							}

							j++;
    35b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ba:	8f 5f       	subi	r24, 0xFF	; 255
    35bc:	8d 8f       	std	Y+29, r24	; 0x1d
						i++;
			}
			LCD_clearScreen();
			LCD_displayString("Plz re-enter the");
			LCD_displayStringRowColumn(1,0,"same pass:");
			while(j<5){
    35be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35c0:	85 30       	cpi	r24, 0x05	; 5
    35c2:	08 f4       	brcc	.+2      	; 0x35c6 <pass_creation+0x28c>
    35c4:	73 cf       	rjmp	.-282    	; 0x34ac <pass_creation+0x172>
								key_two[j] = key;
							}

							j++;
			}
}
    35c6:	a3 96       	adiw	r28, 0x23	; 35
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <pass_check>:



uint8 pass_check(uint8 * key_check){
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	c0 54       	subi	r28, 0x40	; 64
    35e2:	d0 40       	sbci	r29, 0x00	; 0
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	fe 01       	movw	r30, r28
    35f0:	ff 96       	adiw	r30, 0x3f	; 63
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
	uint8 key;
	uint8 enter_key;
	uint8 i = 0;
    35f6:	1c ae       	std	Y+60, r1	; 0x3c
	uint8 match_cond = 0;
    35f8:	1b ae       	std	Y+59, r1	; 0x3b
	LCD_clearScreen();
    35fa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    35fe:	2a ea       	ldi	r18, 0xAA	; 170
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	a9 01       	movw	r20, r18
    3608:	0e 94 b5 0c 	call	0x196a	; 0x196a <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_moveCursor>
    3614:	8b c0       	rjmp	.+278    	; 0x372c <pass_check+0x154>
	while(i<5){
		key = KEYPAD_getPressedKey();
    3616:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    361a:	8e af       	std	Y+62, r24	; 0x3e
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	aa ef       	ldi	r26, 0xFA	; 250
    3622:	b3 e4       	ldi	r27, 0x43	; 67
    3624:	8d ab       	std	Y+53, r24	; 0x35
    3626:	9e ab       	std	Y+54, r25	; 0x36
    3628:	af ab       	std	Y+55, r26	; 0x37
    362a:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362c:	6d a9       	ldd	r22, Y+53	; 0x35
    362e:	7e a9       	ldd	r23, Y+54	; 0x36
    3630:	8f a9       	ldd	r24, Y+55	; 0x37
    3632:	98 ad       	ldd	r25, Y+56	; 0x38
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a ef       	ldi	r20, 0xFA	; 250
    363a:	54 e4       	ldi	r21, 0x44	; 68
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	89 ab       	std	Y+49, r24	; 0x31
    3646:	9a ab       	std	Y+50, r25	; 0x32
    3648:	ab ab       	std	Y+51, r26	; 0x33
    364a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    364c:	69 a9       	ldd	r22, Y+49	; 0x31
    364e:	7a a9       	ldd	r23, Y+50	; 0x32
    3650:	8b a9       	ldd	r24, Y+51	; 0x33
    3652:	9c a9       	ldd	r25, Y+52	; 0x34
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	2c f4       	brge	.+10     	; 0x366e <pass_check+0x96>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	98 ab       	std	Y+48, r25	; 0x30
    366a:	8f a7       	std	Y+47, r24	; 0x2f
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <pass_check+0x114>
	else if (__tmp > 65535)
    366e:	69 a9       	ldd	r22, Y+49	; 0x31
    3670:	7a a9       	ldd	r23, Y+50	; 0x32
    3672:	8b a9       	ldd	r24, Y+51	; 0x33
    3674:	9c a9       	ldd	r25, Y+52	; 0x34
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	3f ef       	ldi	r19, 0xFF	; 255
    367a:	4f e7       	ldi	r20, 0x7F	; 127
    367c:	57 e4       	ldi	r21, 0x47	; 71
    367e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3682:	18 16       	cp	r1, r24
    3684:	4c f5       	brge	.+82     	; 0x36d8 <pass_check+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	6d a9       	ldd	r22, Y+53	; 0x35
    3688:	7e a9       	ldd	r23, Y+54	; 0x36
    368a:	8f a9       	ldd	r24, Y+55	; 0x37
    368c:	98 ad       	ldd	r25, Y+56	; 0x38
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e2       	ldi	r20, 0x20	; 32
    3694:	51 e4       	ldi	r21, 0x41	; 65
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	98 ab       	std	Y+48, r25	; 0x30
    36ac:	8f a7       	std	Y+47, r24	; 0x2f
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <pass_check+0xf6>
    36b0:	88 ec       	ldi	r24, 0xC8	; 200
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	9e a7       	std	Y+46, r25	; 0x2e
    36b6:	8d a7       	std	Y+45, r24	; 0x2d
    36b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    36ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <pass_check+0xe4>
    36c0:	9e a7       	std	Y+46, r25	; 0x2e
    36c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c6:	98 a9       	ldd	r25, Y+48	; 0x30
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	98 ab       	std	Y+48, r25	; 0x30
    36cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d0:	98 a9       	ldd	r25, Y+48	; 0x30
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	69 f7       	brne	.-38     	; 0x36b0 <pass_check+0xd8>
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <pass_check+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	69 a9       	ldd	r22, Y+49	; 0x31
    36da:	7a a9       	ldd	r23, Y+50	; 0x32
    36dc:	8b a9       	ldd	r24, Y+51	; 0x33
    36de:	9c a9       	ldd	r25, Y+52	; 0x34
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	98 ab       	std	Y+48, r25	; 0x30
    36ea:	8f a7       	std	Y+47, r24	; 0x2f
    36ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ee:	98 a9       	ldd	r25, Y+48	; 0x30
    36f0:	9c a7       	std	Y+44, r25	; 0x2c
    36f2:	8b a7       	std	Y+43, r24	; 0x2b
    36f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <pass_check+0x120>
    36fc:	9c a7       	std	Y+44, r25	; 0x2c
    36fe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500); /* Press time */
		if((key <= 9) && (key >= 0))
    3700:	8e ad       	ldd	r24, Y+62	; 0x3e
    3702:	8a 30       	cpi	r24, 0x0A	; 10
    3704:	80 f4       	brcc	.+32     	; 0x3726 <pass_check+0x14e>
				{
					LCD_displayString("*");
    3706:	8a eb       	ldi	r24, 0xBA	; 186
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_displayString>
					key_check[i]=key;
    370e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	fe 01       	movw	r30, r28
    3716:	ff 96       	adiw	r30, 0x3f	; 63
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	fc 01       	movw	r30, r24
    371e:	e2 0f       	add	r30, r18
    3720:	f3 1f       	adc	r31, r19
    3722:	8e ad       	ldd	r24, Y+62	; 0x3e
    3724:	80 83       	st	Z, r24
				}

				i++;
    3726:	8c ad       	ldd	r24, Y+60	; 0x3c
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	8c af       	std	Y+60, r24	; 0x3c
	uint8 i = 0;
	uint8 match_cond = 0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
	LCD_moveCursor(1,0);
	while(i<5){
    372c:	8c ad       	ldd	r24, Y+60	; 0x3c
    372e:	85 30       	cpi	r24, 0x05	; 5
    3730:	08 f4       	brcc	.+2      	; 0x3734 <pass_check+0x15c>
    3732:	71 cf       	rjmp	.-286    	; 0x3616 <pass_check+0x3e>
					key_check[i]=key;
				}

				i++;
	}
	enter_key = KEYPAD_getPressedKey();
    3734:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_getPressedKey>
    3738:	8d af       	std	Y+61, r24	; 0x3d
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	aa ef       	ldi	r26, 0xFA	; 250
    3740:	b3 e4       	ldi	r27, 0x43	; 67
    3742:	8f a3       	std	Y+39, r24	; 0x27
    3744:	98 a7       	std	Y+40, r25	; 0x28
    3746:	a9 a7       	std	Y+41, r26	; 0x29
    3748:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    374a:	6f a1       	ldd	r22, Y+39	; 0x27
    374c:	78 a5       	ldd	r23, Y+40	; 0x28
    374e:	89 a5       	ldd	r24, Y+41	; 0x29
    3750:	9a a5       	ldd	r25, Y+42	; 0x2a
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	4a ef       	ldi	r20, 0xFA	; 250
    3758:	54 e4       	ldi	r21, 0x44	; 68
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8b a3       	std	Y+35, r24	; 0x23
    3764:	9c a3       	std	Y+36, r25	; 0x24
    3766:	ad a3       	std	Y+37, r26	; 0x25
    3768:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    376a:	6b a1       	ldd	r22, Y+35	; 0x23
    376c:	7c a1       	ldd	r23, Y+36	; 0x24
    376e:	8d a1       	ldd	r24, Y+37	; 0x25
    3770:	9e a1       	ldd	r25, Y+38	; 0x26
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e8       	ldi	r20, 0x80	; 128
    3778:	5f e3       	ldi	r21, 0x3F	; 63
    377a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    377e:	88 23       	and	r24, r24
    3780:	2c f4       	brge	.+10     	; 0x378c <pass_check+0x1b4>
		__ticks = 1;
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	9a a3       	std	Y+34, r25	; 0x22
    3788:	89 a3       	std	Y+33, r24	; 0x21
    378a:	3f c0       	rjmp	.+126    	; 0x380a <pass_check+0x232>
	else if (__tmp > 65535)
    378c:	6b a1       	ldd	r22, Y+35	; 0x23
    378e:	7c a1       	ldd	r23, Y+36	; 0x24
    3790:	8d a1       	ldd	r24, Y+37	; 0x25
    3792:	9e a1       	ldd	r25, Y+38	; 0x26
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	3f ef       	ldi	r19, 0xFF	; 255
    3798:	4f e7       	ldi	r20, 0x7F	; 127
    379a:	57 e4       	ldi	r21, 0x47	; 71
    379c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37a0:	18 16       	cp	r1, r24
    37a2:	4c f5       	brge	.+82     	; 0x37f6 <pass_check+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a4:	6f a1       	ldd	r22, Y+39	; 0x27
    37a6:	78 a5       	ldd	r23, Y+40	; 0x28
    37a8:	89 a5       	ldd	r24, Y+41	; 0x29
    37aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e2       	ldi	r20, 0x20	; 32
    37b2:	51 e4       	ldi	r21, 0x41	; 65
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	bc 01       	movw	r22, r24
    37be:	cd 01       	movw	r24, r26
    37c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	9a a3       	std	Y+34, r25	; 0x22
    37ca:	89 a3       	std	Y+33, r24	; 0x21
    37cc:	0f c0       	rjmp	.+30     	; 0x37ec <pass_check+0x214>
    37ce:	88 ec       	ldi	r24, 0xC8	; 200
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	98 a3       	std	Y+32, r25	; 0x20
    37d4:	8f 8f       	std	Y+31, r24	; 0x1f
    37d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37d8:	98 a1       	ldd	r25, Y+32	; 0x20
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	f1 f7       	brne	.-4      	; 0x37da <pass_check+0x202>
    37de:	98 a3       	std	Y+32, r25	; 0x20
    37e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e2:	89 a1       	ldd	r24, Y+33	; 0x21
    37e4:	9a a1       	ldd	r25, Y+34	; 0x22
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	9a a3       	std	Y+34, r25	; 0x22
    37ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ec:	89 a1       	ldd	r24, Y+33	; 0x21
    37ee:	9a a1       	ldd	r25, Y+34	; 0x22
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	69 f7       	brne	.-38     	; 0x37ce <pass_check+0x1f6>
    37f4:	14 c0       	rjmp	.+40     	; 0x381e <pass_check+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f6:	6b a1       	ldd	r22, Y+35	; 0x23
    37f8:	7c a1       	ldd	r23, Y+36	; 0x24
    37fa:	8d a1       	ldd	r24, Y+37	; 0x25
    37fc:	9e a1       	ldd	r25, Y+38	; 0x26
    37fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	9a a3       	std	Y+34, r25	; 0x22
    3808:	89 a3       	std	Y+33, r24	; 0x21
    380a:	89 a1       	ldd	r24, Y+33	; 0x21
    380c:	9a a1       	ldd	r25, Y+34	; 0x22
    380e:	9e 8f       	std	Y+30, r25	; 0x1e
    3810:	8d 8f       	std	Y+29, r24	; 0x1d
    3812:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3814:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	f1 f7       	brne	.-4      	; 0x3816 <pass_check+0x23e>
    381a:	9e 8f       	std	Y+30, r25	; 0x1e
    381c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	if (enter_key == '*' ){
    381e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3820:	8a 32       	cpi	r24, 0x2A	; 42
    3822:	09 f0       	breq	.+2      	; 0x3826 <pass_check+0x24e>
    3824:	01 c1       	rjmp	.+514    	; 0x3a28 <pass_check+0x450>
	for(int l = 0 ; l < 5 ; l++){
    3826:	1a ae       	std	Y+58, r1	; 0x3a
    3828:	19 ae       	std	Y+57, r1	; 0x39
    382a:	83 c0       	rjmp	.+262    	; 0x3932 <pass_check+0x35a>

			UART_sendByte(key_check[l]);
    382c:	29 ad       	ldd	r18, Y+57	; 0x39
    382e:	3a ad       	ldd	r19, Y+58	; 0x3a
    3830:	fe 01       	movw	r30, r28
    3832:	ff 96       	adiw	r30, 0x3f	; 63
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	fc 01       	movw	r30, r24
    383a:	e2 0f       	add	r30, r18
    383c:	f3 1f       	adc	r31, r19
    383e:	80 81       	ld	r24, Z
    3840:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_sendByte>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a8 e4       	ldi	r26, 0x48	; 72
    384a:	b2 e4       	ldi	r27, 0x42	; 66
    384c:	89 8f       	std	Y+25, r24	; 0x19
    384e:	9a 8f       	std	Y+26, r25	; 0x1a
    3850:	ab 8f       	std	Y+27, r26	; 0x1b
    3852:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8d 8b       	std	Y+21, r24	; 0x15
    386e:	9e 8b       	std	Y+22, r25	; 0x16
    3870:	af 8b       	std	Y+23, r26	; 0x17
    3872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3874:	6d 89       	ldd	r22, Y+21	; 0x15
    3876:	7e 89       	ldd	r23, Y+22	; 0x16
    3878:	8f 89       	ldd	r24, Y+23	; 0x17
    387a:	98 8d       	ldd	r25, Y+24	; 0x18
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <pass_check+0x2be>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <pass_check+0x33c>
	else if (__tmp > 65535)
    3896:	6d 89       	ldd	r22, Y+21	; 0x15
    3898:	7e 89       	ldd	r23, Y+22	; 0x16
    389a:	8f 89       	ldd	r24, Y+23	; 0x17
    389c:	98 8d       	ldd	r25, Y+24	; 0x18
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <pass_check+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	69 8d       	ldd	r22, Y+25	; 0x19
    38b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9c 8b       	std	Y+20, r25	; 0x14
    38d4:	8b 8b       	std	Y+19, r24	; 0x13
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <pass_check+0x31e>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
    38de:	89 8b       	std	Y+17, r24	; 0x11
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	9a 89       	ldd	r25, Y+18	; 0x12
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <pass_check+0x30c>
    38e8:	9a 8b       	std	Y+18, r25	; 0x12
    38ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9c 8b       	std	Y+20, r25	; 0x14
    38f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8b 89       	ldd	r24, Y+19	; 0x13
    38f8:	9c 89       	ldd	r25, Y+20	; 0x14
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <pass_check+0x300>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <pass_check+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	8b 89       	ldd	r24, Y+19	; 0x13
    3916:	9c 89       	ldd	r25, Y+20	; 0x14
    3918:	98 8b       	std	Y+16, r25	; 0x10
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	98 89       	ldd	r25, Y+16	; 0x10
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <pass_check+0x348>
    3924:	98 8b       	std	Y+16, r25	; 0x10
    3926:	8f 87       	std	Y+15, r24	; 0x0f
				i++;
	}
	enter_key = KEYPAD_getPressedKey();
	_delay_ms(500);
	if (enter_key == '*' ){
	for(int l = 0 ; l < 5 ; l++){
    3928:	89 ad       	ldd	r24, Y+57	; 0x39
    392a:	9a ad       	ldd	r25, Y+58	; 0x3a
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	9a af       	std	Y+58, r25	; 0x3a
    3930:	89 af       	std	Y+57, r24	; 0x39
    3932:	89 ad       	ldd	r24, Y+57	; 0x39
    3934:	9a ad       	ldd	r25, Y+58	; 0x3a
    3936:	85 30       	cpi	r24, 0x05	; 5
    3938:	91 05       	cpc	r25, r1
    393a:	0c f4       	brge	.+2      	; 0x393e <pass_check+0x366>
    393c:	77 cf       	rjmp	.-274    	; 0x382c <pass_check+0x254>

			UART_sendByte(key_check[l]);
			_delay_ms(50);
	}
	match_cond = UART_recieveByte();
    393e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <UART_recieveByte>
    3942:	8b af       	std	Y+59, r24	; 0x3b
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a8 e4       	ldi	r26, 0x48	; 72
    394a:	b2 e4       	ldi	r27, 0x42	; 66
    394c:	8b 87       	std	Y+11, r24	; 0x0b
    394e:	9c 87       	std	Y+12, r25	; 0x0c
    3950:	ad 87       	std	Y+13, r26	; 0x0d
    3952:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000UL
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	6b 85       	ldd	r22, Y+11	; 0x0b
    3956:	7c 85       	ldd	r23, Y+12	; 0x0c
    3958:	8d 85       	ldd	r24, Y+13	; 0x0d
    395a:	9e 85       	ldd	r25, Y+14	; 0x0e
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a ef       	ldi	r20, 0xFA	; 250
    3962:	54 e4       	ldi	r21, 0x44	; 68
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	8f 83       	std	Y+7, r24	; 0x07
    396e:	98 87       	std	Y+8, r25	; 0x08
    3970:	a9 87       	std	Y+9, r26	; 0x09
    3972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3974:	6f 81       	ldd	r22, Y+7	; 0x07
    3976:	78 85       	ldd	r23, Y+8	; 0x08
    3978:	89 85       	ldd	r24, Y+9	; 0x09
    397a:	9a 85       	ldd	r25, Y+10	; 0x0a
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e8       	ldi	r20, 0x80	; 128
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3988:	88 23       	and	r24, r24
    398a:	2c f4       	brge	.+10     	; 0x3996 <pass_check+0x3be>
		__ticks = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9e 83       	std	Y+6, r25	; 0x06
    3992:	8d 83       	std	Y+5, r24	; 0x05
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <pass_check+0x43c>
	else if (__tmp > 65535)
    3996:	6f 81       	ldd	r22, Y+7	; 0x07
    3998:	78 85       	ldd	r23, Y+8	; 0x08
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	9a 85       	ldd	r25, Y+10	; 0x0a
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	4f e7       	ldi	r20, 0x7F	; 127
    39a4:	57 e4       	ldi	r21, 0x47	; 71
    39a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39aa:	18 16       	cp	r1, r24
    39ac:	4c f5       	brge	.+82     	; 0x3a00 <pass_check+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <pass_check+0x41e>
    39d8:	88 ec       	ldi	r24, 0xC8	; 200
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	9c 81       	ldd	r25, Y+4	; 0x04
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <pass_check+0x40c>
    39e8:	9c 83       	std	Y+4, r25	; 0x04
    39ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	69 f7       	brne	.-38     	; 0x39d8 <pass_check+0x400>
    39fe:	14 c0       	rjmp	.+40     	; 0x3a28 <pass_check+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
    3a16:	9e 81       	ldd	r25, Y+6	; 0x06
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <pass_check+0x448>
    3a24:	9a 83       	std	Y+2, r25	; 0x02
    3a26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	}

	return match_cond;
    3a28:	8b ad       	ldd	r24, Y+59	; 0x3b
}
    3a2a:	c0 5c       	subi	r28, 0xC0	; 192
    3a2c:	df 4f       	sbci	r29, 0xFF	; 255
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <__udivmodsi4>:
    3a3e:	a1 e2       	ldi	r26, 0x21	; 33
    3a40:	1a 2e       	mov	r1, r26
    3a42:	aa 1b       	sub	r26, r26
    3a44:	bb 1b       	sub	r27, r27
    3a46:	fd 01       	movw	r30, r26
    3a48:	0d c0       	rjmp	.+26     	; 0x3a64 <__udivmodsi4_ep>

00003a4a <__udivmodsi4_loop>:
    3a4a:	aa 1f       	adc	r26, r26
    3a4c:	bb 1f       	adc	r27, r27
    3a4e:	ee 1f       	adc	r30, r30
    3a50:	ff 1f       	adc	r31, r31
    3a52:	a2 17       	cp	r26, r18
    3a54:	b3 07       	cpc	r27, r19
    3a56:	e4 07       	cpc	r30, r20
    3a58:	f5 07       	cpc	r31, r21
    3a5a:	20 f0       	brcs	.+8      	; 0x3a64 <__udivmodsi4_ep>
    3a5c:	a2 1b       	sub	r26, r18
    3a5e:	b3 0b       	sbc	r27, r19
    3a60:	e4 0b       	sbc	r30, r20
    3a62:	f5 0b       	sbc	r31, r21

00003a64 <__udivmodsi4_ep>:
    3a64:	66 1f       	adc	r22, r22
    3a66:	77 1f       	adc	r23, r23
    3a68:	88 1f       	adc	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	1a 94       	dec	r1
    3a6e:	69 f7       	brne	.-38     	; 0x3a4a <__udivmodsi4_loop>
    3a70:	60 95       	com	r22
    3a72:	70 95       	com	r23
    3a74:	80 95       	com	r24
    3a76:	90 95       	com	r25
    3a78:	9b 01       	movw	r18, r22
    3a7a:	ac 01       	movw	r20, r24
    3a7c:	bd 01       	movw	r22, r26
    3a7e:	cf 01       	movw	r24, r30
    3a80:	08 95       	ret

00003a82 <__prologue_saves__>:
    3a82:	2f 92       	push	r2
    3a84:	3f 92       	push	r3
    3a86:	4f 92       	push	r4
    3a88:	5f 92       	push	r5
    3a8a:	6f 92       	push	r6
    3a8c:	7f 92       	push	r7
    3a8e:	8f 92       	push	r8
    3a90:	9f 92       	push	r9
    3a92:	af 92       	push	r10
    3a94:	bf 92       	push	r11
    3a96:	cf 92       	push	r12
    3a98:	df 92       	push	r13
    3a9a:	ef 92       	push	r14
    3a9c:	ff 92       	push	r15
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	ca 1b       	sub	r28, r26
    3aac:	db 0b       	sbc	r29, r27
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	09 94       	ijmp

00003aba <__epilogue_restores__>:
    3aba:	2a 88       	ldd	r2, Y+18	; 0x12
    3abc:	39 88       	ldd	r3, Y+17	; 0x11
    3abe:	48 88       	ldd	r4, Y+16	; 0x10
    3ac0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ac2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ac4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ac6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ac8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3aca:	aa 84       	ldd	r10, Y+10	; 0x0a
    3acc:	b9 84       	ldd	r11, Y+9	; 0x09
    3ace:	c8 84       	ldd	r12, Y+8	; 0x08
    3ad0:	df 80       	ldd	r13, Y+7	; 0x07
    3ad2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ad4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ad6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ad8:	1b 81       	ldd	r17, Y+3	; 0x03
    3ada:	aa 81       	ldd	r26, Y+2	; 0x02
    3adc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ade:	ce 0f       	add	r28, r30
    3ae0:	d1 1d       	adc	r29, r1
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	ed 01       	movw	r28, r26
    3aee:	08 95       	ret

00003af0 <itoa>:
    3af0:	fb 01       	movw	r30, r22
    3af2:	9f 01       	movw	r18, r30
    3af4:	e8 94       	clt
    3af6:	42 30       	cpi	r20, 0x02	; 2
    3af8:	c4 f0       	brlt	.+48     	; 0x3b2a <itoa+0x3a>
    3afa:	45 32       	cpi	r20, 0x25	; 37
    3afc:	b4 f4       	brge	.+44     	; 0x3b2a <itoa+0x3a>
    3afe:	4a 30       	cpi	r20, 0x0A	; 10
    3b00:	29 f4       	brne	.+10     	; 0x3b0c <itoa+0x1c>
    3b02:	97 fb       	bst	r25, 7
    3b04:	1e f4       	brtc	.+6      	; 0x3b0c <itoa+0x1c>
    3b06:	90 95       	com	r25
    3b08:	81 95       	neg	r24
    3b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0c:	64 2f       	mov	r22, r20
    3b0e:	77 27       	eor	r23, r23
    3b10:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__udivmodhi4>
    3b14:	80 5d       	subi	r24, 0xD0	; 208
    3b16:	8a 33       	cpi	r24, 0x3A	; 58
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <itoa+0x2c>
    3b1a:	89 5d       	subi	r24, 0xD9	; 217
    3b1c:	81 93       	st	Z+, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	a1 f7       	brne	.-24     	; 0x3b0c <itoa+0x1c>
    3b24:	16 f4       	brtc	.+4      	; 0x3b2a <itoa+0x3a>
    3b26:	5d e2       	ldi	r21, 0x2D	; 45
    3b28:	51 93       	st	Z+, r21
    3b2a:	10 82       	st	Z, r1
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <strrev>

00003b32 <strrev>:
    3b32:	dc 01       	movw	r26, r24
    3b34:	fc 01       	movw	r30, r24
    3b36:	67 2f       	mov	r22, r23
    3b38:	71 91       	ld	r23, Z+
    3b3a:	77 23       	and	r23, r23
    3b3c:	e1 f7       	brne	.-8      	; 0x3b36 <strrev+0x4>
    3b3e:	32 97       	sbiw	r30, 0x02	; 2
    3b40:	04 c0       	rjmp	.+8      	; 0x3b4a <strrev+0x18>
    3b42:	7c 91       	ld	r23, X
    3b44:	6d 93       	st	X+, r22
    3b46:	70 83       	st	Z, r23
    3b48:	62 91       	ld	r22, -Z
    3b4a:	ae 17       	cp	r26, r30
    3b4c:	bf 07       	cpc	r27, r31
    3b4e:	c8 f3       	brcs	.-14     	; 0x3b42 <strrev+0x10>
    3b50:	08 95       	ret

00003b52 <__udivmodhi4>:
    3b52:	aa 1b       	sub	r26, r26
    3b54:	bb 1b       	sub	r27, r27
    3b56:	51 e1       	ldi	r21, 0x11	; 17
    3b58:	07 c0       	rjmp	.+14     	; 0x3b68 <__udivmodhi4_ep>

00003b5a <__udivmodhi4_loop>:
    3b5a:	aa 1f       	adc	r26, r26
    3b5c:	bb 1f       	adc	r27, r27
    3b5e:	a6 17       	cp	r26, r22
    3b60:	b7 07       	cpc	r27, r23
    3b62:	10 f0       	brcs	.+4      	; 0x3b68 <__udivmodhi4_ep>
    3b64:	a6 1b       	sub	r26, r22
    3b66:	b7 0b       	sbc	r27, r23

00003b68 <__udivmodhi4_ep>:
    3b68:	88 1f       	adc	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	5a 95       	dec	r21
    3b6e:	a9 f7       	brne	.-22     	; 0x3b5a <__udivmodhi4_loop>
    3b70:	80 95       	com	r24
    3b72:	90 95       	com	r25
    3b74:	bc 01       	movw	r22, r24
    3b76:	cd 01       	movw	r24, r26
    3b78:	08 95       	ret

00003b7a <_exit>:
    3b7a:	f8 94       	cli

00003b7c <__stop_program>:
    3b7c:	ff cf       	rjmp	.-2      	; 0x3b7c <__stop_program>
